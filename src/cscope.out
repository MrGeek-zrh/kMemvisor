cscope 15 $HOME/Desktop/xv6/crs -q 0000001071 0000152016
	@asm.h

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

16 
	#STA_X
 0x8

17 
	#STA_E
 0x4

18 
	#STA_C
 0x4

19 
	#STA_W
 0x2

20 
	#STA_R
 0x2

21 
	#STA_A
 0x1

	@bio.c

23 
	~"ty≥s.h
"

24 
	~"defs.h
"

25 
	~"∑øm.h
"

26 
	~"•ölock.h
"

27 
	~"buf.h
"

30 
•ölock
 
	mlock
;

31 
buf
 
	mbuf
[
NBUF
];

35 
buf
 
	mhód
;

36 } 
	gbˇche
;

39 
	$böô
()

41 
buf
 *
b
;

43 
	`öôlock
(&
bˇche
.
lock
, "bcache");

47 
bˇche
.
hód
.
¥ev
 = &bcache.head;

48 
bˇche
.
hód
.
√xt
 = &bcache.head;

49 
b
 = 
bˇche
.
buf
; b < bˇche.buf+
NBUF
; b++){

50 
b
->
√xt
 = 
bˇche
.
hód
.next;

51 
b
->
¥ev
 = &
bˇche
.
hód
;

52 
b
->
dev
 = -1;

53 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

54 
bˇche
.
hód
.
√xt
 = 
b
;

56 
	}
}

61 
buf
*

62 
	$bgë
(
uöt
 
dev
, uöà
£˘‹
)

64 
buf
 *
b
;

66 
	`acquúe
(&
bˇche
.
lock
);

68 
lo›
:

70 
b
 = 
bˇche
.
hód
.
√xt
; b != &bcache.head; b = b->next){

71 if(
b
->
dev
 =dev && b->
£˘‹
 == sector){

72 if(!(
b
->
Êags
 & 
B_BUSY
)){

73 
b
->
Êags
 |
B_BUSY
;

74 
	`ªÀa£
(&
bˇche
.
lock
);

75  
b
;

77 
	`¶ìp
(
b
, &
bˇche
.
lock
);

78 
lo›
;

83 
b
 = 
bˇche
.
hód
.
¥ev
; b != &bcache.head; b = b->prev){

84 if((
b
->
Êags
 & 
B_BUSY
Ë=0 && (b->Êag†& 
B_DIRTY
) == 0){

85 
b
->
dev
 = dev;

86 
b
->
£˘‹
 = sector;

87 
b
->
Êags
 = 
B_BUSY
;

88 
	`ªÀa£
(&
bˇche
.
lock
);

89  
b
;

92 
	`∑nic
("bget:Ço buffers");

93 
	}
}

96 
buf
*

97 
	$bªad
(
uöt
 
dev
, uöà
£˘‹
)

99 
buf
 *
b
;

101 
b
 = 
	`bgë
(
dev
, 
£˘‹
);

102 if(!(
b
->
Êags
 & 
B_VALID
))

103 
	`idîw
(
b
);

104  
b
;

105 
	}
}

109 
	$bwrôe
(
buf
 *
b
)

111 if((
b
->
Êags
 & 
B_BUSY
) == 0)

112 
	`∑nic
("bwrite");

113 
b
->
Êags
 |
B_DIRTY
;

114 
	`idîw
(
b
);

115 
	}
}

120 
	$bªl£
(
buf
 *
b
)

122 if((
b
->
Êags
 & 
B_BUSY
) == 0)

123 
	`∑nic
("brelse");

125 
	`acquúe
(&
bˇche
.
lock
);

127 
b
->
√xt
->
¥ev
 = b->prev;

128 
b
->
¥ev
->
√xt
 = b->next;

129 
b
->
√xt
 = 
bˇche
.
hód
.next;

130 
b
->
¥ev
 = &
bˇche
.
hód
;

131 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

132 
bˇche
.
hód
.
√xt
 = 
b
;

134 
b
->
Êags
 &~
B_BUSY
;

135 
	`wakeup
(
b
);

137 
	`ªÀa£
(&
bˇche
.
lock
);

138 
	}
}

	@bootmain.c

8 
	~"ty≥s.h
"

9 
	~"ñf.h
"

10 
	~"x86.h
"

11 
	~"memœyout.h
"

13 
	#SECTSIZE
 512

	)

15 
ªad£g
(
uch¨
*, 
uöt
, uint);

18 
	$boŸmaö
()

20 
ñfhdr
 *
ñf
;

21 
¥oghdr
 *
ph
, *
ïh
;

22 (*
íåy
)();

23 
uch¨
* 
∑
;

25 
ñf
 = (
ñfhdr
*)0x10000;

28 
	`ªad£g
((
uch¨
*)
ñf
, 4096, 0);

31 if(
ñf
->
magic
 !
ELF_MAGIC
)

35 
ph
 = (
¥oghdr
*)((
uch¨
*)
ñf
 +Élf->
phoff
);

36 
ïh
 = 
ph
 + 
ñf
->
phnum
;

37 ; 
ph
 < 
ïh
;Öh++){

38 
∑
 = (
uch¨
*)
ph
->
∑ddr
;

39 
	`ªad£g
(
∑
, 
ph
->
fûesz
,Öh->
off
);

40 if(
ph
->
memsz
 >Öh->
fûesz
)

41 
	`°osb
(
∑
 + 
ph
->
fûesz
, 0,Öh->
memsz
 -Öh->filesz);

46 
íåy
 = ((*)())(
ñf
->entry);

47 
	`íåy
();

48 
	}
}

51 
	$waôdisk
()

54 (
	`öb
(0x1F7) & 0xC0) != 0x40)

56 
	}
}

60 
	$ªad£˘
(*
d°
, 
uöt
 
off£t
)

63 
	`waôdisk
();

64 
	`outb
(0x1F2, 1);

65 
	`outb
(0x1F3, 
off£t
);

66 
	`outb
(0x1F4, 
off£t
 >> 8);

67 
	`outb
(0x1F5, 
off£t
 >> 16);

68 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

69 
	`outb
(0x1F7, 0x20);

72 
	`waôdisk
();

73 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

74 
	}
}

79 
	$ªad£g
(
uch¨
* 
∑
, 
uöt
 
cou¡
, uöà
off£t
)

81 
uch¨
* 
ïa
;

83 
ïa
 = 
∑
 + 
cou¡
;

86 
∑
 -
off£t
 % 
SECTSIZE
;

89 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

94 ; 
∑
 < 
ïa
;Ö®+
SECTSIZE
, 
off£t
++)

95 
	`ªad£˘
(
∑
, 
off£t
);

96 
	}
}

	@buf.h

1 
	sbuf
 {

2 
	mÊags
;

3 
uöt
 
	mdev
;

4 
uöt
 
	m£˘‹
;

5 
buf
 *
	m¥ev
;

6 
buf
 *
	m√xt
;

7 
buf
 *
	mq√xt
;

8 
uch¨
 
	md©a
[512];

10 
	#B_BUSY
 0x1

11 
	#B_VALID
 0x2

12 
	#B_DIRTY
 0x4

13 

	)

	@cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

13 
	`wrôe
(1, 
buf
, 
n
);

14 if(
n
 < 0){

15 
	`¥ötf
(1, "cat:ÑeadÉrror\n");

16 
	`exô
();

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
fd
, 
i
;

25 if(
¨gc
 <= 1){

26 
	`ˇt
(0);

27 
	`exô
();

30 
i
 = 1; i < 
¨gc
; i++){

31 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

32 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

33 
	`exô
();

35 
	`ˇt
(
fd
);

36 
	`˛o£
(
fd
);

38 
	`exô
();

39 
	}
}

	@console.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

10 
	~"fs.h
"

11 
	~"fûe.h
"

12 
	~"memœyout.h
"

13 
	~"mmu.h
"

14 
	~"¥oc.h
"

15 
	~"x86.h
"

17 
c⁄•utc
();

19 
	g∑nicked
 = 0;

22 
•ölock
 
	mlock
;

23 
	mlockög
;

24 } 
	gc⁄s
;

27 
	$¥ötöt
(
xx
, 
ba£
, 
sign
)

29 
digôs
[] = "0123456789abcdef";

30 
buf
[16];

31 
i
;

32 
uöt
 
x
;

34 if(
sign
 && (sig¿
xx
 < 0))

35 
x
 = -
xx
;

37 
x
 = 
xx
;

39 
i
 = 0;

41 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

42 }(
x
 /
ba£
) != 0);

44 if(
sign
)

45 
buf
[
i
++] = '-';

47 --
i
 >= 0)

48 
	`c⁄•utc
(
buf
[
i
]);

49 
	}
}

54 
	$˝rötf
(*
fmt
, ...)

56 
i
, 
c
, 
lockög
;

57 
uöt
 *
¨gp
;

58 *
s
;

60 
lockög
 = 
c⁄s
.locking;

61 if(
lockög
)

62 
	`acquúe
(&
c⁄s
.
lock
);

64 i‡(
fmt
 == 0)

65 
	`∑nic
("null fmt");

67 
¨gp
 = (
uöt
*)(*)(&
fmt
 + 1);

68 
i
 = 0; (
c
 = 
fmt
[i] & 0xff) != 0; i++){

69 if(
c
 != '%'){

70 
	`c⁄•utc
(
c
);

73 
c
 = 
fmt
[++
i
] & 0xff;

74 if(
c
 == 0)

76 
c
){

78 
	`¥ötöt
(*
¨gp
++, 10, 1);

82 
	`¥ötöt
(*
¨gp
++, 16, 0);

85 if((
s
 = (*)*
¨gp
++) == 0)

86 
s
 = "(null)";

87 ; *
s
; s++)

88 
	`c⁄•utc
(*
s
);

91 
	`c⁄•utc
('%');

95 
	`c⁄•utc
('%');

96 
	`c⁄•utc
(
c
);

101 if(
lockög
)

102 
	`ªÀa£
(&
c⁄s
.
lock
);

103 
	}
}

106 
	$∑nic
(*
s
)

108 
i
;

109 
uöt
 
pcs
[10];

111 
	`˛i
();

112 
c⁄s
.
lockög
 = 0;

113 
	`˝rötf
("˝u%d:Ö™ic: ", 
˝u
->
id
);

114 
	`˝rötf
(
s
);

115 
	`˝rötf
("\n");

116 
	`gëˇŒîpcs
(&
s
, 
pcs
);

117 
i
=0; i<10; i++)

118 
	`˝rötf
(" %p", 
pcs
[
i
]);

119 
∑nicked
 = 1;

122 
	}
}

125 
	#BACKSPACE
 0x100

	)

126 
	#CRTPORT
 0x3d4

	)

127 
ush‹t
 *
	g¸t
 = (ush‹t*)
P2V
(0xb8000);

130 
	$cg≠utc
(
c
)

132 
pos
;

135 
	`outb
(
CRTPORT
, 14);

136 
pos
 = 
	`öb
(
CRTPORT
+1) << 8;

137 
	`outb
(
CRTPORT
, 15);

138 
pos
 |
	`öb
(
CRTPORT
+1);

140 if(
c
 == '\n')

141 
pos
 += 80 -Öos%80;

142 if(
c
 =
BACKSPACE
){

143 if(
pos
 > 0) --pos;

145 
¸t
[
pos
++] = (
c
&0xff) | 0x0700;

147 if((
pos
/80) >= 24){

148 
	`memmove
(
¸t
, crt+80, (crt[0])*23*80);

149 
pos
 -= 80;

150 
	`mem£t
(
¸t
+
pos
, 0, (crt[0])*(24*80 -Öos));

153 
	`outb
(
CRTPORT
, 14);

154 
	`outb
(
CRTPORT
+1, 
pos
>>8);

155 
	`outb
(
CRTPORT
, 15);

156 
	`outb
(
CRTPORT
+1, 
pos
);

157 
¸t
[
pos
] = ' ' | 0x0700;

158 
	}
}

161 
	$c⁄•utc
(
c
)

163 if(
∑nicked
){

164 
	`˛i
();

169 if(
c
 =
BACKSPACE
){

170 
	`u¨çutc
('\b'); uartputc(' '); uartputc('\b');

172 
	`u¨çutc
(
c
);

173 
	`cg≠utc
(
c
);

174 
	}
}

176 
	#INPUT_BUF
 128

	)

178 
•ölock
 
	mlock
;

179 
	mbuf
[
INPUT_BUF
];

180 
uöt
 
	mr
;

181 
uöt
 
	mw
;

182 
uöt
 
	me
;

183 } 
	göput
;

185 
	#C
(
x
) ((x)-'@')

186 

	)

188 
c⁄sﬁeöå
((*
gëc
)())

190 
c
;

192 
	`acquúe
(&
öput
.
lock
);

193 (
c
 = 
	`gëc
()) >= 0){

194 
c
){

195 
	`C
('P'):

196 
	`¥ocdump
();

198 
	`C
('U'):

199 
öput
.
e
 !öput.
w
 &&

200 
öput
.
buf
[(öput.
e
-1Ë% 
INPUT_BUF
] != '\n'){

201 
öput
.
e
--;

202 
	`c⁄•utc
(
BACKSPACE
);

205 
	`C
('H'): '\x7f':

206 if(
öput
.
e
 !öput.
w
){

207 
öput
.
e
--;

208 
	`c⁄•utc
(
BACKSPACE
);

212 if(
c
 !0 && 
öput
.
e
-öput.
r
 < 
INPUT_BUF
){

213 
c
 = (c == '\r') ? '\n' : c;

214 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

215 
	`c⁄•utc
(
c
);

216 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
öput
.
e
 =öput.
r
+
INPUT_BUF
){

217 
öput
.
w
 = i≈ut.
e
;

218 
	`wakeup
(&
öput
.
r
);

224 
	`ªÀa£
(&
öput
.
lock
);

225 
	}
}

228 
	$c⁄sﬁîód
(
öode
 *
ù
, *
d°
, 
n
)

230 
uöt
 
èrgë
;

231 
c
;

233 
	`iu∆ock
(
ù
);

234 
èrgë
 = 
n
;

235 
	`acquúe
(&
öput
.
lock
);

236 
n
 > 0){

237 
öput
.
r
 =öput.
w
){

238 if(
¥oc
->
kûÀd
){

239 
	`ªÀa£
(&
öput
.
lock
);

240 
	`ûock
(
ù
);

243 
	`¶ìp
(&
öput
.
r
, &öput.
lock
);

245 
c
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

246 if(
c
 =
	`C
('D')){

247 if(
n
 < 
èrgë
){

250 
öput
.
r
--;

254 *
d°
++ = 
c
;

255 --
n
;

256 if(
c
 == '\n')

259 
	`ªÀa£
(&
öput
.
lock
);

260 
	`ûock
(
ù
);

262  
èrgë
 - 
n
;

263 
	}
}

266 
	$c⁄sﬁewrôe
(
öode
 *
ù
, *
buf
, 
n
)

268 
i
;

270 
	`iu∆ock
(
ù
);

271 
	`acquúe
(&
c⁄s
.
lock
);

272 
i
 = 0; i < 
n
; i++)

273 
	`c⁄•utc
(
buf
[
i
] & 0xff);

274 
	`ªÀa£
(&
c⁄s
.
lock
);

275 
	`ûock
(
ù
);

277  
n
;

278 
	}
}

281 
	$c⁄sﬁeöô
()

283 
	`öôlock
(&
c⁄s
.
lock
, "console");

284 
	`öôlock
(&
öput
.
lock
, "input");

286 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁewrôe
;

287 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁîód
;

288 
c⁄s
.
lockög
 = 1;

290 
	`pi˚«bÀ
(
IRQ_KBD
);

291 
	`iﬂpi˚«bÀ
(
IRQ_KBD
, 0);

292 
	}
}

	@defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	g•ölock
;

8 
	g°©
;

9 
	gsu≥rblock
;

12 
böô
();

13 
buf
* 
bªad
(
uöt
, uint);

14 
bªl£
(
buf
*);

15 
bwrôe
(
buf
*);

18 
c⁄sﬁeöô
();

19 
˝rötf
(*, ...);

20 
c⁄sﬁeöå
((*)());

21 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

24 
	`exec
(*, **);

27 
fûe
* 
	`fûóŒoc
();

28 
	`fûe˛o£
(
fûe
*);

29 
fûe
* 
	`fûedup
(file*);

30 
	`fûeöô
();

31 
	`fûîód
(
fûe
*, *, 
n
);

32 
	`fûe°©
(
fûe
*, 
°©
*);

33 
	`fûewrôe
(
fûe
*, *, 
n
);

36 
	`ªadsb
(
dev
, 
su≥rblock
 *
sb
);

37 
	`dúlök
(
öode
*, *, 
uöt
);

38 
öode
* 
	`dúlookup
(öode*, *, 
uöt
*);

39 
öode
* 
	`üŒoc
(
uöt
, );

40 
öode
* 
	`idup
(inode*);

41 
	`iöô
();

42 
	`ûock
(
öode
*);

43 
	`ùut
(
öode
*);

44 
	`iu∆ock
(
öode
*);

45 
	`iu∆ockput
(
öode
*);

46 
	`iupd©e
(
öode
*);

47 
	`«mecmp
(const *, const *);

48 
öode
* 
	`«mei
(*);

49 
öode
* 
	`«meù¨ít
(*, *);

50 
	`ªadi
(
öode
*, *, 
uöt
, uint);

51 
	`°©i
(
öode
*, 
°©
*);

52 
	`wrôei
(
öode
*, *, 
uöt
, uint);

55 
	`ideöô
();

56 
	`ideöå
();

57 
	`idîw
(
buf
*);

60 
	`iﬂpi˚«bÀ
(
úq
, 
˝u
);

61 
uch¨
 
iﬂpicid
;

62 
	`iﬂpicöô
();

65 * 
	`kÆloc
();

66 
	`k‰ì
(*);

67 
	`köô1
(*, *);

68 
	`köô2
(*, *);

71 
	`kbdöå
();

74 
	`˝unum
();

75 vﬁ©ûê
uöt
* 
œpic
;

76 
	`œpi˚oi
();

77 
	`œpicöô
();

78 
	`œpic°¨èp
(
uch¨
, 
uöt
);

79 
	`mi¸odñay
();

82 
	`öôlog
();

83 
	`log_wrôe
(
buf
*);

84 
	`begö_å™s
();

85 
	`commô_å™s
();

88 
ismp
;

89 
	`mpb˝u
();

90 
	`mpöô
();

91 
	`mp°¨âhem
();

94 
	`pi˚«bÀ
();

95 
	`picöô
();

98 
	`pùóŒoc
(
fûe
**, file**);

99 
	`pùe˛o£
(
pùe
*, );

100 
	`pùîód
(
pùe
*, *, );

101 
	`pùewrôe
(
pùe
*, *, );

105 
¥oc
* 
	`c›y¥oc
(proc*);

106 
	`exô
();

107 
	`f‹k
();

108 
	`grow¥oc
();

109 
	`kûl
();

110 
	`pöô
();

111 
	`¥ocdump
();

112 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

113 
	`sched
();

114 
	`¶ìp
(*, 
•ölock
*);

115 
	`u£röô
();

116 
	`waô
();

117 
	`wakeup
(*);

118 
	`yõld
();

121 
	`swtch
(
c⁄ãxt
**, context*);

124 
	`acquúe
(
•ölock
*);

125 
	`gëˇŒîpcs
(*, 
uöt
*);

126 
	`hﬁdög
(
•ölock
*);

127 
	`öôlock
(
•ölock
*, *);

128 
	`ªÀa£
(
•ölock
*);

129 
	`push˛i
();

130 
	`p›˛i
();

133 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

134 * 
	`memmove
(*, c⁄° *, 
uöt
);

135 * 
	`mem£t
(*, , 
uöt
);

136 * 
	`ß„°r˝y
(*, const *, );

137 
	`°æí
(const *);

138 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

139 * 
	`°∫˝y
(*, const *, );

142 
	`¨göt
(, *);

143 
	`¨g±r
(, **, );

144 
	`¨g°r
(, **);

145 
	`„tchöt
(
uöt
, *);

146 
	`„tch°r
(
uöt
, **);

147 
	`sysˇŒ
();

150 
	`timîöô
();

153 
	`idtöô
();

154 
uöt
 
ticks
;

155 
	`tvöô
();

156 
•ölock
 
tick¶ock
;

159 
	`u¨töô
();

160 
	`u¨töå
();

161 
	`u¨çutc
();

164 
	`£göô
();

165 
	`kvmÆloc
();

166 
	`vmíabÀ
();

167 
pde_t
* 
	`£tupkvm
();

168 * 
	`uva2ka
(
pde_t
*, *);

169 
	`Ælocuvm
(
pde_t
*, 
uöt
, uint);

170 
	`dóŒocuvm
(
pde_t
*, 
uöt
, uint);

171 
	`‰ìvm
(
pde_t
*);

172 
	`öôuvm
(
pde_t
*, *, 
uöt
);

173 
	`lﬂduvm
(
pde_t
*, *, 
öode
*, 
uöt
, uint);

174 
pde_t
* 
	`c›yuvm
’de_t*, 
uöt
);

175 
	`swôchuvm
(
¥oc
*);

176 
	`swôchkvm
();

177 
	`c›yout
(
pde_t
*, 
uöt
, *, uint);

178 
	`˛óΩãu
(
pde_t
 *
pgdú
, *
uva
);

181 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

	@echo.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"memœyout.h
"

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
i
;

10 
i
 = 1; i < 
¨gc
; i++)

11 
	`¥ötf
(1, "%s%s", 
¨gv
[
i
], i+1 < 
¨gc
 ? " " : "\n");

13 
	`exô
();

14 
	}
}

	@elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr
 {

7 
uöt
 
	mmagic
;

8 
uch¨
 
	mñf
[12];

9 
ush‹t
 
	mty≥
;

10 
ush‹t
 
	mmachöe
;

11 
uöt
 
	mvîsi⁄
;

12 
uöt
 
	míåy
;

13 
uöt
 
	mphoff
;

14 
uöt
 
	mshoff
;

15 
uöt
 
	mÊags
;

16 
ush‹t
 
	mehsize
;

17 
ush‹t
 
	mphítsize
;

18 
ush‹t
 
	mphnum
;

19 
ush‹t
 
	mshítsize
;

20 
ush‹t
 
	mshnum
;

21 
ush‹t
 
	msh°∫dx
;

25 
	s¥oghdr
 {

26 
uöt
 
	mty≥
;

27 
uöt
 
	moff
;

28 
uöt
 
	mvaddr
;

29 
uöt
 
	m∑ddr
;

30 
uöt
 
	mfûesz
;

31 
uöt
 
	mmemsz
;

32 
uöt
 
	mÊags
;

33 
uöt
 
	mÆign
;

37 
	#ELF_PROG_LOAD
 1

	)

40 
	#ELF_PROG_FLAG_EXEC
 1

	)

41 
	#ELF_PROG_FLAG_WRITE
 2

	)

42 
	#ELF_PROG_FLAG_READ
 4

	)

	@exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"defs.h
"

7 
	~"x86.h
"

8 
	~"ñf.h
"

11 
	$exec
(*
∑th
, **
¨gv
)

13 *
s
, *
œ°
;

14 
i
, 
off
;

15 
uöt
 
¨gc
, 
sz
, 
•
, 
u°ack
[3+
MAXARG
+1];

16 
ñfhdr
 
ñf
;

17 
öode
 *
ù
;

18 
¥oghdr
 
ph
;

19 
pde_t
 *
pgdú
, *
ﬁdpgdú
;

21 if((
ù
 = 
	`«mei
(
∑th
)) == 0)

23 
	`ûock
(
ù
);

24 
pgdú
 = 0;

27 if(
	`ªadi
(
ù
, (*)&
ñf
, 0, (elf)) < (elf))

28 
bad
;

29 if(
ñf
.
magic
 !
ELF_MAGIC
)

30 
bad
;

32 if((
pgdú
 = 
	`£tupkvm
(
kÆloc
)) == 0)

33 
bad
;

36 
sz
 = 0;

37 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

38 if(
	`ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

39 
bad
;

40 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

42 if(
ph
.
memsz
 <Öh.
fûesz
)

43 
bad
;

44 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, 
ph
.
vaddr
 +Öh.
memsz
)) == 0)

45 
bad
;

46 if(
	`lﬂduvm
(
pgdú
, (*)
ph
.
vaddr
, 
ù
,Öh.
off
,Öh.
fûesz
) < 0)

47 
bad
;

49 
	`iu∆ockput
(
ù
);

50 
ù
 = 0;

54 
sz
 = 
	`PGROUNDUP
(sz);

55 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, sz + 2*
PGSIZE
)) == 0)

56 
bad
;

57 
	`˛óΩãu
(
pgdú
, (*)(
sz
 - 2*
PGSIZE
));

58 
•
 = 
sz
;

61 
¨gc
 = 0; 
¨gv
[argc];árgc++) {

62 if(
¨gc
 >
MAXARG
)

63 
bad
;

64 
•
 = (• - (
	`°æí
(
¨gv
[
¨gc
]) + 1)) & ~3;

65 if(
	`c›yout
(
pgdú
, 
•
, 
¨gv
[
¨gc
], 
	`°æí
(argv[argc]) + 1) < 0)

66 
bad
;

67 
u°ack
[3+
¨gc
] = 
•
;

69 
u°ack
[3+
¨gc
] = 0;

71 
u°ack
[0] = 0xffffffff;

72 
u°ack
[1] = 
¨gc
;

73 
u°ack
[2] = 
•
 - (
¨gc
+1)*4;

75 
•
 -(3+
¨gc
+1) * 4;

76 if(
	`c›yout
(
pgdú
, 
•
, 
u°ack
, (3+
¨gc
+1)*4) < 0)

77 
bad
;

80 
œ°
=
s
=
∑th
; *s; s++)

81 if(*
s
 == '/')

82 
œ°
 = 
s
+1;

83 
	`ß„°r˝y
(
¥oc
->
«me
, 
œ°
, (proc->name));

86 
ﬁdpgdú
 = 
¥oc
->
pgdú
;

87 
¥oc
->
pgdú
 =Ögdir;

88 
¥oc
->
sz
 = sz;

89 
¥oc
->
tf
->
eù
 = 
ñf
.
íåy
;

90 
¥oc
->
tf
->
e•
 = 
•
;

91 
	`swôchuvm
(
¥oc
);

92 
	`‰ìvm
(
ﬁdpgdú
);

95 
bad
:

96 if(
pgdú
)

97 
	`‰ìvm
(
pgdú
);

98 if(
ù
)

99 
	`iu∆ockput
(
ù
);

101 
	}
}

	@fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@file.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"•ölock.h
"

12 
devsw
 
	gdevsw
[
NDEV
];

14 
•ölock
 
	mlock
;

15 
fûe
 
	mfûe
[
NFILE
];

16 } 
	g·abÀ
;

19 
	$fûeöô
()

21 
	`öôlock
(&
·abÀ
.
lock
, "ftable");

22 
	}
}

25 
fûe
*

26 
	$fûóŒoc
()

28 
fûe
 *
f
;

30 
	`acquúe
(&
·abÀ
.
lock
);

31 
f
 = 
·abÀ
.
fûe
; f < fèbÀ.fûê+ 
NFILE
; f++){

32 if(
f
->
ªf
 == 0){

33 
f
->
ªf
 = 1;

34 
	`ªÀa£
(&
·abÀ
.
lock
);

35  
f
;

38 
	`ªÀa£
(&
·abÀ
.
lock
);

40 
	}
}

43 
fûe
*

44 
	$fûedup
(
fûe
 *
f
)

46 
	`acquúe
(&
·abÀ
.
lock
);

47 if(
f
->
ªf
 < 1)

48 
	`∑nic
("filedup");

49 
f
->
ªf
++;

50 
	`ªÀa£
(&
·abÀ
.
lock
);

51  
f
;

52 
	}
}

56 
	$fûe˛o£
(
fûe
 *
f
)

58 
fûe
 
ff
;

60 
	`acquúe
(&
·abÀ
.
lock
);

61 if(
f
->
ªf
 < 1)

62 
	`∑nic
("fileclose");

63 if(--
f
->
ªf
 > 0){

64 
	`ªÀa£
(&
·abÀ
.
lock
);

67 
ff
 = *
f
;

68 
f
->
ªf
 = 0;

69 
f
->
ty≥
 = 
FD_NONE
;

70 
	`ªÀa£
(&
·abÀ
.
lock
);

72 if(
ff
.
ty≥
 =
FD_PIPE
)

73 
	`pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

74 if(
ff
.
ty≥
 =
FD_INODE
){

75 
	`begö_å™s
();

76 
	`ùut
(
ff
.
ù
);

77 
	`commô_å™s
();

79 
	}
}

83 
	$fûe°©
(
fûe
 *
f
, 
°©
 *
°
)

85 if(
f
->
ty≥
 =
FD_INODE
){

86 
	`ûock
(
f
->
ù
);

87 
	`°©i
(
f
->
ù
, 
°
);

88 
	`iu∆ock
(
f
->
ù
);

92 
	}
}

96 
	$fûîód
(
fûe
 *
f
, *
addr
, 
n
)

98 
r
;

100 if(
f
->
ªadabÀ
 == 0)

102 if(
f
->
ty≥
 =
FD_PIPE
)

103  
	`pùîód
(
f
->
pùe
, 
addr
, 
n
);

104 if(
f
->
ty≥
 =
FD_INODE
){

105 
	`ûock
(
f
->
ù
);

106 if((
r
 = 
	`ªadi
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

107 
f
->
off
 +
r
;

108 
	`iu∆ock
(
f
->
ù
);

109  
r
;

111 
	`∑nic
("fileread");

112 
	}
}

117 
	$fûewrôe
(
fûe
 *
f
, *
addr
, 
n
)

119 
r
;

121 if(
f
->
wrôabÀ
 == 0)

123 if(
f
->
ty≥
 =
FD_PIPE
)

124  
	`pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

125 if(
f
->
ty≥
 =
FD_INODE
){

132 
max
 = ((
LOGSIZE
-1-1-2) / 2) * 512;

133 
i
 = 0;

134 
i
 < 
n
){

135 
n1
 = 
n
 - 
i
;

136 if(
n1
 > 
max
)

137 
n1
 = 
max
;

139 
	`begö_å™s
();

140 
	`ûock
(
f
->
ù
);

141 i‡((
r
 = 
	`wrôei
(
f
->
ù
, 
addr
 + 
i
, f->
off
, 
n1
)) > 0)

142 
f
->
off
 +
r
;

143 
	`iu∆ock
(
f
->
ù
);

144 
	`commô_å™s
();

146 if(
r
 < 0)

148 if(
r
 !
n1
)

149 
	`∑nic
("short filewrite");

150 
i
 +
r
;

152  
i
 =
n
 ?Ç : -1;

154 
	`∑nic
("filewrite");

155 
	}
}

	@file.h

1 
	sfûe
 {

2 íum { 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

3 
	mªf
;

4 
	mªadabÀ
;

5 
	mwrôabÀ
;

6 
pùe
 *
	mpùe
;

7 
öode
 *
	mù
;

8 
uöt
 
	moff
;

13 
	söode
 {

14 
uöt
 
	mdev
;

15 
uöt
 
	möum
;

16 
	mªf
;

17 
	mÊags
;

19 
	mty≥
;

20 
	mmaj‹
;

21 
	mmö‹
;

22 
	m∆ök
;

23 
uöt
 
	msize
;

24 
uöt
 
	maddrs
[
NDIRECT
+1];

26 
	#I_BUSY
 0x1

	)

27 
	#I_VALID
 0x2

	)

31 
	sdevsw
 {

32 (*
	mªad
)(
	möode
*, *, );

33 (*
	mwrôe
)(
	möode
*, *, );

36 
devsw
 devsw[];

38 
	#CONSOLE
 1

	)

	@forktest.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

8 
	#N
 1000

	)

11 
	$¥ötf
(
fd
, *
s
, ...)

13 
	`wrôe
(
fd
, 
s
, 
	`°æí
(s));

14 
	}
}

17 
	$f‹kã°
()

19 
n
, 
pid
;

21 
	`¥ötf
(1, "forkÅest\n");

23 
n
=0;Ç<
N
;Ç++){

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0)

27 if(
pid
 == 0)

28 
	`exô
();

31 if(
n
 =
N
){

32 
	`¥ötf
(1, "f‹k cœimedÅÿw‹k NÅimes!\n", 
N
);

33 
	`exô
();

36 ; 
n
 > 0;Ç--){

37 if(
	`waô
() < 0){

38 
	`¥ötf
(1, "wait stoppedÉarly\n");

39 
	`exô
();

43 if(
	`waô
() != -1){

44 
	`¥ötf
(1, "wait gotÅoo many\n");

45 
	`exô
();

48 
	`¥ötf
(1, "forkÅest OK\n");

49 
	}
}

52 
	$maö
()

54 
	`f‹kã°
();

55 
	`exô
();

56 
	}
}

	@fs.c

12 
	~"ty≥s.h
"

13 
	~"defs.h
"

14 
	~"∑øm.h
"

15 
	~"°©.h
"

16 
	~"mmu.h
"

17 
	~"¥oc.h
"

18 
	~"•ölock.h
"

19 
	~"buf.h
"

20 
	~"fs.h
"

21 
	~"fûe.h
"

23 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

24 
ôrunc
(
öode
*);

28 
	$ªadsb
(
dev
, 
su≥rblock
 *
sb
)

30 
buf
 *
bp
;

32 
bp
 = 
	`bªad
(
dev
, 1);

33 
	`memmove
(
sb
, 
bp
->
d©a
, (*sb));

34 
	`bªl£
(
bp
);

35 
	}
}

39 
	$bzîo
(
dev
, 
bno
)

41 
buf
 *
bp
;

43 
bp
 = 
	`bªad
(
dev
, 
bno
);

44 
	`mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

45 
	`log_wrôe
(
bp
);

46 
	`bªl£
(
bp
);

47 
	}
}

52 
uöt


53 
	$bÆloc
(
uöt
 
dev
)

55 
b
, 
bi
, 
m
;

56 
buf
 *
bp
;

57 
su≥rblock
 
sb
;

59 
bp
 = 0;

60 
	`ªadsb
(
dev
, &
sb
);

61 
b
 = 0; b < 
sb
.
size
; b +
BPB
){

62 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

63 
bi
 = 0; bò< 
BPB
 && 
b
 + bò< 
sb
.
size
; bi++){

64 
m
 = 1 << (
bi
 % 8);

65 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0){

66 
bp
->
d©a
[
bi
/8] |
m
;

67 
	`log_wrôe
(
bp
);

68 
	`bªl£
(
bp
);

69 
	`bzîo
(
dev
, 
b
 + 
bi
);

70  
b
 + 
bi
;

73 
	`bªl£
(
bp
);

75 
	`∑nic
("balloc: out of blocks");

76 
	}
}

80 
	$b‰ì
(
dev
, 
uöt
 
b
)

82 
buf
 *
bp
;

83 
su≥rblock
 
sb
;

84 
bi
, 
m
;

86 
	`ªadsb
(
dev
, &
sb
);

87 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

88 
bi
 = 
b
 % 
BPB
;

89 
m
 = 1 << (
bi
 % 8);

90 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0)

91 
	`∑nic
("freeing free block");

92 
bp
->
d©a
[
bi
/8] &~
m
;

93 
	`log_wrôe
(
bp
);

94 
	`bªl£
(
bp
);

95 
	}
}

160 
•ölock
 
	mlock
;

161 
öode
 
	möode
[
NINODE
];

162 } 
	giˇche
;

165 
	$iöô
()

167 
	`öôlock
(&
iˇche
.
lock
, "icache");

168 
	}
}

170 
öode
* 
igë
(
uöt
 
dev
, uöà
öum
);

175 
öode
*

176 
	$üŒoc
(
uöt
 
dev
, 
ty≥
)

178 
öum
;

179 
buf
 *
bp
;

180 
döode
 *
dù
;

181 
su≥rblock
 
sb
;

183 
	`ªadsb
(
dev
, &
sb
);

185 
öum
 = 1; inum < 
sb
.
nöodes
; inum++){

186 
bp
 = 
	`bªad
(
dev
, 
	`IBLOCK
(
öum
));

187 
dù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

188 if(
dù
->
ty≥
 == 0){

189 
	`mem£t
(
dù
, 0, (*dip));

190 
dù
->
ty≥
 =Åype;

191 
	`log_wrôe
(
bp
);

192 
	`bªl£
(
bp
);

193  
	`igë
(
dev
, 
öum
);

195 
	`bªl£
(
bp
);

197 
	`∑nic
("ialloc:Ço inodes");

198 
	}
}

202 
	$iupd©e
(
öode
 *
ù
)

204 
buf
 *
bp
;

205 
döode
 *
dù
;

207 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

208 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

209 
dù
->
ty≥
 = 
ù
->type;

210 
dù
->
maj‹
 = 
ù
->major;

211 
dù
->
mö‹
 = 
ù
->minor;

212 
dù
->
∆ök
 = 
ù
->nlink;

213 
dù
->
size
 = 
ù
->size;

214 
	`memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

215 
	`log_wrôe
(
bp
);

216 
	`bªl£
(
bp
);

217 
	}
}

222 
öode
*

223 
	$igë
(
uöt
 
dev
, uöà
öum
)

225 
öode
 *
ù
, *
em±y
;

227 
	`acquúe
(&
iˇche
.
lock
);

230 
em±y
 = 0;

231 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++){

232 if(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum){

233 
ù
->
ªf
++;

234 
	`ªÀa£
(&
iˇche
.
lock
);

235  
ù
;

237 if(
em±y
 =0 && 
ù
->
ªf
 == 0)

238 
em±y
 = 
ù
;

242 if(
em±y
 == 0)

243 
	`∑nic
("iget:Ço inodes");

245 
ù
 = 
em±y
;

246 
ù
->
dev
 = dev;

247 
ù
->
öum
 = inum;

248 
ù
->
ªf
 = 1;

249 
ù
->
Êags
 = 0;

250 
	`ªÀa£
(&
iˇche
.
lock
);

252  
ù
;

253 
	}
}

257 
öode
*

258 
	$idup
(
öode
 *
ù
)

260 
	`acquúe
(&
iˇche
.
lock
);

261 
ù
->
ªf
++;

262 
	`ªÀa£
(&
iˇche
.
lock
);

263  
ù
;

264 
	}
}

269 
	$ûock
(
öode
 *
ù
)

271 
buf
 *
bp
;

272 
döode
 *
dù
;

274 if(
ù
 =0 || ip->
ªf
 < 1)

275 
	`∑nic
("ilock");

277 
	`acquúe
(&
iˇche
.
lock
);

278 
ù
->
Êags
 & 
I_BUSY
)

279 
	`¶ìp
(
ù
, &
iˇche
.
lock
);

280 
ù
->
Êags
 |
I_BUSY
;

281 
	`ªÀa£
(&
iˇche
.
lock
);

283 if(!(
ù
->
Êags
 & 
I_VALID
)){

284 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

285 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

286 
ù
->
ty≥
 = 
dù
->type;

287 
ù
->
maj‹
 = 
dù
->major;

288 
ù
->
mö‹
 = 
dù
->minor;

289 
ù
->
∆ök
 = 
dù
->nlink;

290 
ù
->
size
 = 
dù
->size;

291 
	`memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

292 
	`bªl£
(
bp
);

293 
ù
->
Êags
 |
I_VALID
;

294 if(
ù
->
ty≥
 == 0)

295 
	`∑nic
("ilock:ÇoÅype");

297 
	}
}

301 
	$iu∆ock
(
öode
 *
ù
)

303 if(
ù
 =0 || !(ù->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

304 
	`∑nic
("iunlock");

306 
	`acquúe
(&
iˇche
.
lock
);

307 
ù
->
Êags
 &~
I_BUSY
;

308 
	`wakeup
(
ù
);

309 
	`ªÀa£
(&
iˇche
.
lock
);

310 
	}
}

318 
	$ùut
(
öode
 *
ù
)

320 
	`acquúe
(&
iˇche
.
lock
);

321 if(
ù
->
ªf
 =1 && (ù->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0){

323 if(
ù
->
Êags
 & 
I_BUSY
)

324 
	`∑nic
("iput busy");

325 
ù
->
Êags
 |
I_BUSY
;

326 
	`ªÀa£
(&
iˇche
.
lock
);

327 
	`ôrunc
(
ù
);

328 
ù
->
ty≥
 = 0;

329 
	`iupd©e
(
ù
);

330 
	`acquúe
(&
iˇche
.
lock
);

331 
ù
->
Êags
 = 0;

332 
	`wakeup
(
ù
);

334 
ù
->
ªf
--;

335 
	`ªÀa£
(&
iˇche
.
lock
);

336 
	}
}

340 
	$iu∆ockput
(
öode
 *
ù
)

342 
	`iu∆ock
(
ù
);

343 
	`ùut
(
ù
);

344 
	}
}

356 
uöt


357 
	$bm≠
(
öode
 *
ù
, 
uöt
 
bn
)

359 
uöt
 
addr
, *
a
;

360 
buf
 *
bp
;

362 if(
bn
 < 
NDIRECT
){

363 if((
addr
 = 
ù
->
addrs
[
bn
]) == 0)

364 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

365  
addr
;

367 
bn
 -
NDIRECT
;

369 if(
bn
 < 
NINDIRECT
){

371 if((
addr
 = 
ù
->
addrs
[
NDIRECT
]) == 0)

372 
ù
->
addrs
[
NDIRECT
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

373 
bp
 = 
	`bªad
(
ù
->
dev
, 
addr
);

374 
a
 = (
uöt
*)
bp
->
d©a
;

375 if((
addr
 = 
a
[
bn
]) == 0){

376 
a
[
bn
] = 
addr
 = 
	`bÆloc
(
ù
->
dev
);

377 
	`log_wrôe
(
bp
);

379 
	`bªl£
(
bp
);

380  
addr
;

383 
	`∑nic
("bmap: out ofÑange");

384 
	}
}

392 
	$ôrunc
(
öode
 *
ù
)

394 
i
, 
j
;

395 
buf
 *
bp
;

396 
uöt
 *
a
;

398 
i
 = 0; i < 
NDIRECT
; i++){

399 if(
ù
->
addrs
[
i
]){

400 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

401 
ù
->
addrs
[
i
] = 0;

405 if(
ù
->
addrs
[
NDIRECT
]){

406 
bp
 = 
	`bªad
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

407 
a
 = (
uöt
*)
bp
->
d©a
;

408 
j
 = 0; j < 
NINDIRECT
; j++){

409 if(
a
[
j
])

410 
	`b‰ì
(
ù
->
dev
, 
a
[
j
]);

412 
	`bªl£
(
bp
);

413 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

414 
ù
->
addrs
[
NDIRECT
] = 0;

417 
ù
->
size
 = 0;

418 
	`iupd©e
(
ù
);

419 
	}
}

423 
	$°©i
(
öode
 *
ù
, 
°©
 *
°
)

425 
°
->
dev
 = 
ù
->dev;

426 
°
->
öo
 = 
ù
->
öum
;

427 
°
->
ty≥
 = 
ù
->type;

428 
°
->
∆ök
 = 
ù
->nlink;

429 
°
->
size
 = 
ù
->size;

430 
	}
}

435 
	$ªadi
(
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

437 
uöt
 
tŸ
, 
m
;

438 
buf
 *
bp
;

440 if(
ù
->
ty≥
 =
T_DEV
){

441 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

443  
devsw
[
ù
->
maj‹
].
	`ªad
(ù, 
d°
, 
n
);

446 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

448 if(
off
 + 
n
 > 
ù
->
size
)

449 
n
 = 
ù
->
size
 - 
off
;

451 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
d°
+=m){

452 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

453 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

454 
	`memmove
(
d°
, 
bp
->
d©a
 + 
off
%
BSIZE
, 
m
);

455 
	`bªl£
(
bp
);

457  
n
;

458 
	}
}

463 
	$wrôei
(
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

465 
uöt
 
tŸ
, 
m
;

466 
buf
 *
bp
;

468 if(
ù
->
ty≥
 =
T_DEV
){

469 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

471  
devsw
[
ù
->
maj‹
].
	`wrôe
(ù, 
§c
, 
n
);

474 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

476 if(
off
 + 
n
 > 
MAXFILE
*
BSIZE
)

479 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
§c
+=m){

480 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

481 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

482 
	`memmove
(
bp
->
d©a
 + 
off
%
BSIZE
, 
§c
, 
m
);

483 
	`log_wrôe
(
bp
);

484 
	`bªl£
(
bp
);

487 if(
n
 > 0 && 
off
 > 
ù
->
size
){

488 
ù
->
size
 = 
off
;

489 
	`iupd©e
(
ù
);

491  
n
;

492 
	}
}

498 
	$«mecmp
(c⁄° *
s
, c⁄° *
t
)

500  
	`°∫cmp
(
s
, 
t
, 
DIRSIZ
);

501 
	}
}

505 
öode
*

506 
	$dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

508 
uöt
 
off
, 
öum
;

509 
dúít
 
de
;

511 if(
dp
->
ty≥
 !
T_DIR
)

512 
	`∑nic
("dirlookupÇot DIR");

514 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

515 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

516 
	`∑nic
("dirlinkÑead");

517 if(
de
.
öum
 == 0)

519 if(
	`«mecmp
(
«me
, 
de
.name) == 0){

521 if(
poff
)

522 *
poff
 = 
off
;

523 
öum
 = 
de
.inum;

524  
	`igë
(
dp
->
dev
, 
öum
);

529 
	}
}

533 
	$dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öum
)

535 
off
;

536 
dúít
 
de
;

537 
öode
 *
ù
;

540 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

541 
	`ùut
(
ù
);

546 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

547 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

548 
	`∑nic
("dirlinkÑead");

549 if(
de
.
öum
 == 0)

553 
	`°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

554 
de
.
öum
 = inum;

555 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

556 
	`∑nic
("dirlink");

559 
	}
}

577 
	$skùñem
(*
∑th
, *
«me
)

579 *
s
;

580 
Àn
;

582 *
∑th
 == '/')

583 
∑th
++;

584 if(*
∑th
 == 0)

586 
s
 = 
∑th
;

587 *
∑th
 != '/' && *path != 0)

588 
∑th
++;

589 
Àn
 = 
∑th
 - 
s
;

590 if(
Àn
 >
DIRSIZ
)

591 
	`memmove
(
«me
, 
s
, 
DIRSIZ
);

593 
	`memmove
(
«me
, 
s
, 
Àn
);

594 
«me
[
Àn
] = 0;

596 *
∑th
 == '/')

597 
∑th
++;

598  
∑th
;

599 
	}
}

604 
öode
*

605 
	$«mex
(*
∑th
, 
«meù¨ít
, *
«me
)

607 
öode
 *
ù
, *
√xt
;

609 if(*
∑th
 == '/')

610 
ù
 = 
	`igë
(
ROOTDEV
, 
ROOTINO
);

612 
ù
 = 
	`idup
(
¥oc
->
cwd
);

614 (
∑th
 = 
	`skùñem
’©h, 
«me
)) != 0){

615 
	`ûock
(
ù
);

616 if(
ù
->
ty≥
 !
T_DIR
){

617 
	`iu∆ockput
(
ù
);

620 if(
«meù¨ít
 && *
∑th
 == '\0'){

622 
	`iu∆ock
(
ù
);

623  
ù
;

625 if((
√xt
 = 
	`dúlookup
(
ù
, 
«me
, 0)) == 0){

626 
	`iu∆ockput
(
ù
);

629 
	`iu∆ockput
(
ù
);

630 
ù
 = 
√xt
;

632 if(
«meù¨ít
){

633 
	`ùut
(
ù
);

636  
ù
;

637 
	}
}

639 
öode
*

640 
	$«mei
(*
∑th
)

642 
«me
[
DIRSIZ
];

643  
	`«mex
(
∑th
, 0, 
«me
);

644 
	}
}

646 
öode
*

647 
	$«meù¨ít
(*
∑th
, *
«me
)

649  
	`«mex
(
∑th
, 1, 
«me
);

650 
	}
}

	@fs.h

11 
	#ROOTINO
 1

12 
	#BSIZE
 512

13 

	)

15 
	ssu≥rblock
 {

16 
uöt
 
	msize
;

17 
uöt
 
	mnblocks
;

18 
uöt
 
	mnöodes
;

19 
uöt
 
	m∆og
;

22 
	#NDIRECT
 12

	)

23 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

24 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

27 
	sdöode
 {

28 
	mty≥
;

29 
	mmaj‹
;

30 
	mmö‹
;

31 
	m∆ök
;

32 
uöt
 
	msize
;

33 
uöt
 
	maddrs
[
NDIRECT
+1];

37 
	#IPB
 (
BSIZE
 / (
döode
))

	)

40 
	#IBLOCK
(
i
Ë((iË/ 
IPB
 + 2)

	)

43 
	#BPB
 (
BSIZE
*8)

	)

46 
	#BBLOCK
(
b
, 
nöodes
Ë(b/
BPB
 + (nöodes)/
IPB
 + 3)

	)

49 
	#DIRSIZ
 14

	)

51 
	sdúít
 {

52 
ush‹t
 
	möum
;

53 
	m«me
[
DIRSIZ
];

	@grep.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
(*, *);

11 
	$gªp
(*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
(
fd
, 
buf
+
m
, (buf)-m)) > 0){

18 
m
 +
n
;

19 
p
 = 
buf
;

20 (
q
 = 
	`°rchr
(
p
, '\n')) != 0){

21 *
q
 = 0;

22 if(
	`m©ch
(
∑âîn
, 
p
)){

23 *
q
 = '\n';

24 
	`wrôe
(1, 
p
, 
q
+1 -Ö);

26 
p
 = 
q
+1;

28 if(
p
 =
buf
)

29 
m
 = 0;

30 if(
m
 > 0){

31 
m
 -
p
 - 
buf
;

32 
	`memmove
(
buf
, 
p
, 
m
);

35 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
fd
, 
i
;

41 *
∑âîn
;

43 if(
¨gc
 <= 1){

44 
	`¥ötf
(2, "usage: grepÖattern [file ...]\n");

45 
	`exô
();

47 
∑âîn
 = 
¨gv
[1];

49 if(
¨gc
 <= 2){

50 
	`gªp
(
∑âîn
, 0);

51 
	`exô
();

54 
i
 = 2; i < 
¨gc
; i++){

55 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

56 
	`¥ötf
(1, "gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

57 
	`exô
();

59 
	`gªp
(
∑âîn
, 
fd
);

60 
	`˛o£
(
fd
);

62 
	`exô
();

63 
	}
}

68 
m©chhîe
(*, *);

69 
m©ch°¨
(, *, *);

72 
	$m©ch
(*
ª
, *
ãxt
)

74 if(
ª
[0] == '^')

75  
	`m©chhîe
(
ª
+1, 
ãxt
);

77 if(
	`m©chhîe
(
ª
, 
ãxt
))

79 }*
ãxt
++ != '\0');

81 
	}
}

84 
	$m©chhîe
(*
ª
, *
ãxt
)

86 if(
ª
[0] == '\0')

88 if(
ª
[1] == '*')

89  
	`m©ch°¨
(
ª
[0],Ñe+2, 
ãxt
);

90 if(
ª
[0] == '$' &&Ñe[1] == '\0')

91  *
ãxt
 == '\0';

92 if(*
ãxt
!='\0' && (
ª
[0]=='.' ||Ñe[0]==*text))

93  
	`m©chhîe
(
ª
+1, 
ãxt
+1);

95 
	}
}

98 
	$m©ch°¨
(
c
, *
ª
, *
ãxt
)

101 if(
	`m©chhîe
(
ª
, 
ãxt
))

103 }*
ãxt
!='\0' && (*ãxt++==
c
 || c=='.'));

105 
	}
}

	@ide.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
	#IDE_BSY
 0x80

	)

15 
	#IDE_DRDY
 0x40

	)

16 
	#IDE_DF
 0x20

	)

17 
	#IDE_ERR
 0x01

	)

19 
	#IDE_CMD_READ
 0x20

	)

20 
	#IDE_CMD_WRITE
 0x30

	)

26 
•ölock
 
	gidñock
;

27 
buf
 *
	gidequeue
;

29 
	ghavedisk1
;

30 
ide°¨t
(
buf
*);

34 
	$idewaô
(
checkîr
)

36 
r
;

38 ((
r
 = 
	`öb
(0x1f7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

40 if(
checkîr
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

43 
	}
}

46 
	$ideöô
()

48 
i
;

50 
	`öôlock
(&
idñock
, "ide");

51 
	`pi˚«bÀ
(
IRQ_IDE
);

52 
	`iﬂpi˚«bÀ
(
IRQ_IDE
, 
n˝u
 - 1);

53 
	`idewaô
(0);

56 
	`outb
(0x1f6, 0xe0 | (1<<4));

57 
i
=0; i<1000; i++){

58 if(
	`öb
(0x1f7) != 0){

59 
havedisk1
 = 1;

65 
	`outb
(0x1f6, 0xe0 | (0<<4));

66 
	}
}

70 
	$ide°¨t
(
buf
 *
b
)

72 if(
b
 == 0)

73 
	`∑nic
("idestart");

75 
	`idewaô
(0);

76 
	`outb
(0x3f6, 0);

77 
	`outb
(0x1f2, 1);

78 
	`outb
(0x1f3, 
b
->
£˘‹
 & 0xff);

79 
	`outb
(0x1f4, (
b
->
£˘‹
 >> 8) & 0xff);

80 
	`outb
(0x1f5, (
b
->
£˘‹
 >> 16) & 0xff);

81 
	`outb
(0x1f6, 0xe0 | ((
b
->
dev
&1)<<4Ë| ((b->
£˘‹
>>24)&0x0f));

82 if(
b
->
Êags
 & 
B_DIRTY
){

83 
	`outb
(0x1f7, 
IDE_CMD_WRITE
);

84 
	`out¶
(0x1f0, 
b
->
d©a
, 512/4);

86 
	`outb
(0x1f7, 
IDE_CMD_READ
);

88 
	}
}

92 
	$ideöå
()

94 
buf
 *
b
;

97 
	`acquúe
(&
idñock
);

98 if((
b
 = 
idequeue
) == 0){

99 
	`ªÀa£
(&
idñock
);

103 
idequeue
 = 
b
->
q√xt
;

106 if(!(
b
->
Êags
 & 
B_DIRTY
Ë&& 
	`idewaô
(1) >= 0)

107 
	`ö¶
(0x1f0, 
b
->
d©a
, 512/4);

110 
b
->
Êags
 |
B_VALID
;

111 
b
->
Êags
 &~
B_DIRTY
;

112 
	`wakeup
(
b
);

115 if(
idequeue
 != 0)

116 
	`ide°¨t
(
idequeue
);

118 
	`ªÀa£
(&
idñock
);

119 
	}
}

126 
	$idîw
(
buf
 *
b
)

128 
buf
 **
µ
;

130 if(!(
b
->
Êags
 & 
B_BUSY
))

131 
	`∑nic
("iderw: bufÇot busy");

132 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

133 
	`∑nic
("iderw:ÇothingÅo do");

134 if(
b
->
dev
 !0 && !
havedisk1
)

135 
	`∑nic
("iderw: ide disk 1ÇotÖresent");

137 
	`acquúe
(&
idñock
);

140 
b
->
q√xt
 = 0;

141 
µ
=&
idequeue
; *µ;Öp=&(*µ)->
q√xt
)

143 *
µ
 = 
b
;

146 if(
idequeue
 =
b
)

147 
	`ide°¨t
(
b
);

150 (
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) != B_VALID){

151 
	`¶ìp
(
b
, &
idñock
);

154 
	`ªÀa£
(&
idñock
);

155 
	}
}

	@init.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

6 
	~"f˙é.h
"

8 *
	g¨gv
[] = { "sh", 0 };

11 
	$maö
()

13 
pid
, 
wpid
;

15 if(
	`›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 
	`mknod
("console", 1, 1);

17 
	`›í
("c⁄sﬁe", 
O_RDWR
);

19 
	`dup
(0);

20 
	`dup
(0);

23 
	`¥ötf
(1, "init: starting sh\n");

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0){

26 
	`¥ötf
(1, "init: fork failed\n");

27 
	`exô
();

29 if(
pid
 == 0){

30 
	`exec
("sh", 
¨gv
);

31 
	`¥ötf
(1, "init:Éxec sh failed\n");

32 
	`exô
();

34 (
wpid
=
	`waô
()Ë>0 && wpid !
pid
)

35 
	`¥ötf
(1, "zombie!\n");

37 
	}
}

	@ioapic.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

9 
	#IOAPIC
 0xFEC00000

10 

	)

11 
	#REG_ID
 0x00

12 
	#REG_VER
 0x01

13 
	#REG_TABLE
 0x10

14 

	)

20 
	#INT_DISABLED
 0x00010000

21 
	#INT_LEVEL
 0x00008000

22 
	#INT_ACTIVELOW
 0x00002000

23 
	#INT_LOGICAL
 0x00000800

24 

	)

25 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 
	siﬂpic
 {

29 
uöt
 
	mªg
;

30 
uöt
 
	m∑d
[3];

31 
uöt
 
	md©a
;

34 
uöt


35 
	$iﬂpi¸ód
(
ªg
)

37 
iﬂpic
->
ªg
 =Ñeg;

38  
iﬂpic
->
d©a
;

39 
	}
}

42 
	$iﬂpicwrôe
(
ªg
, 
uöt
 
d©a
)

44 
iﬂpic
->
ªg
 =Ñeg;

45 
iﬂpic
->
d©a
 = data;

46 
	}
}

49 
	$iﬂpicöô
()

51 
i
, 
id
, 
maxöå
;

53 if(!
ismp
)

56 
iﬂpic
 = (vﬁ©ûêiﬂpic*)
IOAPIC
;

57 
maxöå
 = (
	`iﬂpi¸ód
(
REG_VER
) >> 16) & 0xFF;

58 
id
 = 
	`iﬂpi¸ód
(
REG_ID
) >> 24;

59 if(
id
 !
iﬂpicid
)

60 
	`˝rötf
("ioapicinit: id isn'tÉqualÅo ioapicid;Çotá MP\n");

64 
i
 = 0; i <
maxöå
; i++){

65 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
, 
INT_DISABLED
 | (
T_IRQ0
 + i));

66 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
+1, 0);

68 
	}
}

71 
	$iﬂpi˚«bÀ
(
úq
, 
˝unum
)

73 if(!
ismp
)

79 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
, 
T_IRQ0
 + irq);

80 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
+1, 
˝unum
 << 24);

81 
	}
}

	@kalloc.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mmu.h
"

10 
	~"•ölock.h
"

12 
‰ìønge
(*
v°¨t
, *
víd
);

13 
íd
[];

15 
	srun
 {

16 
run
 *
	m√xt
;

20 
•ölock
 
	mlock
;

21 
	mu£_lock
;

22 
run
 *
	m‰ìli°
;

23 } 
	gkmem
;

31 
	$köô1
(*
v°¨t
, *
víd
)

33 
	`öôlock
(&
kmem
.
lock
, "kmem");

34 
kmem
.
u£_lock
 = 0;

35 
	`‰ìønge
(
v°¨t
, 
víd
);

36 
	}
}

39 
	$köô2
(*
v°¨t
, *
víd
)

41 
	`‰ìønge
(
v°¨t
, 
víd
);

42 
kmem
.
u£_lock
 = 1;

43 
	}
}

46 
	$‰ìønge
(*
v°¨t
, *
víd
)

48 *
p
;

49 
p
 = (*)
	`PGROUNDUP
((
uöt
)
v°¨t
);

50 ; 
p
 + 
PGSIZE
 <(*)
víd
;Ö += PGSIZE)

51 
	`k‰ì
(
p
);

52 
	}
}

60 
	$k‰ì
(*
v
)

62 
run
 *
r
;

63 i‡(
	`HAMA_IS_MIRROR
((
uöt
)
v
)) ;

64 if((
uöt
)
v
 % 
PGSIZE
 || v < 
íd
 || 
	`v2p
(vË>
PHYSTOP
)

65 
	`∑nic
("kfree");

68 
	`mem£t
(
v
, 1, 
PGSIZE
);

70 if(
kmem
.
u£_lock
)

71 
	`acquúe
(&
kmem
.
lock
);

72 
r
 = (
run
*)
v
;

73 
r
->
√xt
 = 
kmem
.
‰ìli°
;

74 
kmem
.
‰ìli°
 = 
r
;

75 if(
kmem
.
u£_lock
)

76 
	`ªÀa£
(&
kmem
.
lock
);

77 
	}
}

83 
	$kÆloc
()

85 
run
 *
r
;

87 if(
kmem
.
u£_lock
)

88 
	`acquúe
(&
kmem
.
lock
);

89 
r
 = 
kmem
.
‰ìli°
;

90 if(
r
)

91 
kmem
.
‰ìli°
 = 
r
->
√xt
;

92 if(
kmem
.
u£_lock
)

93 
	`ªÀa£
(&
kmem
.
lock
);

94  (*)
r
;

95 
	}
}

	@kbd.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"kbd.h
"

7 
	$kbdgëc
()

9 
uöt
 
shi·
;

10 
uch¨
 *
ch¨code
[4] = {

11 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 
uöt
 
°
, 
d©a
, 
c
;

15 
°
 = 
	`öb
(
KBSTATP
);

16 if((
°
 & 
KBS_DIB
) == 0)

18 
d©a
 = 
	`öb
(
KBDATAP
);

20 if(
d©a
 == 0xE0){

21 
shi·
 |
E0ESC
;

23 } if(
d©a
 & 0x80){

25 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

26 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

28 } if(
shi·
 & 
E0ESC
){

30 
d©a
 |= 0x80;

31 
shi·
 &~
E0ESC
;

34 
shi·
 |
shi·code
[
d©a
];

35 
shi·
 ^
toggÀcode
[
d©a
];

36 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

37 if(
shi·
 & 
CAPSLOCK
){

38 if('a' <
c
 && c <= 'z')

39 
c
 += 'A' - 'a';

40 if('A' <
c
 && c <= 'Z')

41 
c
 += 'a' - 'A';

43  
c
;

44 
	}
}

47 
	$kbdöå
()

49 
	`c⁄sﬁeöå
(
kbdgëc
);

50 
	}
}

	@kbd.h

3 
	#KBSTATP
 0x64

4 
	#KBS_DIB
 0x01

5 
	#KBDATAP
 0x60

6 

	)

7 
	#NO
 0

	)

9 
	#SHIFT
 (1<<0)

	)

10 
	#CTL
 (1<<1)

	)

11 
	#ALT
 (1<<2)

	)

13 
	#CAPSLOCK
 (1<<3)

	)

14 
	#NUMLOCK
 (1<<4)

	)

15 
	#SCROLLLOCK
 (1<<5)

	)

17 
	#E0ESC
 (1<<6)

	)

20 
	#KEY_HOME
 0xE0

	)

21 
	#KEY_END
 0xE1

	)

22 
	#KEY_UP
 0xE2

	)

23 
	#KEY_DN
 0xE3

	)

24 
	#KEY_LF
 0xE4

	)

25 
	#KEY_RT
 0xE5

	)

26 
	#KEY_PGUP
 0xE6

	)

27 
	#KEY_PGDN
 0xE7

	)

28 
	#KEY_INS
 0xE8

	)

29 
	#KEY_DEL
 0xE9

	)

32 
	#C
(
x
Ë(x - '@')

	)

34 
uch¨
 
	gshi·code
[256] =

36 [0x1D] 
CTL
,

37 [0x2A] 
SHIFT
,

38 [0x36] 
SHIFT
,

39 [0x38] 
ALT
,

40 [0x9D] 
CTL
,

41 [0xB8] 
ALT


44 
uch¨
 
	gtoggÀcode
[256] =

46 [0x3A] 
CAPSLOCK
,

47 [0x45] 
NUMLOCK
,

48 [0x46] 
SCROLLLOCK


51 
uch¨
 
	gn‹mÆm≠
[256] =

53 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

56 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

58 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

59 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

60 
NO
, ' ', NO, NO, NO, NO, NO, NO,

61 
NO
, NO, NO, NO, NO, NO, NO, '7',

63 '2', '3', '0', '.', 
NO
, NO, NO, NO,

66 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

67 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

68 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

69 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

70 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


73 
uch¨
 
	gshi·m≠
[256] =

75 
NO
, 033, '!', '@', '#', '$', '%', '^',

78 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

80 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

81 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

82 
NO
, ' ', NO, NO, NO, NO, NO, NO,

83 
NO
, NO, NO, NO, NO, NO, NO, '7',

85 '2', '3', '0', '.', 
NO
, NO, NO, NO,

88 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

89 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

90 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

91 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

92 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


95 
uch¨
 
	g˘lm≠
[256] =

97 
NO
, NO, NO, NO, NO, NO, NO, NO,

98 
NO
, NO, NO, NO, NO, NO, NO, NO,

99 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

100 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

101 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

102 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

103 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

105 [0xB5] 
C
('/'),

106 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

107 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

108 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

109 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

110 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


	@kill.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
;

10 if(
¨gc
 < 1){

11 
	`¥ötf
(2, "usage: killÖid...\n");

12 
	`exô
();

14 
i
=1; i<
¨gc
; i++)

15 
	`kûl
(
	`©oi
(
¨gv
[
i
]));

16 
	`exô
();

17 
	}
}

	@lapic.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"memœyout.h
"

7 
	~"å≠s.h
"

8 
	~"mmu.h
"

9 
	~"x86.h
"

12 
	#ID
 (0x0020/4)

13 
	#VER
 (0x0030/4)

14 
	#TPR
 (0x0080/4)

15 
	#EOI
 (0x00B0/4)

16 
	#SVR
 (0x00F0/4)

17 
	#ENABLE
 0x00000100

18 
	#ESR
 (0x0280/4)

19 
	#ICRLO
 (0x0300/4)

20 
	#INIT
 0x00000500

21 
	#STARTUP
 0x00000600

22 
	#DELIVS
 0x00001000

23 
	#ASSERT
 0x00004000

24 
	#DEASSERT
 0x00000000

	)

25 
	#LEVEL
 0x00008000

26 
	#BCAST
 0x00080000

27 
	#BUSY
 0x00001000

	)

28 
	#FIXED
 0x00000000

	)

29 
	#ICRHI
 (0x0310/4)

30 
	#TIMER
 (0x0320/4)

31 
	#X1
 0x0000000B

32 
	#PERIODIC
 0x00020000

33 
	#PCINT
 (0x0340/4)

34 
	#LINT0
 (0x0350/4)

35 
	#LINT1
 (0x0360/4)

36 
	#ERROR
 (0x0370/4)

37 
	#MASKED
 0x00010000

38 
	#TICR
 (0x0380/4)

39 
	#TCCR
 (0x0390/4)

40 
	#TDCR
 (0x03E0/4)

41 

	)

42 vﬁ©ûê
uöt
 *
	gœpic
;

45 
	$œpicw
(
ödex
, 
vÆue
)

47 
œpic
[
ödex
] = 
vÆue
;

48 
œpic
[
ID
];

49 
	}
}

53 
	$œpicöô
(
c
)

55 if(!
œpic
)

59 
	`œpicw
(
SVR
, 
ENABLE
 | (
T_IRQ0
 + 
IRQ_SPURIOUS
));

65 
	`œpicw
(
TDCR
, 
X1
);

66 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
T_IRQ0
 + 
IRQ_TIMER
));

67 
	`œpicw
(
TICR
, 10000000);

70 
	`œpicw
(
LINT0
, 
MASKED
);

71 
	`œpicw
(
LINT1
, 
MASKED
);

75 if(((
œpic
[
VER
]>>16) & 0xFF) >= 4)

76 
	`œpicw
(
PCINT
, 
MASKED
);

79 
	`œpicw
(
ERROR
, 
T_IRQ0
 + 
IRQ_ERROR
);

82 
	`œpicw
(
ESR
, 0);

83 
	`œpicw
(
ESR
, 0);

86 
	`œpicw
(
EOI
, 0);

89 
	`œpicw
(
ICRHI
, 0);

90 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

91 
œpic
[
ICRLO
] & 
DELIVS
)

95 
	`œpicw
(
TPR
, 0);

96 
	}
}

99 
	$˝unum
()

106 if(
	`ªadeÊags
()&
FL_IF
){

107 
n
;

108 if(
n
++ == 0)

109 
	`˝rötf
("cpu called from %x with interruptsÉnabled\n",

110 
	`__buûtö_ªtu∫_addªss
(0));

113 if(
œpic
)

114  
œpic
[
ID
]>>24;

116 
	}
}

120 
	$œpi˚oi
()

122 if(
œpic
)

123 
	`œpicw
(
EOI
, 0);

124 
	}
}

129 
	$mi¸odñay
(
us
)

131 
	}
}

133 
	#IO_RTC
 0x70

	)

138 
	$œpic°¨èp
(
uch¨
 
≠icid
, 
uöt
 
addr
)

140 
i
;

141 
ush‹t
 *
wrv
;

146 
	`outb
(
IO_RTC
, 0xF);

147 
	`outb
(
IO_RTC
+1, 0x0A);

148 
wrv
 = (
ush‹t
*)
	`P2V
((0x40<<4 | 0x67));

149 
wrv
[0] = 0;

150 
wrv
[1] = 
addr
 >> 4;

154 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

155 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

156 
	`mi¸odñay
(200);

157 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

158 
	`mi¸odñay
(100);

165 
i
 = 0; i < 2; i++){

166 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

167 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
>>12));

168 
	`mi¸odñay
(200);

170 
	}
}

	@ln.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 if(
¨gc
 != 3){

9 
	`¥ötf
(2, "Usage:Ün oldÇew\n");

10 
	`exô
();

12 if(
	`lök
(
¨gv
[1],árgv[2]) < 0)

13 
	`¥ötf
(2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

14 
	`exô
();

15 
	}
}

	@log.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"•ölock.h
"

5 
	~"fs.h
"

6 
	~"buf.h
"

36 
	sloghódî
 {

37 
	mn
;

38 
	m£˘‹
[
LOGSIZE
];

41 
	slog
 {

42 
•ölock
 
	mlock
;

43 
	m°¨t
;

44 
	msize
;

45 
	mbusy
;

46 
	mdev
;

47 
loghódî
 
	mlh
;

49 
log
 
	glog
;

51 
ªcovî_‰om_log
();

54 
	$öôlog
()

56 i‡((
loghódî
Ë>
BSIZE
)

57 
	`∑nic
("initlog:Åoo bigÜogheader");

59 
su≥rblock
 
sb
;

60 
	`öôlock
(&
log
.
lock
, "log");

61 
	`ªadsb
(
ROOTDEV
, &
sb
);

62 
log
.
°¨t
 = 
sb
.
size
 - sb.
∆og
;

63 
log
.
size
 = 
sb
.
∆og
;

64 
log
.
dev
 = 
ROOTDEV
;

65 
	`ªcovî_‰om_log
();

66 
	}
}

70 
	$ö°Æl_å™s
()

72 
èû
;

74 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++) {

75 
buf
 *
lbuf
 = 
	`bªad
(
log
.
dev
,Üog.
°¨t
+
èû
+1);

76 
buf
 *
dbuf
 = 
	`bªad
(
log
.
dev
,Üog.
lh
.
£˘‹
[
èû
]);

77 
	`memmove
(
dbuf
->
d©a
, 
lbuf
->d©a, 
BSIZE
);

78 
	`bwrôe
(
dbuf
);

79 
	`bªl£
(
lbuf
);

80 
	`bªl£
(
dbuf
);

82 
	}
}

86 
	$ªad_hód
()

88 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

89 
loghódî
 *
lh
 = (loghódî *Ë(
buf
->
d©a
);

90 
i
;

91 
log
.
lh
.
n
 =Üh->n;

92 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

93 
log
.
lh
.
£˘‹
[
i
] =Üh->sector[i];

95 
	`bªl£
(
buf
);

96 
	}
}

102 
	$wrôe_hód
()

104 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

105 
loghódî
 *
hb
 = (loghódî *Ë(
buf
->
d©a
);

106 
i
;

107 
hb
->
n
 = 
log
.
lh
.n;

108 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

109 
hb
->
£˘‹
[
i
] = 
log
.
lh
.sector[i];

111 
	`bwrôe
(
buf
);

112 
	`bªl£
(
buf
);

113 
	}
}

116 
	$ªcovî_‰om_log
()

118 
	`ªad_hód
();

119 
	`ö°Æl_å™s
();

120 
log
.
lh
.
n
 = 0;

121 
	`wrôe_hód
();

122 
	}
}

125 
	$begö_å™s
()

127 
	`acquúe
(&
log
.
lock
);

128 
log
.
busy
) {

129 
	`¶ìp
(&
log
, &log.
lock
);

131 
log
.
busy
 = 1;

132 
	`ªÀa£
(&
log
.
lock
);

133 
	}
}

136 
	$commô_å™s
()

138 i‡(
log
.
lh
.
n
 > 0) {

139 
	`wrôe_hód
();

140 
	`ö°Æl_å™s
();

141 
log
.
lh
.
n
 = 0;

142 
	`wrôe_hód
();

145 
	`acquúe
(&
log
.
lock
);

146 
log
.
busy
 = 0;

147 
	`wakeup
(&
log
);

148 
	`ªÀa£
(&
log
.
lock
);

149 
	}
}

160 
	$log_wrôe
(
buf
 *
b
)

162 
i
;

164 i‡(
log
.
lh
.
n
 >
LOGSIZE
 ||Üog.lh.¿>log.
size
 - 1)

165 
	`∑nic
("too bigáÅransaction");

166 i‡(!
log
.
busy
)

167 
	`∑nic
("write outside ofÅrans");

169 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

170 i‡(
log
.
lh
.
£˘‹
[
i
] =
b
->sector)

173 
log
.
lh
.
£˘‹
[
i
] = 
b
->sector;

174 
buf
 *
lbuf
 = 
	`bªad
(
b
->
dev
, 
log
.
°¨t
+
i
+1);

175 
	`memmove
(
lbuf
->
d©a
, 
b
->d©a, 
BSIZE
);

176 
	`bwrôe
(
lbuf
);

177 
	`bªl£
(
lbuf
);

178 i‡(
i
 =
log
.
lh
.
n
)

179 
log
.
lh
.
n
++;

180 
b
->
Êags
 |
B_DIRTY
;

181 
	}
}

	@ls.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

7 
	$fmäame
(*
∑th
)

9 
buf
[
DIRSIZ
+1];

10 *
p
;

13 
p
=
∑th
+
	`°æí
(path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 if(
	`°æí
(
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
(
buf
, 
p
, 
	`°æí
(p));

21 
	`mem£t
(
buf
+
	`°æí
(
p
), ' ', 
DIRSIZ
-strlen(p));

22  
buf
;

23 
	}
}

26 
	$ls
(*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 if((
fd
 = 
	`›í
(
∑th
, 0)) < 0){

34 
	`¥ötf
(2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

38 if(
	`f°©
(
fd
, &
°
) < 0){

39 
	`¥ötf
(2, "ls: c™nŸ sèà%s\n", 
∑th
);

40 
	`˛o£
(
fd
);

44 
°
.
ty≥
){

45 
T_FILE
:

46 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

49 
T_DIR
:

50 if(
	`°æí
(
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
){

51 
	`¥ötf
(1, "ls:ÖathÅooÜong\n");

54 
	`°r˝y
(
buf
, 
∑th
);

55 
p
 = 
buf
+
	`°æí
(buf);

56 *
p
++ = '/';

57 
	`ªad
(
fd
, &
de
, (de)) == (de)){

58 if(
de
.
öum
 == 0)

60 
	`memmove
(
p
, 
de
.
«me
, 
DIRSIZ
);

61 
p
[
DIRSIZ
] = 0;

62 if(
	`°©
(
buf
, &
°
) < 0){

63 
	`¥ötf
(1, "ls: c™nŸ sèà%s\n", 
buf
);

66 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
buf
), 
°
.
ty≥
, st.
öo
, st.
size
);

70 
	`˛o£
(
fd
);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

78 if(
¨gc
 < 2){

79 
	`ls
(".");

80 
	`exô
();

82 
i
=1; i<
¨gc
; i++)

83 
	`ls
(
¨gv
[
i
]);

84 
	`exô
();

85 
	}
}

	@main.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

9 
°¨tŸhîs
();

10 
	$mpmaö
(Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
pde_t
 *
kpgdú
;

12 
íd
[];

18 
	$maö
()

20 
	`köô1
(
íd
, 
	`P2V
(4*1024*1024));

21 
	`kvmÆloc
();

22 
	`mpöô
();

23 
	`œpicöô
(
	`mpb˝u
());

24 
	`£göô
();

25 
	`˝rötf
("\n˝u%d: sèπög xv6\n\n", 
˝u
->
id
);

26 
	`picöô
();

27 
	`iﬂpicöô
();

28 
	`c⁄sﬁeöô
();

29 
	`u¨töô
();

30 
	`pöô
();

31 
	`tvöô
();

32 
	`böô
();

33 
	`fûeöô
();

34 
	`iöô
();

35 
	`ideöô
();

36 if(!
ismp
)

37 
	`timîöô
();

38 
	`°¨tŸhîs
();

39 
	`köô2
(
	`P2V
(4*1024*1024), P2V(
PHYSTOP
));

40 
	`u£röô
();

42 
	`mpmaö
();

43 
	}
}

47 
	$m≥¡î
()

49 
	`swôchkvm
();

50 
	`£göô
();

51 
	`œpicöô
(
	`˝unum
());

52 
	`mpmaö
();

53 
	}
}

57 
	$mpmaö
()

59 
	`˝rötf
("˝u%d: sèπög\n", 
˝u
->
id
);

60 
	`idtöô
();

61 
	`xchg
(&
˝u
->
°¨ãd
, 1);

62 
	`scheduÀr
();

63 
	}
}

65 
pde_t
 
	gíåypgdú
[];

69 
	$°¨tŸhîs
()

71 
uch¨
 
_bö¨y_íåyŸhî_°¨t
[], 
_bö¨y_íåyŸhî_size
[];

72 
uch¨
 *
code
;

73 
˝u
 *
c
;

74 *
°ack
;

79 
code
 = 
	`p2v
(0x7000);

80 
	`memmove
(
code
, 
_bö¨y_íåyŸhî_°¨t
, (
uöt
)
_bö¨y_íåyŸhî_size
);

82 
c
 = 
˝us
; c < cpus+
n˝u
; c++){

83 if(
c
 =
˝us
+
	`˝unum
())

89 
°ack
 = 
	`kÆloc
();

90 *(**)(
code
-4Ë
°ack
 + 
KSTACKSIZE
;

91 *(**)(
code
-8Ë
m≥¡î
;

92 *(**)(
code
-12Ë(*Ë
	`v2p
(
íåypgdú
);

94 
	`œpic°¨èp
(
c
->
id
, 
	`v2p
(
code
));

97 
c
->
°¨ãd
 == 0)

100 
	}
}

106 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

107 
pde_t
 
íåypgdú
[
NPDENTRIES
] = {

109 [0] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

111 [
KERNBASE
>>
PDXSHIFT
] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

112 
	}
};

	@memide.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"∑øm.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"buf.h
"

14 
uch¨
 
_bö¨y_fs_img_°¨t
[], 
_bö¨y_fs_img_size
[];

16 
	gdisksize
;

17 
uch¨
 *
	gmemdisk
;

20 
	$ideöô
()

22 
memdisk
 = 
_bö¨y_fs_img_°¨t
;

23 
disksize
 = (
uöt
)
_bö¨y_fs_img_size
/512;

24 
	}
}

28 
	$ideöå
()

31 
	}
}

37 
	$idîw
(
buf
 *
b
)

39 
uch¨
 *
p
;

41 if(!(
b
->
Êags
 & 
B_BUSY
))

42 
	`∑nic
("iderw: bufÇot busy");

43 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

44 
	`∑nic
("iderw:ÇothingÅo do");

45 if(
b
->
dev
 != 1)

46 
	`∑nic
("iderw:ÑequestÇot for disk 1");

47 if(
b
->
£˘‹
 >
disksize
)

48 
	`∑nic
("iderw: sector out ofÑange");

50 
p
 = 
memdisk
 + 
b
->
£˘‹
*512;

52 if(
b
->
Êags
 & 
B_DIRTY
){

53 
b
->
Êags
 &~
B_DIRTY
;

54 
	`memmove
(
p
, 
b
->
d©a
, 512);

56 
	`memmove
(
b
->
d©a
, 
p
, 512);

57 
b
->
Êags
 |
B_VALID
;

58 
	}
}

	@memlayout.h

3 
	#EXTMEM
 0x00100000

4 
	#PHYSTOP
 0x006000000

5 
	#DEVSPACE
 0xFE000000

6 

	)

8 
	#KERNBASE
 0x80000000

9 
	#KERNLINK
 (
KERNBASE
+
EXTMEM
)

10 

	)

11 
	#HAMA_MIRROR
 0x08000000

	)

12 
	#HAMA_IS_MIRROR
(
v
Ë((((vË>
HAMA_MIRROR
) \

13 &&((
v
Ë< 
KERNBASE
)) || \

14 (((
v
Ë>
KERNBASE
 + 
HAMA_MIRROR
) \

15 &&((
v
Ë< 
DEVSPACE
)))

	)

17 #i‚de‡
__ASSEMBLER__


19 
ölöe
 
uöt
 
	$v2p
(*
a
Ë{  ((
uöt
Ë◊)Ë- 
KERNBASE
; 
	}
}

20 
ölöe
 *
	$p2v
(
uöt
 
a
Ë{  (*Ë(◊Ë+ 
KERNBASE
); 
	}
}

24 
	#V2P
(
a
Ë(((
uöt
Ë◊)Ë- 
KERNBASE
)

	)

25 
	#P2V
(
a
Ë(((*Ë◊)Ë+ 
KERNBASE
)

	)

27 
	#V2P_WO
(
x
Ë((xË- 
KERNBASE
)

28 
	#P2V_WO
(
x
Ë((xË+ 
KERNBASE
)

	@mkdir.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage: mkdir files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`mkdú
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

8 
	#°©
 
xv6_°©


9 
	~"ty≥s.h
"

	)

10 
	~"fs.h
"

11 
	~"°©.h
"

12 
	~"∑øm.h
"

14 
	gnblocks
 = 985;

15 
	g∆og
 = 
LOGSIZE
;

16 
	gnöodes
 = 200;

17 
	gsize
 = 1024;

19 
	gfsfd
;

20 
su≥rblock
 
	gsb
;

21 
	gzî€s
[512];

22 
uöt
 
	g‰ìblock
;

23 
uöt
 
	gu£dblocks
;

24 
uöt
 
	gbôblocks
;

25 
uöt
 
	g‰ìöode
 = 1;

27 
bÆloc
();

28 
w£˘
(
uöt
, *);

29 
wöode
(
uöt
, 
döode
*);

30 
röode
(
uöt
 
öum
, 
döode
 *
ù
);

31 
r£˘
(
uöt
 
£c
, *
buf
);

32 
uöt
 
üŒoc
(
ush‹t
 
ty≥
);

33 
üµíd
(
uöt
 
öum
, *
p
, 
n
);

36 
ush‹t


37 
	$xsh‹t
(
ush‹t
 
x
)

39 
ush‹t
 
y
;

40 
uch¨
 *
a
 = (uch¨*)&
y
;

41 
a
[0] = 
x
;

42 
a
[1] = 
x
 >> 8;

43  
y
;

44 
	}
}

46 
uöt


47 
	$xöt
(
uöt
 
x
)

49 
uöt
 
y
;

50 
uch¨
 *
a
 = (uch¨*)&
y
;

51 
a
[0] = 
x
;

52 
a
[1] = 
x
 >> 8;

53 
a
[2] = 
x
 >> 16;

54 
a
[3] = 
x
 >> 24;

55  
y
;

56 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
i
, 
cc
, 
fd
;

62 
uöt
 
roŸöo
, 
öum
, 
off
;

63 
dúít
 
de
;

64 
buf
[512];

65 
döode
 
dö
;

67 if(
¨gc
 < 2){

68 
	`Ârötf
(
°dîr
, "Usage: mkfs fs.img files...\n");

69 
	`exô
(1);

72 
	`as£π
((512 % (
döode
)) == 0);

73 
	`as£π
((512 % (
dúít
)) == 0);

75 
fsfd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0666);

76 if(
fsfd
 < 0){

77 
	`≥º‹
(
¨gv
[1]);

78 
	`exô
(1);

81 
sb
.
size
 = 
	`xöt
(size);

82 
sb
.
nblocks
 = 
	`xöt
(nblocks);

83 
sb
.
nöodes
 = 
	`xöt
(ninodes);

84 
sb
.
∆og
 = 
	`xöt
(nlog);

86 
bôblocks
 = 
size
/(512*8) + 1;

87 
u£dblocks
 = 
nöodes
 / 
IPB
 + 3 + 
bôblocks
;

88 
‰ìblock
 = 
u£dblocks
;

90 
	`¥ötf
("u£d %d (bô %dÇöodê%zuË‰ì %uÜog %uÅŸÆ %d\n", 
u£dblocks
,

91 
bôblocks
, 
nöodes
/
IPB
 + 1, 
‰ìblock
, 
∆og
, 
nblocks
+
u£dblocks
+nlog);

93 
	`as£π
(
nblocks
 + 
u£dblocks
 + 
∆og
 =
size
);

95 
i
 = 0; i < 
nblocks
 + 
u£dblocks
 + 
∆og
; i++)

96 
	`w£˘
(
i
, 
zî€s
);

98 
	`mem£t
(
buf
, 0, (buf));

99 
	`memmove
(
buf
, &
sb
, (sb));

100 
	`w£˘
(1, 
buf
);

102 
roŸöo
 = 
	`üŒoc
(
T_DIR
);

103 
	`as£π
(
roŸöo
 =
ROOTINO
);

105 
	`bzîo
(&
de
, (de));

106 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

107 
	`°r˝y
(
de
.
«me
, ".");

108 
	`üµíd
(
roŸöo
, &
de
, (de));

110 
	`bzîo
(&
de
, (de));

111 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

112 
	`°r˝y
(
de
.
«me
, "..");

113 
	`üµíd
(
roŸöo
, &
de
, (de));

115 
i
 = 2; i < 
¨gc
; i++){

116 
	`as£π
(
	`ödex
(
¨gv
[
i
], '/') == 0);

118 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

119 
	`≥º‹
(
¨gv
[
i
]);

120 
	`exô
(1);

127 if(
¨gv
[
i
][0] == '_')

128 ++
¨gv
[
i
];

130 
öum
 = 
	`üŒoc
(
T_FILE
);

132 
	`bzîo
(&
de
, (de));

133 
de
.
öum
 = 
	`xsh‹t
(inum);

134 
	`°∫˝y
(
de
.
«me
, 
¨gv
[
i
], 
DIRSIZ
);

135 
	`üµíd
(
roŸöo
, &
de
, (de));

137 (
cc
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

138 
	`üµíd
(
öum
, 
buf
, 
cc
);

140 
	`˛o£
(
fd
);

144 
	`röode
(
roŸöo
, &
dö
);

145 
off
 = 
	`xöt
(
dö
.
size
);

146 
off
 = ((off/
BSIZE
) + 1) * BSIZE;

147 
dö
.
size
 = 
	`xöt
(
off
);

148 
	`wöode
(
roŸöo
, &
dö
);

150 
	`bÆloc
(
u£dblocks
);

152 
	`exô
(0);

153 
	}
}

156 
	$w£˘
(
uöt
 
£c
, *
buf
)

158 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

159 
	`≥º‹
("lseek");

160 
	`exô
(1);

162 if(
	`wrôe
(
fsfd
, 
buf
, 512) != 512){

163 
	`≥º‹
("write");

164 
	`exô
(1);

166 
	}
}

168 
uöt


169 
	$i2b
(
uöt
 
öum
)

171  (
öum
 / 
IPB
) + 2;

172 
	}
}

175 
	$wöode
(
uöt
 
öum
, 
döode
 *
ù
)

177 
buf
[512];

178 
uöt
 
bn
;

179 
döode
 *
dù
;

181 
bn
 = 
	`i2b
(
öum
);

182 
	`r£˘
(
bn
, 
buf
);

183 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

184 *
dù
 = *
ù
;

185 
	`w£˘
(
bn
, 
buf
);

186 
	}
}

189 
	$röode
(
uöt
 
öum
, 
döode
 *
ù
)

191 
buf
[512];

192 
uöt
 
bn
;

193 
döode
 *
dù
;

195 
bn
 = 
	`i2b
(
öum
);

196 
	`r£˘
(
bn
, 
buf
);

197 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

198 *
ù
 = *
dù
;

199 
	}
}

202 
	$r£˘
(
uöt
 
£c
, *
buf
)

204 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

205 
	`≥º‹
("lseek");

206 
	`exô
(1);

208 if(
	`ªad
(
fsfd
, 
buf
, 512) != 512){

209 
	`≥º‹
("read");

210 
	`exô
(1);

212 
	}
}

214 
uöt


215 
	$üŒoc
(
ush‹t
 
ty≥
)

217 
uöt
 
öum
 = 
‰ìöode
++;

218 
döode
 
dö
;

220 
	`bzîo
(&
dö
, (din));

221 
dö
.
ty≥
 = 
	`xsh‹t
(type);

222 
dö
.
∆ök
 = 
	`xsh‹t
(1);

223 
dö
.
size
 = 
	`xöt
(0);

224 
	`wöode
(
öum
, &
dö
);

225  
öum
;

226 
	}
}

229 
	$bÆloc
(
u£d
)

231 
uch¨
 
buf
[512];

232 
i
;

234 
	`¥ötf
("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

235 
	`as£π
(
u£d
 < 512*8);

236 
	`bzîo
(
buf
, 512);

237 
i
 = 0; i < 
u£d
; i++){

238 
buf
[
i
/8] = buf[i/8] | (0x1 << (i%8));

240 
	`¥ötf
("bÆloc: wrôêbôm≠ blockáà£˘‹ %zu\n", 
nöodes
/
IPB
 + 3);

241 
	`w£˘
(
nöodes
 / 
IPB
 + 3, 
buf
);

242 
	}
}

244 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

247 
	$üµíd
(
uöt
 
öum
, *
xp
, 
n
)

249 *
p
 = (*)
xp
;

250 
uöt
 
fbn
, 
off
, 
n1
;

251 
döode
 
dö
;

252 
buf
[512];

253 
uöt
 
ödúe˘
[
NINDIRECT
];

254 
uöt
 
x
;

256 
	`röode
(
öum
, &
dö
);

258 
off
 = 
	`xöt
(
dö
.
size
);

259 
n
 > 0){

260 
fbn
 = 
off
 / 512;

261 
	`as£π
(
fbn
 < 
MAXFILE
);

262 if(
fbn
 < 
NDIRECT
){

263 if(
	`xöt
(
dö
.
addrs
[
fbn
]) == 0){

264 
dö
.
addrs
[
fbn
] = 
	`xöt
(
‰ìblock
++);

265 
u£dblocks
++;

267 
x
 = 
	`xöt
(
dö
.
addrs
[
fbn
]);

269 if(
	`xöt
(
dö
.
addrs
[
NDIRECT
]) == 0){

271 
dö
.
addrs
[
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

272 
u£dblocks
++;

275 
	`r£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

276 if(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0){

277 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

278 
u£dblocks
++;

279 
	`w£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

281 
x
 = 
	`xöt
(
ödúe˘
[
fbn
-
NDIRECT
]);

283 
n1
 = 
	`mö
(
n
, (
fbn
 + 1Ë* 512 - 
off
);

284 
	`r£˘
(
x
, 
buf
);

285 
	`bc›y
(
p
, 
buf
 + 
off
 - (
fbn
 * 512), 
n1
);

286 
	`w£˘
(
x
, 
buf
);

287 
n
 -
n1
;

288 
off
 +
n1
;

289 
p
 +
n1
;

291 
dö
.
size
 = 
	`xöt
(
off
);

292 
	`wöode
(
öum
, &
dö
);

293 
	}
}

	@mmu.h

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#CR0_PE
 0x00000001

29 
	#CR0_MP
 0x00000002

30 
	#CR0_EM
 0x00000004

31 
	#CR0_TS
 0x00000008

32 
	#CR0_ET
 0x00000010

33 
	#CR0_NE
 0x00000020

34 
	#CR0_WP
 0x00010000

35 
	#CR0_AM
 0x00040000

36 
	#CR0_NW
 0x20000000

37 
	#CR0_CD
 0x40000000

38 
	#CR0_PG
 0x80000000

39 

	)

40 
	#CR4_PSE
 0x00000010

41 

	)

42 
	#SEG_KCODE
 1

43 
	#SEG_KDATA
 2

44 
	#SEG_KCPU
 3

45 
	#SEG_UCODE
 4

46 
	#SEG_UDATA
 5

47 
	#SEG_TSS
 6

48 

	)

50 #i‚de‡
__ASSEMBLER__


52 
	s£gdesc
 {

53 
uöt
 
	mlim_15_0
 : 16;

54 
uöt
 
	mba£_15_0
 : 16;

55 
uöt
 
	mba£_23_16
 : 8;

56 
uöt
 
	mty≥
 : 4;

57 
uöt
 
	ms
 : 1;

58 
uöt
 
	md∂
 : 2;

59 
uöt
 
	mp
 : 1;

60 
uöt
 
	mlim_19_16
 : 4;

61 
uöt
 
	mavl
 : 1;

62 
uöt
 
	mrsv1
 : 1;

63 
uöt
 
	mdb
 : 1;

64 
uöt
 
	mg
 : 1;

65 
uöt
 
	mba£_31_24
 : 8;

69 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

70 { ((
lim
Ë>> 12Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

71 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

72 (
uöt
)(
lim
Ë>> 28, 0, 0, 1, 1, (uöt)(
ba£
Ë>> 24 }

	)

73 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

74 { (
lim
Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

75 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

76 (
uöt
)(
lim
Ë>> 16, 0, 0, 1, 0, (uöt)(
ba£
Ë>> 24 }

	)

79 
	#DPL_USER
 0x3

80 

	)

82 
	#STA_X
 0x8

83 
	#STA_E
 0x4

84 
	#STA_C
 0x4

85 
	#STA_W
 0x2

86 
	#STA_R
 0x2

87 
	#STA_A
 0x1

88 

	)

90 
	#STS_T16A
 0x1

91 
	#STS_LDT
 0x2

92 
	#STS_T16B
 0x3

93 
	#STS_CG16
 0x4

94 
	#STS_TG
 0x5

95 
	#STS_IG16
 0x6

96 
	#STS_TG16
 0x7

97 
	#STS_T32A
 0x9

98 
	#STS_T32B
 0xB

99 
	#STS_CG32
 0xC

100 
	#STS_IG32
 0xE

101 
	#STS_TG32
 0xF

102 

	)

112 
	#PDX
(
va
Ë(((
uöt
)(vaË>> 
PDXSHIFT
Ë& 0x3FF)

	)

115 
	#PTX
(
va
Ë(((
uöt
)(vaË>> 
PTXSHIFT
Ë& 0x3FF)

	)

118 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöt
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

121 
	#NPDENTRIES
 1024

122 
	#NPTENTRIES
 1024

123 
	#PGSIZE
 4096

124 

	)

125 
	#PGSHIFT
 12

126 
	#PTXSHIFT
 12

127 
	#PDXSHIFT
 22

128 

	)

129 
	#PGROUNDUP
(
sz
Ë(((sz)+
PGSIZE
-1Ë& ~(PGSIZE-1))

	)

130 
	#PGROUNDDOWN
(
a
Ë((◊)Ë& ~(
PGSIZE
-1))

	)

133 
	#PTE_P
 0x001

134 
	#PTE_W
 0x002

135 
	#PTE_U
 0x004

136 
	#PTE_PWT
 0x008

137 
	#PTE_PCD
 0x010

138 
	#PTE_A
 0x020

139 
	#PTE_D
 0x040

140 
	#PTE_PS
 0x080

141 
	#PTE_MBZ
 0x180

142 

	)

144 
	#PTE_ADDR
(
±e
Ë((
uöt
)’ãË& ~0xFFF)

	)

146 #i‚de‡
__ASSEMBLER__


147 
uöt
 
	t±e_t
;

150 
	sèsk°©e
 {

151 
uöt
 
	mlök
;

152 
uöt
 
	me•0
;

153 
ush‹t
 
	mss0
;

154 
ush‹t
 
	m∑ddög1
;

155 
uöt
 *
	me•1
;

156 
ush‹t
 
	mss1
;

157 
ush‹t
 
	m∑ddög2
;

158 
uöt
 *
	me•2
;

159 
ush‹t
 
	mss2
;

160 
ush‹t
 
	m∑ddög3
;

161 *
	m¸3
;

162 
uöt
 *
	meù
;

163 
uöt
 
	meÊags
;

164 
uöt
 
	móx
;

165 
uöt
 
	mecx
;

166 
uöt
 
	medx
;

167 
uöt
 
	mebx
;

168 
uöt
 *
	me•
;

169 
uöt
 *
	mebp
;

170 
uöt
 
	mesi
;

171 
uöt
 
	medi
;

172 
ush‹t
 
	mes
;

173 
ush‹t
 
	m∑ddög4
;

174 
ush‹t
 
	mcs
;

175 
ush‹t
 
	m∑ddög5
;

176 
ush‹t
 
	mss
;

177 
ush‹t
 
	m∑ddög6
;

178 
ush‹t
 
	mds
;

179 
ush‹t
 
	m∑ddög7
;

180 
ush‹t
 
	mfs
;

181 
ush‹t
 
	m∑ddög8
;

182 
ush‹t
 
	mgs
;

183 
ush‹t
 
	m∑ddög9
;

184 
ush‹t
 
	mldt
;

185 
ush‹t
 
	m∑ddög10
;

186 
ush‹t
 
	mt
;

187 
ush‹t
 
	miomb
;

192 
	sg©edesc
 {

193 
uöt
 
	moff_15_0
 : 16;

194 
uöt
 
	mcs
 : 16;

195 
uöt
 
	m¨gs
 : 5;

196 
uöt
 
	mrsv1
 : 3;

197 
uöt
 
	mty≥
 : 4;

198 
uöt
 
	ms
 : 1;

199 
uöt
 
	md∂
 : 2;

200 
uöt
 
	mp
 : 1;

201 
uöt
 
	moff_31_16
 : 16;

212 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

214 (
g©e
).
off_15_0
 = (
uöt
)(
off
) & 0xffff; \

215 (
g©e
).
cs
 = (
£l
); \

216 (
g©e
).
¨gs
 = 0; \

217 (
g©e
).
rsv1
 = 0; \

218 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

219 (
g©e
).
s
 = 0; \

220 (
g©e
).
d∂
 = (
d
); \

221 (
g©e
).
p
 = 1; \

222 (
g©e
).
off_31_16
 = (
uöt
)(
off
) >> 16; \

223 }

	)

	@mp.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mp.h
"

10 
	~"x86.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

14 
˝u
 
	g˝us
[
NCPU
];

15 
˝u
 *
	gb˝u
;

16 
	gismp
;

17 
	gn˝u
;

18 
uch¨
 
	giﬂpicid
;

21 
	$mpb˝u
()

23  
b˝u
-
˝us
;

24 
	}
}

26 
uch¨


27 
	$sum
(
uch¨
 *
addr
, 
Àn
)

29 
i
, 
sum
;

31 
sum
 = 0;

32 
i
=0; i<
Àn
; i++)

33 
sum
 +
addr
[
i
];

34  
sum
;

35 
	}
}

38 
mp
*

39 
	$mp£¨ch1
(
uöt
 
a
, 
Àn
)

41 
uch¨
 *
e
, *
p
, *
addr
;

43 
addr
 = 
	`p2v
(
a
);

44 
e
 = 
addr
+
Àn
;

45 
p
 = 
addr
;Ö < 
e
;Ö +(
mp
))

46 if(
	`memcmp
(
p
, "_MP_", 4Ë=0 && 
	`sum
’, (
mp
)) == 0)

47  (
mp
*)
p
;

49 
	}
}

56 
mp
*

57 
	$mp£¨ch
()

59 
uch¨
 *
bda
;

60 
uöt
 
p
;

61 
mp
 *mp;

63 
bda
 = (
uch¨
 *Ë
	`P2V
(0x400);

64 if((
p
 = ((
bda
[0x0F]<<8)| bda[0x0E]) << 4)){

65 if((
mp
 = 
	`mp£¨ch1
(
p
, 1024)))

66  
mp
;

68 
p
 = ((
bda
[0x14]<<8)|bda[0x13])*1024;

69 if((
mp
 = 
	`mp£¨ch1
(
p
-1024, 1024)))

70  
mp
;

72  
	`mp£¨ch1
(0xF0000, 0x10000);

73 
	}
}

80 
mpc⁄f
*

81 
	$mpc⁄fig
(
mp
 **
pmp
)

83 
mpc⁄f
 *
c⁄f
;

84 
mp
 *mp;

86 if((
mp
 = 
	`mp£¨ch
()Ë=0 || mp->
phyßddr
 == 0)

88 
c⁄f
 = (
mpc⁄f
*Ë
	`p2v
((
uöt
Ë
mp
->
phyßddr
);

89 if(
	`memcmp
(
c⁄f
, "PCMP", 4) != 0)

91 if(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4)

93 if(
	`sum
((
uch¨
*)
c⁄f
, c⁄f->
Àngth
) != 0)

95 *
pmp
 = 
mp
;

96  
c⁄f
;

97 
	}
}

100 
	$mpöô
()

102 
uch¨
 *
p
, *
e
;

103 
mp
 *mp;

104 
mpc⁄f
 *
c⁄f
;

105 
mµroc
 *
¥oc
;

106 
mpiﬂpic
 *
iﬂpic
;

108 
b˝u
 = &
˝us
[0];

109 if((
c⁄f
 = 
	`mpc⁄fig
(&
mp
)) == 0)

111 
ismp
 = 1;

112 
œpic
 = (
uöt
*)
c⁄f
->
œpiˇddr
;

113 
p
=(
uch¨
*)(
c⁄f
+1), 
e
=(uch¨*)c⁄f+c⁄f->
Àngth
;Ö<e; ){

114 *
p
){

115 
MPPROC
:

116 
¥oc
 = (
mµroc
*)
p
;

117 if(
n˝u
 !
¥oc
->
≠icid
){

118 
	`˝rötf
("mpöô:Ç˝u=%dápicid=%d\n", 
n˝u
, 
¥oc
->
≠icid
);

119 
ismp
 = 0;

121 if(
¥oc
->
Êags
 & 
MPBOOT
)

122 
b˝u
 = &
˝us
[
n˝u
];

123 
˝us
[
n˝u
].
id
 =Çcpu;

124 
n˝u
++;

125 
p
 +(
mµroc
);

127 
MPIOAPIC
:

128 
iﬂpic
 = (
mpiﬂpic
*)
p
;

129 
iﬂpicid
 = 
iﬂpic
->
≠i˙o
;

130 
p
 +(
mpiﬂpic
);

132 
MPBUS
:

133 
MPIOINTR
:

134 
MPLINTR
:

135 
p
 += 8;

138 
	`˝rötf
("mpöô: unknow¿c⁄figÅy≥ %x\n", *
p
);

139 
ismp
 = 0;

142 if(!
ismp
){

144 
n˝u
 = 1;

145 
œpic
 = 0;

146 
iﬂpicid
 = 0;

150 if(
mp
->
im¸p
){

153 
	`outb
(0x22, 0x70);

154 
	`outb
(0x23, 
	`öb
(0x23) | 1);

156 
	}
}

	@mp.h

3 
	smp
 {

4 
uch¨
 
	msig«tuª
[4];

5 *
	mphyßddr
;

6 
uch¨
 
	mÀngth
;

7 
uch¨
 
	m•e¸ev
;

8 
uch¨
 
	mchecksum
;

9 
uch¨
 
	mty≥
;

10 
uch¨
 
	mim¸p
;

11 
uch¨
 
	mª£rved
[3];

14 
	smpc⁄f
 {

15 
uch¨
 
	msig«tuª
[4];

16 
ush‹t
 
	mÀngth
;

17 
uch¨
 
	mvîsi⁄
;

18 
uch¨
 
	mchecksum
;

19 
uch¨
 
	m¥odu˘
[20];

20 
uöt
 *
	m€mèbÀ
;

21 
ush‹t
 
	m€mÀngth
;

22 
ush‹t
 
	míåy
;

23 
uöt
 *
	mœpiˇddr
;

24 
ush‹t
 
	mxÀngth
;

25 
uch¨
 
	mxchecksum
;

26 
uch¨
 
	mª£rved
;

29 
	smµroc
 {

30 
uch¨
 
	mty≥
;

31 
uch¨
 
	m≠icid
;

32 
uch¨
 
	mvîsi⁄
;

33 
uch¨
 
	mÊags
;

34 
	#MPBOOT
 0x02

35 
uch¨
 
sig«tuª
[4];

36 
uöt
 
„©uª
;

37 
uch¨
 
ª£rved
[8];

	)

40 
	smpiﬂpic
 {

41 
uch¨
 
	mty≥
;

42 
uch¨
 
	m≠i˙o
;

43 
uch¨
 
	mvîsi⁄
;

44 
uch¨
 
	mÊags
;

45 
uöt
 *
	maddr
;

49 
	#MPPROC
 0x00

50 
	#MPBUS
 0x01

51 
	#MPIOAPIC
 0x02

52 
	#MPIOINTR
 0x03

53 
	#MPLINTR
 0x04

54 

	)

	@param.h

1 
	#NPROC
 64

2 
	#KSTACKSIZE
 4096

3 
	#NCPU
 8

4 
	#NOFILE
 16

5 
	#NFILE
 100

6 
	#NBUF
 10

7 
	#NINODE
 50

8 
	#NDEV
 10

9 
	#ROOTDEV
 1

10 
	#MAXARG
 32

11 
	#LOGSIZE
 10

12 

	)

	@picirq.c

3 
	~"ty≥s.h
"

4 
	~"x86.h
"

5 
	~"å≠s.h
"

8 
	#IO_PIC1
 0x20

9 
	#IO_PIC2
 0xA0

10 

	)

11 
	#IRQ_SLAVE
 2

12 

	)

15 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

18 
	$pic£tmask
(
ush‹t
 
mask
)

20 
úqmask
 = 
mask
;

21 
	`outb
(
IO_PIC1
+1, 
mask
);

22 
	`outb
(
IO_PIC2
+1, 
mask
 >> 8);

23 
	}
}

26 
	$pi˚«bÀ
(
úq
)

28 
	`pic£tmask
(
úqmask
 & ~(1<<
úq
));

29 
	}
}

33 
	$picöô
()

36 
	`outb
(
IO_PIC1
+1, 0xFF);

37 
	`outb
(
IO_PIC2
+1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
+1, 
T_IRQ0
);

52 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
+1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
+1, 
T_IRQ0
 + 8);

67 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
+1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 if(
úqmask
 != 0xFFFF)

83 
	`pic£tmask
(
úqmask
);

84 
	}
}

	@pipe.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"fs.h
"

7 
	~"fûe.h
"

8 
	~"•ölock.h
"

10 
	#PIPESIZE
 512

	)

12 
	spùe
 {

13 
•ölock
 
	mlock
;

14 
	md©a
[
PIPESIZE
];

15 
uöt
 
	mƒód
;

16 
uöt
 
	mnwrôe
;

17 
	mªad›í
;

18 
	mwrôe›í
;

22 
	$pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

24 
pùe
 *
p
;

26 
p
 = 0;

27 *
f0
 = *
f1
 = 0;

28 if((*
f0
 = 
	`fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

29 
bad
;

30 if((
p
 = (
pùe
*)
	`kÆloc
()) == 0)

31 
bad
;

32 
p
->
ªad›í
 = 1;

33 
p
->
wrôe›í
 = 1;

34 
p
->
nwrôe
 = 0;

35 
p
->
ƒód
 = 0;

36 
	`öôlock
(&
p
->
lock
, "pipe");

37 (*
f0
)->
ty≥
 = 
FD_PIPE
;

38 (*
f0
)->
ªadabÀ
 = 1;

39 (*
f0
)->
wrôabÀ
 = 0;

40 (*
f0
)->
pùe
 = 
p
;

41 (*
f1
)->
ty≥
 = 
FD_PIPE
;

42 (*
f1
)->
ªadabÀ
 = 0;

43 (*
f1
)->
wrôabÀ
 = 1;

44 (*
f1
)->
pùe
 = 
p
;

48 
bad
:

49 if(
p
)

50 
	`k‰ì
((*)
p
);

51 if(*
f0
)

52 
	`fûe˛o£
(*
f0
);

53 if(*
f1
)

54 
	`fûe˛o£
(*
f1
);

56 
	}
}

59 
	$pùe˛o£
(
pùe
 *
p
, 
wrôabÀ
)

61 
	`acquúe
(&
p
->
lock
);

62 if(
wrôabÀ
){

63 
p
->
wrôe›í
 = 0;

64 
	`wakeup
(&
p
->
ƒód
);

66 
p
->
ªad›í
 = 0;

67 
	`wakeup
(&
p
->
nwrôe
);

69 if(
p
->
ªad›í
 =0 &&Ö->
wrôe›í
 == 0){

70 
	`ªÀa£
(&
p
->
lock
);

71 
	`k‰ì
((*)
p
);

73 
	`ªÀa£
(&
p
->
lock
);

74 
	}
}

78 
	$pùewrôe
(
pùe
 *
p
, *
addr
, 
n
)

80 
i
;

82 
	`acquúe
(&
p
->
lock
);

83 
i
 = 0; i < 
n
; i++){

84 
p
->
nwrôe
 =p->
ƒód
 + 
PIPESIZE
){

85 if(
p
->
ªad›í
 =0 || 
¥oc
->
kûÀd
){

86 
	`ªÀa£
(&
p
->
lock
);

89 
	`wakeup
(&
p
->
ƒód
);

90 
	`¶ìp
(&
p
->
nwrôe
, &p->
lock
);

92 
p
->
d©a
[p->
nwrôe
++ % 
PIPESIZE
] = 
addr
[
i
];

94 
	`wakeup
(&
p
->
ƒód
);

95 
	`ªÀa£
(&
p
->
lock
);

96  
n
;

97 
	}
}

100 
	$pùîód
(
pùe
 *
p
, *
addr
, 
n
)

102 
i
;

104 
	`acquúe
(&
p
->
lock
);

105 
p
->
ƒód
 =p->
nwrôe
 &&Ö->
wrôe›í
){

106 if(
¥oc
->
kûÀd
){

107 
	`ªÀa£
(&
p
->
lock
);

110 
	`¶ìp
(&
p
->
ƒód
, &p->
lock
);

112 
i
 = 0; i < 
n
; i++){

113 if(
p
->
ƒód
 =p->
nwrôe
)

115 
addr
[
i
] = 
p
->
d©a
[p->
ƒód
++ % 
PIPESIZE
];

117 
	`wakeup
(&
p
->
nwrôe
);

118 
	`ªÀa£
(&
p
->
lock
);

119  
i
;

120 
	}
}

	@printf.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$putc
(
fd
, 
c
)

8 
	`wrôe
(
fd
, &
c
, 1);

9 
	}
}

12 
	$¥ötöt
(
fd
, 
xx
, 
ba£
, 
sgn
)

14 
digôs
[] = "0123456789ABCDEF";

15 
buf
[16];

16 
i
, 
√g
;

17 
uöt
 
x
;

19 
√g
 = 0;

20 if(
sgn
 && 
xx
 < 0){

21 
√g
 = 1;

22 
x
 = -
xx
;

24 
x
 = 
xx
;

27 
i
 = 0;

29 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

30 }(
x
 /
ba£
) != 0);

31 if(
√g
)

32 
buf
[
i
++] = '-';

34 --
i
 >= 0)

35 
	`putc
(
fd
, 
buf
[
i
]);

36 
	}
}

40 
	$¥ötf
(
fd
, *
fmt
, ...)

42 *
s
;

43 
c
, 
i
, 
°©e
;

44 
uöt
 *
≠
;

46 
°©e
 = 0;

47 
≠
 = (
uöt
*)(*)&
fmt
 + 1;

48 
i
 = 0; 
fmt
[i]; i++){

49 
c
 = 
fmt
[
i
] & 0xff;

50 if(
°©e
 == 0){

51 if(
c
 == '%'){

52 
°©e
 = '%';

54 
	`putc
(
fd
, 
c
);

56 } if(
°©e
 == '%'){

57 if(
c
 == 'd'){

58 
	`¥ötöt
(
fd
, *
≠
, 10, 1);

59 
≠
++;

60 } if(
c
 == 'x' || c == 'p'){

61 
	`¥ötöt
(
fd
, *
≠
, 16, 0);

62 
≠
++;

63 } if(
c
 == 's'){

64 
s
 = (*)*
≠
;

65 
≠
++;

66 if(
s
 == 0)

67 
s
 = "(null)";

68 *
s
 != 0){

69 
	`putc
(
fd
, *
s
);

70 
s
++;

72 } if(
c
 == 'c'){

73 
	`putc
(
fd
, *
≠
);

74 
≠
++;

75 } if(
c
 == '%'){

76 
	`putc
(
fd
, 
c
);

79 
	`putc
(
fd
, '%');

80 
	`putc
(
fd
, 
c
);

82 
°©e
 = 0;

85 
	}
}

	@proc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"x86.h
"

7 
	~"¥oc.h
"

8 
	~"•ölock.h
"

11 
•ölock
 
	mlock
;

12 
¥oc
 
	m¥oc
[
NPROC
];

13 } 
	g±abÀ
;

15 
¥oc
 *
	göô¥oc
;

17 
	g√xçid
 = 1;

18 
f‹kªt
();

19 
å≠ªt
();

21 
wakeup1
(*
ch™
);

24 
	$pöô
()

26 
	`öôlock
(&
±abÀ
.
lock
, "ptable");

27 
	}
}

34 
¥oc
*

35 
	$Ælo˝roc
()

37 
¥oc
 *
p
;

38 *
•
;

40 
	`acquúe
(&
±abÀ
.
lock
);

41 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

42 if(
p
->
°©e
 =
UNUSED
)

43 
found
;

44 
	`ªÀa£
(&
±abÀ
.
lock
);

47 
found
:

48 
p
->
°©e
 = 
EMBRYO
;

49 
p
->
pid
 = 
√xçid
++;

50 
	`ªÀa£
(&
±abÀ
.
lock
);

53 if((
p
->
k°ack
 = 
	`kÆloc
()) == 0){

54 
p
->
°©e
 = 
UNUSED
;

57 
•
 = 
p
->
k°ack
 + 
KSTACKSIZE
;

60 
•
 - *
p
->
tf
;

61 
p
->
tf
 = (
å≠‰ame
*)
•
;

65 
•
 -= 4;

66 *(
uöt
*)
•
 = (uöt)
å≠ªt
;

68 
•
 - *
p
->
c⁄ãxt
;

69 
p
->
c⁄ãxt
 = (c⁄ãxt*)
•
;

70 
	`mem£t
(
p
->
c⁄ãxt
, 0,  *p->context);

71 
p
->
c⁄ãxt
->
eù
 = (
uöt
)
f‹kªt
;

73  
p
;

74 
	}
}

79 
	$u£röô
()

81 
¥oc
 *
p
;

82 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

84 
p
 = 
	`Ælo˝roc
();

85 
öô¥oc
 = 
p
;

86 if((
p
->
pgdú
 = 
	`£tupkvm
(
kÆloc
)) == 0)

87 
	`∑nic
("userinit: out of memory?");

88 
	`öôuvm
(
p
->
pgdú
, 
_bö¨y_öôcode_°¨t
, ()
_bö¨y_öôcode_size
);

89 
p
->
sz
 = 
PGSIZE
;

90 
	`mem£t
(
p
->
tf
, 0, (*p->tf));

91 
p
->
tf
->
cs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

92 
p
->
tf
->
ds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

93 
p
->
tf
->
es
 =Ö->tf->
ds
;

94 
p
->
tf
->
ss
 =Ö->tf->
ds
;

95 
p
->
tf
->
eÊags
 = 
FL_IF
;

96 
p
->
tf
->
e•
 = 
PGSIZE
;

97 
p
->
tf
->
eù
 = 0;

99 
	`ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

100 
p
->
cwd
 = 
	`«mei
("/");

102 
p
->
°©e
 = 
RUNNABLE
;

103 
	}
}

108 
	$grow¥oc
(
n
)

110 
uöt
 
sz
;

112 
sz
 = 
¥oc
->sz;

113 if(
n
 > 0){

114 if((
sz
 = 
	`Ælocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

116 } if(
n
 < 0){

117 if((
sz
 = 
	`dóŒocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

120 
¥oc
->
sz
 = sz;

121 
	`swôchuvm
(
¥oc
);

123 
	}
}

129 
	$f‹k
()

131 
i
, 
pid
;

132 
¥oc
 *
≈
;

135 if((
≈
 = 
	`Ælo˝roc
()) == 0)

139 if((
≈
->
pgdú
 = 
	`c›yuvm
(
¥oc
->pgdú,Öroc->
sz
)) == 0){

140 
	`k‰ì
(
≈
->
k°ack
);

141 
≈
->
k°ack
 = 0;

142 
≈
->
°©e
 = 
UNUSED
;

145 
≈
->
sz
 = 
¥oc
->sz;

146 
≈
->
∑ª¡
 = 
¥oc
;

147 *
≈
->
tf
 = *
¥oc
->tf;

150 
≈
->
tf
->
óx
 = 0;

152 
i
 = 0; i < 
NOFILE
; i++)

153 if(
¥oc
->
ofûe
[
i
])

154 
≈
->
ofûe
[
i
] = 
	`fûedup
(
¥oc
->ofile[i]);

155 
≈
->
cwd
 = 
	`idup
(
¥oc
->cwd);

157 
pid
 = 
≈
->pid;

158 
≈
->
°©e
 = 
RUNNABLE
;

159 
	`ß„°r˝y
(
≈
->
«me
, 
¥oc
->name, (proc->name));

160  
pid
;

161 
	}
}

167 
	$exô
()

169 
¥oc
 *
p
;

170 
fd
;

172 if(
¥oc
 =
öô¥oc
)

173 
	`∑nic
("initÉxiting");

176 
fd
 = 0; fd < 
NOFILE
; fd++){

177 if(
¥oc
->
ofûe
[
fd
]){

178 
	`fûe˛o£
(
¥oc
->
ofûe
[
fd
]);

179 
¥oc
->
ofûe
[
fd
] = 0;

183 
	`ùut
(
¥oc
->
cwd
);

184 
¥oc
->
cwd
 = 0;

186 
	`acquúe
(&
±abÀ
.
lock
);

189 
	`wakeup1
(
¥oc
->
∑ª¡
);

192 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

193 if(
p
->
∑ª¡
 =
¥oc
){

194 
p
->
∑ª¡
 = 
öô¥oc
;

195 if(
p
->
°©e
 =
ZOMBIE
)

196 
	`wakeup1
(
öô¥oc
);

201 
¥oc
->
°©e
 = 
ZOMBIE
;

202 
	`sched
();

203 
	`∑nic
("zombieÉxit");

204 
	}
}

209 
	$waô
()

211 
¥oc
 *
p
;

212 
havekids
, 
pid
;

214 
	`acquúe
(&
±abÀ
.
lock
);

217 
havekids
 = 0;

218 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

219 if(
p
->
∑ª¡
 !
¥oc
)

221 
havekids
 = 1;

222 if(
p
->
°©e
 =
ZOMBIE
){

224 
pid
 = 
p
->pid;

225 
	`k‰ì
(
p
->
k°ack
);

226 
p
->
k°ack
 = 0;

227 
	`‰ìvm
(
p
->
pgdú
);

228 
p
->
°©e
 = 
UNUSED
;

229 
p
->
pid
 = 0;

230 
p
->
∑ª¡
 = 0;

231 
p
->
«me
[0] = 0;

232 
p
->
kûÀd
 = 0;

233 
	`ªÀa£
(&
±abÀ
.
lock
);

234  
pid
;

239 if(!
havekids
 || 
¥oc
->
kûÀd
){

240 
	`ªÀa£
(&
±abÀ
.
lock
);

245 
	`¶ìp
(
¥oc
, &
±abÀ
.
lock
);

247 
	}
}

258 
	$scheduÀr
()

260 
¥oc
 *
p
;

264 
	`°i
();

267 
	`acquúe
(&
±abÀ
.
lock
);

268 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

269 if(
p
->
°©e
 !
RUNNABLE
)

275 
¥oc
 = 
p
;

276 
	`swôchuvm
(
p
);

277 
p
->
°©e
 = 
RUNNING
;

278 
	`swtch
(&
˝u
->
scheduÀr
, 
¥oc
->
c⁄ãxt
);

279 
	`swôchkvm
();

283 
¥oc
 = 0;

285 
	`ªÀa£
(&
±abÀ
.
lock
);

288 
	}
}

293 
	$sched
()

295 
öã«
;

297 if(!
	`hﬁdög
(&
±abÀ
.
lock
))

298 
	`∑nic
("schedÖtable.lock");

299 if(
˝u
->
n˛i
 != 1)

300 
	`∑nic
("schedÜocks");

301 if(
¥oc
->
°©e
 =
RUNNING
)

302 
	`∑nic
("schedÑunning");

303 if(
	`ªadeÊags
()&
FL_IF
)

304 
	`∑nic
("sched interruptible");

305 
öã«
 = 
˝u
->intena;

306 
	`swtch
(&
¥oc
->
c⁄ãxt
, 
˝u
->
scheduÀr
);

307 
˝u
->
öã«
 = intena;

308 
	}
}

312 
	$yõld
()

314 
	`acquúe
(&
±abÀ
.
lock
);

315 
¥oc
->
°©e
 = 
RUNNABLE
;

316 
	`sched
();

317 
	`ªÀa£
(&
±abÀ
.
lock
);

318 
	}
}

323 
	$f‹kªt
()

325 
fú°
 = 1;

327 
	`ªÀa£
(&
±abÀ
.
lock
);

329 i‡(
fú°
) {

333 
fú°
 = 0;

334 
	`öôlog
();

338 
	}
}

343 
	$¶ìp
(*
ch™
, 
•ölock
 *
lk
)

345 if(
¥oc
 == 0)

346 
	`∑nic
("sleep");

348 if(
lk
 == 0)

349 
	`∑nic
("sleep withoutÜk");

357 if(
lk
 !&
±abÀ
.
lock
){

358 
	`acquúe
(&
±abÀ
.
lock
);

359 
	`ªÀa£
(
lk
);

363 
¥oc
->
ch™
 = chan;

364 
¥oc
->
°©e
 = 
SLEEPING
;

365 
	`sched
();

368 
¥oc
->
ch™
 = 0;

371 if(
lk
 !&
±abÀ
.
lock
){

372 
	`ªÀa£
(&
±abÀ
.
lock
);

373 
	`acquúe
(
lk
);

375 
	}
}

381 
	$wakeup1
(*
ch™
)

383 
¥oc
 *
p
;

385 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

386 if(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan)

387 
p
->
°©e
 = 
RUNNABLE
;

388 
	}
}

392 
	$wakeup
(*
ch™
)

394 
	`acquúe
(&
±abÀ
.
lock
);

395 
	`wakeup1
(
ch™
);

396 
	`ªÀa£
(&
±abÀ
.
lock
);

397 
	}
}

403 
	$kûl
(
pid
)

405 
¥oc
 *
p
;

407 
	`acquúe
(&
±abÀ
.
lock
);

408 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

409 if(
p
->
pid
 ==Öid){

410 
p
->
kûÀd
 = 1;

412 if(
p
->
°©e
 =
SLEEPING
)

413 
p
->
°©e
 = 
RUNNABLE
;

414 
	`ªÀa£
(&
±abÀ
.
lock
);

418 
	`ªÀa£
(&
±abÀ
.
lock
);

420 
	}
}

427 
	$¥ocdump
()

429 *
°©es
[] = {

430 [
UNUSED
] "unused",

431 [
EMBRYO
] "embryo",

432 [
SLEEPING
] "sleep ",

433 [
RUNNABLE
] "runble",

434 [
RUNNING
] "run ",

435 [
ZOMBIE
] "zombie"

437 
i
;

438 
¥oc
 *
p
;

439 *
°©e
;

440 
uöt
 
pc
[10];

442 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

443 if(
p
->
°©e
 =
UNUSED
)

445 if(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
(
°©es
) && states[p->state])

446 
°©e
 = 
°©es
[
p
->state];

448 
°©e
 = "???";

449 
	`˝rötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

450 if(
p
->
°©e
 =
SLEEPING
){

451 
	`gëˇŒîpcs
((
uöt
*)
p
->
c⁄ãxt
->
ebp
+2, 
pc
);

452 
i
=0; i<10 && 
pc
[i] != 0; i++)

453 
	`˝rötf
(" %p", 
pc
[
i
]);

455 
	`˝rötf
("\n");

457 
	}
}

	@proc.h

2 
	#NSEGS
 7

	)

5 
	s˝u
 {

6 
uch¨
 
	mid
;

7 
c⁄ãxt
 *
	mscheduÀr
;

8 
èsk°©e
 
	mts
;

9 
£gdesc
 
	mgdt
[
NSEGS
];

10 vﬁ©ûê
uöt
 
	m°¨ãd
;

11 
	mn˛i
;

12 
	möã«
;

15 
˝u
 *
	m˝u
;

16 
¥oc
 *
	m¥oc
;

19 
˝u
 
˝us
[
NCPU
];

20 
n˝u
;

30 
˝u
 *˝u 
asm
("%gs:0");

31 
¥oc
 *¥o¯
asm
("%gs:4");

44 
	sc⁄ãxt
 {

45 
uöt
 
	medi
;

46 
uöt
 
	mesi
;

47 
uöt
 
	mebx
;

48 
uöt
 
	mebp
;

49 
uöt
 
	meù
;

52 
	e¥oc°©e
 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

55 
	s¥oc
 {

56 
uöt
 
	msz
;

57 
pde_t
* 
	mpgdú
;

58 *
	mk°ack
;

59 
¥oc°©e
 
	m°©e
;

60 vﬁ©ûê
	mpid
;

61 
¥oc
 *
	m∑ª¡
;

62 
å≠‰ame
 *
	mtf
;

63 
c⁄ãxt
 *
	mc⁄ãxt
;

64 *
	mch™
;

65 
	mkûÀd
;

66 
fûe
 *
	mofûe
[
NOFILE
];

67 
öode
 *
	mcwd
;

68 
	m«me
[16];

	@rm.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage:Ñm files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`u∆ök
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@sh.c

3 
	~"ty≥s.h
"

4 
	~"u£r.h
"

5 
	~"f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd
 {

17 
	mty≥
;

20 
	sexeccmd
 {

21 
	mty≥
;

22 *
	m¨gv
[
MAXARGS
];

23 *
	mórgv
[
MAXARGS
];

26 
	sªdúcmd
 {

27 
	mty≥
;

28 
cmd
 *
	mcmd
;

29 *
	mfûe
;

30 *
	mefûe
;

31 
	mmode
;

32 
	mfd
;

35 
	spùecmd
 {

36 
	mty≥
;

37 
cmd
 *
	mÀ·
;

38 
cmd
 *
	mright
;

41 
	sli°cmd
 {

42 
	mty≥
;

43 
cmd
 *
	mÀ·
;

44 
cmd
 *
	mright
;

47 
	sbackcmd
 {

48 
	mty≥
;

49 
cmd
 *
	mcmd
;

52 
f‹k1
();

53 
∑nic
(*);

54 
cmd
 *
∑r£cmd
(*);

58 
	$runcmd
(
cmd
 *cmd)

60 
p
[2];

61 
backcmd
 *
bcmd
;

62 
execcmd
 *
ecmd
;

63 
li°cmd
 *
lcmd
;

64 
pùecmd
 *
pcmd
;

65 
ªdúcmd
 *
rcmd
;

67 if(
cmd
 == 0)

68 
	`exô
();

70 
cmd
->
ty≥
){

72 
	`∑nic
("runcmd");

74 
EXEC
:

75 
ecmd
 = (
execcmd
*)
cmd
;

76 if(
ecmd
->
¨gv
[0] == 0)

77 
	`exô
();

78 
	`exec
(
ecmd
->
¨gv
[0],Écmd->argv);

79 
	`¥ötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

82 
REDIR
:

83 
rcmd
 = (
ªdúcmd
*)
cmd
;

84 
	`˛o£
(
rcmd
->
fd
);

85 if(
	`›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

86 
	`¥ötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

87 
	`exô
();

89 
	`runcmd
(
rcmd
->
cmd
);

92 
LIST
:

93 
lcmd
 = (
li°cmd
*)
cmd
;

94 if(
	`f‹k1
() == 0)

95 
	`runcmd
(
lcmd
->
À·
);

96 
	`waô
();

97 
	`runcmd
(
lcmd
->
right
);

100 
PIPE
:

101 
pcmd
 = (
pùecmd
*)
cmd
;

102 if(
	`pùe
(
p
) < 0)

103 
	`∑nic
("pipe");

104 if(
	`f‹k1
() == 0){

105 
	`˛o£
(1);

106 
	`dup
(
p
[1]);

107 
	`˛o£
(
p
[0]);

108 
	`˛o£
(
p
[1]);

109 
	`runcmd
(
pcmd
->
À·
);

111 if(
	`f‹k1
() == 0){

112 
	`˛o£
(0);

113 
	`dup
(
p
[0]);

114 
	`˛o£
(
p
[0]);

115 
	`˛o£
(
p
[1]);

116 
	`runcmd
(
pcmd
->
right
);

118 
	`˛o£
(
p
[0]);

119 
	`˛o£
(
p
[1]);

120 
	`waô
();

121 
	`waô
();

124 
BACK
:

125 
bcmd
 = (
backcmd
*)
cmd
;

126 if(
	`f‹k1
() == 0)

127 
	`runcmd
(
bcmd
->
cmd
);

130 
	`exô
();

131 
	}
}

134 
	$gëcmd
(*
buf
, 
nbuf
)

136 
	`¥ötf
(2, "$ ");

137 
	`mem£t
(
buf
, 0, 
nbuf
);

138 
	`gës
(
buf
, 
nbuf
);

139 if(
buf
[0] == 0)

142 
	}
}

145 
	$maö
()

147 
buf
[100];

148 
fd
;

151 (
fd
 = 
	`›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

152 if(
fd
 >= 3){

153 
	`˛o£
(
fd
);

159 
	`gëcmd
(
buf
, (buf)) >= 0){

160 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

163 
buf
[
	`°æí
(buf)-1] = 0;

164 if(
	`chdú
(
buf
+3) < 0)

165 
	`¥ötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

168 if(
	`f‹k1
() == 0)

169 
	`runcmd
(
	`∑r£cmd
(
buf
));

170 
	`waô
();

172 
	`exô
();

173 
	}
}

176 
	$∑nic
(*
s
)

178 
	`¥ötf
(2, "%s\n", 
s
);

179 
	`exô
();

180 
	}
}

183 
	$f‹k1
()

185 
pid
;

187 
pid
 = 
	`f‹k
();

188 if(
pid
 == -1)

189 
	`∑nic
("fork");

190  
pid
;

191 
	}
}

196 
cmd
*

197 
	$execcmd
()

199 
execcmd
 *
cmd
;

201 
cmd
 = 
	`mÆloc
((*cmd));

202 
	`mem£t
(
cmd
, 0, (*cmd));

203 
cmd
->
ty≥
 = 
EXEC
;

204  (
cmd
*)cmd;

205 
	}
}

207 
cmd
*

208 
	$ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

210 
ªdúcmd
 *
cmd
;

212 
cmd
 = 
	`mÆloc
((*cmd));

213 
	`mem£t
(
cmd
, 0, (*cmd));

214 
cmd
->
ty≥
 = 
REDIR
;

215 
cmd
->cmd = 
subcmd
;

216 
cmd
->
fûe
 = file;

217 
cmd
->
efûe
 =Éfile;

218 
cmd
->
mode
 = mode;

219 
cmd
->
fd
 = fd;

220  (
cmd
*)cmd;

221 
	}
}

223 
cmd
*

224 
	$pùecmd
(
cmd
 *
À·
, cmd *
right
)

226 
pùecmd
 *
cmd
;

228 
cmd
 = 
	`mÆloc
((*cmd));

229 
	`mem£t
(
cmd
, 0, (*cmd));

230 
cmd
->
ty≥
 = 
PIPE
;

231 
cmd
->
À·
 =Üeft;

232 
cmd
->
right
 =Ñight;

233  (
cmd
*)cmd;

234 
	}
}

236 
cmd
*

237 
	$li°cmd
(
cmd
 *
À·
, cmd *
right
)

239 
li°cmd
 *
cmd
;

241 
cmd
 = 
	`mÆloc
((*cmd));

242 
	`mem£t
(
cmd
, 0, (*cmd));

243 
cmd
->
ty≥
 = 
LIST
;

244 
cmd
->
À·
 =Üeft;

245 
cmd
->
right
 =Ñight;

246  (
cmd
*)cmd;

247 
	}
}

249 
cmd
*

250 
	$backcmd
(
cmd
 *
subcmd
)

252 
backcmd
 *
cmd
;

254 
cmd
 = 
	`mÆloc
((*cmd));

255 
	`mem£t
(
cmd
, 0, (*cmd));

256 
cmd
->
ty≥
 = 
BACK
;

257 
cmd
->cmd = 
subcmd
;

258  (
cmd
*)cmd;

259 
	}
}

263 
	gwhôe•a˚
[] = " \t\r\n\v";

264 
	gsymbﬁs
[] = "<|>&;()";

267 
	$gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

269 *
s
;

270 
ªt
;

272 
s
 = *
ps
;

273 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

274 
s
++;

275 if(
q
)

276 *
q
 = 
s
;

277 
ªt
 = *
s
;

278 *
s
){

287 
s
++;

290 
s
++;

291 if(*
s
 == '>'){

292 
ªt
 = '+';

293 
s
++;

297 
ªt
 = 'a';

298 
s
 < 
es
 && !
	`°rchr
(
whôe•a˚
, *sË&& !°rchr(
symbﬁs
, *s))

299 
s
++;

302 if(
eq
)

303 *
eq
 = 
s
;

305 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

306 
s
++;

307 *
ps
 = 
s
;

308  
ªt
;

309 
	}
}

312 
	$≥ek
(**
ps
, *
es
, *
toks
)

314 *
s
;

316 
s
 = *
ps
;

317 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

318 
s
++;

319 *
ps
 = 
s
;

320  *
s
 && 
	`°rchr
(
toks
, *s);

321 
	}
}

323 
cmd
 *
∑r£löe
(**, *);

324 
cmd
 *
∑r£pùe
(**, *);

325 
cmd
 *
∑r£exec
(**, *);

326 
cmd
 *
nu…îmö©e
(cmd*);

328 
cmd
*

329 
	$∑r£cmd
(*
s
)

331 *
es
;

332 
cmd
 *cmd;

334 
es
 = 
s
 + 
	`°æí
(s);

335 
cmd
 = 
	`∑r£löe
(&
s
, 
es
);

336 
	`≥ek
(&
s
, 
es
, "");

337 if(
s
 !
es
){

338 
	`¥ötf
(2, "À·ovîs: %s\n", 
s
);

339 
	`∑nic
("syntax");

341 
	`nu…îmö©e
(
cmd
);

342  
cmd
;

343 
	}
}

345 
cmd
*

346 
	$∑r£löe
(**
ps
, *
es
)

348 
cmd
 *cmd;

350 
cmd
 = 
	`∑r£pùe
(
ps
, 
es
);

351 
	`≥ek
(
ps
, 
es
, "&")){

352 
	`gëtokí
(
ps
, 
es
, 0, 0);

353 
cmd
 = 
	`backcmd
(cmd);

355 if(
	`≥ek
(
ps
, 
es
, ";")){

356 
	`gëtokí
(
ps
, 
es
, 0, 0);

357 
cmd
 = 
	`li°cmd
(cmd, 
	`∑r£löe
(
ps
, 
es
));

359  
cmd
;

360 
	}
}

362 
cmd
*

363 
	$∑r£pùe
(**
ps
, *
es
)

365 
cmd
 *cmd;

367 
cmd
 = 
	`∑r£exec
(
ps
, 
es
);

368 if(
	`≥ek
(
ps
, 
es
, "|")){

369 
	`gëtokí
(
ps
, 
es
, 0, 0);

370 
cmd
 = 
	`pùecmd
(cmd, 
	`∑r£pùe
(
ps
, 
es
));

372  
cmd
;

373 
	}
}

375 
cmd
*

376 
	$∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

378 
tok
;

379 *
q
, *
eq
;

381 
	`≥ek
(
ps
, 
es
, "<>")){

382 
tok
 = 
	`gëtokí
(
ps
, 
es
, 0, 0);

383 if(
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

384 
	`∑nic
("missing file forÑedirection");

385 
tok
){

387 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

390 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

393 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

397  
cmd
;

398 
	}
}

400 
cmd
*

401 
	$∑r£block
(**
ps
, *
es
)

403 
cmd
 *cmd;

405 if(!
	`≥ek
(
ps
, 
es
, "("))

406 
	`∑nic
("parseblock");

407 
	`gëtokí
(
ps
, 
es
, 0, 0);

408 
cmd
 = 
	`∑r£löe
(
ps
, 
es
);

409 if(!
	`≥ek
(
ps
, 
es
, ")"))

410 
	`∑nic
("syntax - missing )");

411 
	`gëtokí
(
ps
, 
es
, 0, 0);

412 
cmd
 = 
	`∑r£ªdús
(cmd, 
ps
, 
es
);

413  
cmd
;

414 
	}
}

416 
cmd
*

417 
	$∑r£exec
(**
ps
, *
es
)

419 *
q
, *
eq
;

420 
tok
, 
¨gc
;

421 
execcmd
 *
cmd
;

422 
cmd
 *
ªt
;

424 if(
	`≥ek
(
ps
, 
es
, "("))

425  
	`∑r£block
(
ps
, 
es
);

427 
ªt
 = 
	`execcmd
();

428 
cmd
 = (
execcmd
*)
ªt
;

430 
¨gc
 = 0;

431 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

432 !
	`≥ek
(
ps
, 
es
, "|)&;")){

433 if((
tok
=
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

435 if(
tok
 != 'a')

436 
	`∑nic
("syntax");

437 
cmd
->
¨gv
[
¨gc
] = 
q
;

438 
cmd
->
órgv
[
¨gc
] = 
eq
;

439 
¨gc
++;

440 if(
¨gc
 >
MAXARGS
)

441 
	`∑nic
("too manyárgs");

442 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

444 
cmd
->
¨gv
[
¨gc
] = 0;

445 
cmd
->
órgv
[
¨gc
] = 0;

446  
ªt
;

447 
	}
}

450 
cmd
*

451 
	$nu…îmö©e
(
cmd
 *cmd)

453 
i
;

454 
backcmd
 *
bcmd
;

455 
execcmd
 *
ecmd
;

456 
li°cmd
 *
lcmd
;

457 
pùecmd
 *
pcmd
;

458 
ªdúcmd
 *
rcmd
;

460 if(
cmd
 == 0)

463 
cmd
->
ty≥
){

464 
EXEC
:

465 
ecmd
 = (
execcmd
*)
cmd
;

466 
i
=0; 
ecmd
->
¨gv
[i]; i++)

467 *
ecmd
->
órgv
[
i
] = 0;

470 
REDIR
:

471 
rcmd
 = (
ªdúcmd
*)
cmd
;

472 
	`nu…îmö©e
(
rcmd
->
cmd
);

473 *
rcmd
->
efûe
 = 0;

476 
PIPE
:

477 
pcmd
 = (
pùecmd
*)
cmd
;

478 
	`nu…îmö©e
(
pcmd
->
À·
);

479 
	`nu…îmö©e
(
pcmd
->
right
);

482 
LIST
:

483 
lcmd
 = (
li°cmd
*)
cmd
;

484 
	`nu…îmö©e
(
lcmd
->
À·
);

485 
	`nu…îmö©e
(
lcmd
->
right
);

488 
BACK
:

489 
bcmd
 = (
backcmd
*)
cmd
;

490 
	`nu…îmö©e
(
bcmd
->
cmd
);

493  
cmd
;

494 
	}
}

	@spinlock.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"x86.h
"

7 
	~"memœyout.h
"

8 
	~"mmu.h
"

9 
	~"¥oc.h
"

10 
	~"•ölock.h
"

13 
	$öôlock
(
•ölock
 *
lk
, *
«me
)

15 
lk
->
«me
 =Çame;

16 
lk
->
locked
 = 0;

17 
lk
->
˝u
 = 0;

18 
	}
}

25 
	$acquúe
(
•ölock
 *
lk
)

27 
	`push˛i
();

28 if(
	`hﬁdög
(
lk
))

29 
	`∑nic
("acquire");

34 
	`xchg
(&
lk
->
locked
, 1) != 0)

38 
lk
->
˝u
 = cpu;

39 
	`gëˇŒîpcs
(&
lk
,Ük->
pcs
);

40 
	}
}

44 
	$ªÀa£
(
•ölock
 *
lk
)

46 if(!
	`hﬁdög
(
lk
))

47 
	`∑nic
("release");

49 
lk
->
pcs
[0] = 0;

50 
lk
->
˝u
 = 0;

61 
	`xchg
(&
lk
->
locked
, 0);

63 
	`p›˛i
();

64 
	}
}

68 
	$gëˇŒîpcs
(*
v
, 
uöt
 
pcs
[])

70 
uöt
 *
ebp
;

71 
i
;

73 
ebp
 = (
uöt
*)
v
 - 2;

74 
i
 = 0; i < 10; i++){

75 if(
ebp
 =0 ||Éb∞< (
uöt
*)
KERNBASE
 ||Ébp == (uint*)0xffffffff)

77 
pcs
[
i
] = 
ebp
[1];

78 
ebp
 = (
uöt
*)ebp[0];

80 ; 
i
 < 10; i++)

81 
pcs
[
i
] = 0;

82 
	}
}

86 
	$hﬁdög
(
•ölock
 *
lock
)

88  
lock
->
locked
 &&Üock->
˝u
 == cpu;

89 
	}
}

97 
	$push˛i
()

99 
eÊags
;

101 
eÊags
 = 
	`ªadeÊags
();

102 
	`˛i
();

103 if(
˝u
->
n˛i
++ == 0)

104 
˝u
->
öã«
 = 
eÊags
 & 
FL_IF
;

105 
	}
}

108 
	$p›˛i
()

110 if(
	`ªadeÊags
()&
FL_IF
)

111 
	`∑nic
("popcli - interruptible");

112 if(--
˝u
->
n˛i
 < 0)

113 
	`∑nic
("popcli");

114 if(
˝u
->
n˛i
 =0 && cpu->
öã«
)

115 
	`°i
();

116 
	}
}

	@spinlock.h

2 
	s•ölock
 {

3 
uöt
 
	mlocked
;

6 *
	m«me
;

7 
˝u
 *
	m˝u
;

8 
uöt
 
	mpcs
[10];

	@stat.h

1 
	#T_DIR
 1

2 
	#T_FILE
 2

3 
	#T_DEV
 3

4 

	)

5 
	s°©
 {

6 
	mty≥
;

7 
	mdev
;

8 
uöt
 
	möo
;

9 
	m∆ök
;

10 
uöt
 
	msize
;

	@stressfs.c

10 
	~"ty≥s.h
"

11 
	~"°©.h
"

12 
	~"u£r.h
"

13 
	~"fs.h
"

14 
	~"f˙é.h
"

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
fd
, 
i
;

20 
∑th
[] = "stressfs0";

21 
d©a
[512];

23 
	`¥ötf
(1, "stressfs starting\n");

24 
	`mem£t
(
d©a
, 'a', (data));

26 
i
 = 0; i < 4; i++)

27 if(
	`f‹k
() > 0)

30 
	`¥ötf
(1, "wrôê%d\n", 
i
);

32 
∑th
[8] +
i
;

33 
fd
 = 
	`›í
(
∑th
, 
O_CREATE
 | 
O_RDWR
);

34 
i
 = 0; i < 20; i++)

36 
	`wrôe
(
fd
, 
d©a
, (data));

37 
	`˛o£
(
fd
);

39 
	`¥ötf
(1, "read\n");

41 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

42 
i
 = 0; i < 20; i++)

43 
	`ªad
(
fd
, 
d©a
, (data));

44 
	`˛o£
(
fd
);

46 
	`waô
();

48 
	`exô
();

49 
	}
}

	@string.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

5 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

7 i‡(()
d°
%4 =0 && 
n
%4 == 0){

8 
c
 &= 0xFF;

9 
	`°o¶
(
d°
, (
c
<<24)|(c<<16)|(c<<8)|c, 
n
/4);

11 
	`°osb
(
d°
, 
c
, 
n
);

12  
d°
;

13 
	}
}

16 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

18 c⁄° 
uch¨
 *
s1
, *
s2
;

20 
s1
 = 
v1
;

21 
s2
 = 
v2
;

22 
n
-- > 0){

23 if(*
s1
 !*
s2
)

24  *
s1
 - *
s2
;

25 
s1
++, 
s2
++;

29 
	}
}

32 
	$memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

34 c⁄° *
s
;

35 *
d
;

37 
s
 = 
§c
;

38 
d
 = 
d°
;

39 if(
s
 < 
d
 && s + 
n
 > d){

40 
s
 +
n
;

41 
d
 +
n
;

42 
n
-- > 0)

43 *--
d
 = *--
s
;

45 
n
-- > 0)

46 *
d
++ = *
s
++;

48  
d°
;

49 
	}
}

53 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

55  
	`memmove
(
d°
, 
§c
, 
n
);

56 
	}
}

59 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

61 
n
 > 0 && *
p
 && *∞=*
q
)

62 
n
--, 
p
++, 
q
++;

63 if(
n
 == 0)

65  (
uch¨
)*
p
 - (uch¨)*
q
;

66 
	}
}

69 
	$°∫˝y
(*
s
, c⁄° *
t
, 
n
)

71 *
os
;

73 
os
 = 
s
;

74 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

76 
n
-- > 0)

77 *
s
++ = 0;

78  
os
;

79 
	}
}

83 
	$ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

85 *
os
;

87 
os
 = 
s
;

88 if(
n
 <= 0)

89  
os
;

90 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

92 *
s
 = 0;

93  
os
;

94 
	}
}

97 
	$°æí
(c⁄° *
s
)

99 
n
;

101 
n
 = 0; 
s
[n];Ç++)

103  
n
;

104 
	}
}

	@syscall.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"sysˇŒ.h
"

18 
	$„tchöt
(
uöt
 
addr
, *
ù
)

20 if(
addr
 >
¥oc
->
sz
 ||áddr+4 >Öroc->sz)

22 *
ù
 = *(*)(
addr
);

24 
	}
}

30 
	$„tch°r
(
uöt
 
addr
, **
µ
)

32 *
s
, *
ï
;

34 if(
addr
 >
¥oc
->
sz
)

36 *
µ
 = (*)
addr
;

37 
ï
 = (*)
¥oc
->
sz
;

38 
s
 = *
µ
; s < 
ï
; s++)

39 if(*
s
 == 0)

40  
s
 - *
µ
;

42 
	}
}

46 
	$¨göt
(
n
, *
ù
)

48  
	`„tchöt
(
¥oc
->
tf
->
e•
 + 4 + 4*
n
, 
ù
);

49 
	}
}

55 
	$¨g±r
(
n
, **
µ
, 
size
)

57 
i
;

59 if(
	`¨göt
(
n
, &
i
) < 0)

61 if((
uöt
)
i
 >
¥oc
->
sz
 || (uöt)i+
size
 >Öroc->sz)

63 *
µ
 = (*)
i
;

65 
	}
}

72 
	$¨g°r
(
n
, **
µ
)

74 
addr
;

75 if(
	`¨göt
(
n
, &
addr
) < 0)

77  
	`„tch°r
(
addr
, 
µ
);

78 
	}
}

80 
sys_chdú
();

81 
sys_˛o£
();

82 
sys_dup
();

83 
sys_exec
();

84 
sys_exô
();

85 
sys_f‹k
();

86 
sys_f°©
();

87 
sys_gëpid
();

88 
sys_kûl
();

89 
sys_lök
();

90 
sys_mkdú
();

91 
sys_mknod
();

92 
sys_›í
();

93 
sys_pùe
();

94 
sys_ªad
();

95 
sys_sbrk
();

96 
sys_¶ìp
();

97 
sys_u∆ök
();

98 
sys_waô
();

99 
sys_wrôe
();

100 
sys_u±ime
();

102 (*
sysˇŒs
[])() = {

103 [
SYS_f‹k
] 
sys_f‹k
,

104 [
SYS_exô
] 
sys_exô
,

105 [
SYS_waô
] 
sys_waô
,

106 [
SYS_pùe
] 
sys_pùe
,

107 [
SYS_ªad
] 
sys_ªad
,

108 [
SYS_kûl
] 
sys_kûl
,

109 [
SYS_exec
] 
sys_exec
,

110 [
SYS_f°©
] 
sys_f°©
,

111 [
SYS_chdú
] 
sys_chdú
,

112 [
SYS_dup
] 
sys_dup
,

113 [
SYS_gëpid
] 
sys_gëpid
,

114 [
SYS_sbrk
] 
sys_sbrk
,

115 [
SYS_¶ìp
] 
sys_¶ìp
,

116 [
SYS_u±ime
] 
sys_u±ime
,

117 [
SYS_›í
] 
sys_›í
,

118 [
SYS_wrôe
] 
sys_wrôe
,

119 [
SYS_mknod
] 
sys_mknod
,

120 [
SYS_u∆ök
] 
sys_u∆ök
,

121 [
SYS_lök
] 
sys_lök
,

122 [
SYS_mkdú
] 
sys_mkdú
,

123 [
SYS_˛o£
] 
sys_˛o£
,

124 
	}
};

127 
	$sysˇŒ
()

129 
num
;

131 
num
 = 
¥oc
->
tf
->
óx
;

132 if(
num
 >0 &&Çum < 
SYS_›í
 && 
sysˇŒs
[num]) {

133 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

134 } i‡(
num
 >
SYS_›í
 &&Çum < 
	`NELEM
(
sysˇŒs
) && syscalls[num]) {

135 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

137 
	`˝rötf
("%d %s: unknown sys call %d\n",

138 
¥oc
->
pid
,Öroc->
«me
, 
num
);

139 
¥oc
->
tf
->
óx
 = -1;

141 
	}
}

	@syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_ªad
 5

	)

7 
	#SYS_kûl
 6

	)

8 
	#SYS_exec
 7

	)

9 
	#SYS_f°©
 8

	)

10 
	#SYS_chdú
 9

	)

11 
	#SYS_dup
 10

	)

12 
	#SYS_gëpid
 11

	)

13 
	#SYS_sbrk
 12

	)

14 
	#SYS_¶ìp
 13

	)

15 
	#SYS_u±ime
 14

	)

17 
	#SYS_›í
 15

	)

18 
	#SYS_wrôe
 16

	)

19 
	#SYS_mknod
 17

	)

20 
	#SYS_u∆ök
 18

	)

21 
	#SYS_lök
 19

	)

22 
	#SYS_mkdú
 20

	)

23 
	#SYS_˛o£
 21

	)

	@sysfile.c

7 
	~"ty≥s.h
"

8 
	~"defs.h
"

9 
	~"∑øm.h
"

10 
	~"°©.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

13 
	~"fs.h
"

14 
	~"fûe.h
"

15 
	~"f˙é.h
"

20 
	$¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

22 
fd
;

23 
fûe
 *
f
;

25 if(
	`¨göt
(
n
, &
fd
) < 0)

27 if(
fd
 < 0 || fd >
NOFILE
 || (
f
=
¥oc
->
ofûe
[fd]) == 0)

29 if(
pfd
)

30 *
pfd
 = 
fd
;

31 if(
pf
)

32 *
pf
 = 
f
;

34 
	}
}

39 
	$fdÆloc
(
fûe
 *
f
)

41 
fd
;

43 
fd
 = 0; fd < 
NOFILE
; fd++){

44 if(
¥oc
->
ofûe
[
fd
] == 0){

45 
¥oc
->
ofûe
[
fd
] = 
f
;

46  
fd
;

50 
	}
}

53 
	$sys_dup
()

55 
fûe
 *
f
;

56 
fd
;

58 if(
	`¨gfd
(0, 0, &
f
) < 0)

60 if((
fd
=
	`fdÆloc
(
f
)) < 0)

62 
	`fûedup
(
f
);

63  
fd
;

64 
	}
}

67 
	$sys_ªad
()

69 
fûe
 *
f
;

70 
n
;

71 *
p
;

73 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

75  
	`fûîód
(
f
, 
p
, 
n
);

76 
	}
}

79 
	$sys_wrôe
()

81 
fûe
 *
f
;

82 
n
;

83 *
p
;

85 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

87  
	`fûewrôe
(
f
, 
p
, 
n
);

88 
	}
}

91 
	$sys_˛o£
()

93 
fd
;

94 
fûe
 *
f
;

96 if(
	`¨gfd
(0, &
fd
, &
f
) < 0)

98 
¥oc
->
ofûe
[
fd
] = 0;

99 
	`fûe˛o£
(
f
);

101 
	}
}

104 
	$sys_f°©
()

106 
fûe
 *
f
;

107 
°©
 *
°
;

109 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨g±r
(1, (*)&
°
, (*st)) < 0)

111  
	`fûe°©
(
f
, 
°
);

112 
	}
}

116 
	$sys_lök
()

118 
«me
[
DIRSIZ
], *
√w
, *
ﬁd
;

119 
öode
 *
dp
, *
ù
;

121 if(
	`¨g°r
(0, &
ﬁd
Ë< 0 ||árg°r(1, &
√w
) < 0)

123 if((
ù
 = 
	`«mei
(
ﬁd
)) == 0)

126 
	`begö_å™s
();

128 
	`ûock
(
ù
);

129 if(
ù
->
ty≥
 =
T_DIR
){

130 
	`iu∆ockput
(
ù
);

131 
	`commô_å™s
();

135 
ù
->
∆ök
++;

136 
	`iupd©e
(
ù
);

137 
	`iu∆ock
(
ù
);

139 if((
dp
 = 
	`«meù¨ít
(
√w
, 
«me
)) == 0)

140 
bad
;

141 
	`ûock
(
dp
);

142 if(
dp
->
dev
 !
ù
->dev || 
	`dúlök
(dp, 
«me
, ip->
öum
) < 0){

143 
	`iu∆ockput
(
dp
);

144 
bad
;

146 
	`iu∆ockput
(
dp
);

147 
	`ùut
(
ù
);

149 
	`commô_å™s
();

153 
bad
:

154 
	`ûock
(
ù
);

155 
ù
->
∆ök
--;

156 
	`iupd©e
(
ù
);

157 
	`iu∆ockput
(
ù
);

158 
	`commô_å™s
();

160 
	}
}

164 
	$isdúem±y
(
öode
 *
dp
)

166 
off
;

167 
dúít
 
de
;

169 
off
=2*(
de
); off<
dp
->
size
; off+=(de)){

170 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

171 
	`∑nic
("isdirempty:Ñeadi");

172 if(
de
.
öum
 != 0)

176 
	}
}

180 
	$sys_u∆ök
()

182 
öode
 *
ù
, *
dp
;

183 
dúít
 
de
;

184 
«me
[
DIRSIZ
], *
∑th
;

185 
uöt
 
off
;

187 if(
	`¨g°r
(0, &
∑th
) < 0)

189 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

192 
	`begö_å™s
();

194 
	`ûock
(
dp
);

197 if(
	`«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0)

198 
bad
;

200 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) == 0)

201 
bad
;

202 
	`ûock
(
ù
);

204 if(
ù
->
∆ök
 < 1)

205 
	`∑nic
("unlink:Çlink < 1");

206 if(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
(ip)){

207 
	`iu∆ockput
(
ù
);

208 
bad
;

211 
	`mem£t
(&
de
, 0, (de));

212 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

213 
	`∑nic
("unlink: writei");

214 if(
ù
->
ty≥
 =
T_DIR
){

215 
dp
->
∆ök
--;

216 
	`iupd©e
(
dp
);

218 
	`iu∆ockput
(
dp
);

220 
ù
->
∆ök
--;

221 
	`iupd©e
(
ù
);

222 
	`iu∆ockput
(
ù
);

224 
	`commô_å™s
();

228 
bad
:

229 
	`iu∆ockput
(
dp
);

230 
	`commô_å™s
();

232 
	}
}

234 
öode
*

235 
	$¸óã
(*
∑th
, 
ty≥
, 
maj‹
, 
mö‹
)

237 
uöt
 
off
;

238 
öode
 *
ù
, *
dp
;

239 
«me
[
DIRSIZ
];

241 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

243 
	`ûock
(
dp
);

245 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) != 0){

246 
	`iu∆ockput
(
dp
);

247 
	`ûock
(
ù
);

248 if(
ty≥
 =
T_FILE
 && 
ù
->type == T_FILE)

249  
ù
;

250 
	`iu∆ockput
(
ù
);

254 if((
ù
 = 
	`üŒoc
(
dp
->
dev
, 
ty≥
)) == 0)

255 
	`∑nic
("create: ialloc");

257 
	`ûock
(
ù
);

258 
ù
->
maj‹
 = major;

259 
ù
->
mö‹
 = minor;

260 
ù
->
∆ök
 = 1;

261 
	`iupd©e
(
ù
);

263 if(
ty≥
 =
T_DIR
){

264 
dp
->
∆ök
++;

265 
	`iupd©e
(
dp
);

267 if(
	`dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

268 
	`∑nic
("create dots");

271 if(
	`dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0)

272 
	`∑nic
("create: dirlink");

274 
	`iu∆ockput
(
dp
);

276  
ù
;

277 
	}
}

280 
	$sys_›í
()

282 *
∑th
;

283 
fd
, 
omode
;

284 
fûe
 *
f
;

285 
öode
 *
ù
;

287 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, &
omode
) < 0)

289 if(
omode
 & 
O_CREATE
){

290 
	`begö_å™s
();

291 
ù
 = 
	`¸óã
(
∑th
, 
T_FILE
, 0, 0);

292 
	`commô_å™s
();

293 if(
ù
 == 0)

296 if((
ù
 = 
	`«mei
(
∑th
)) == 0)

298 
	`ûock
(
ù
);

299 if(
ù
->
ty≥
 =
T_DIR
 && 
omode
 !
O_RDONLY
){

300 
	`iu∆ockput
(
ù
);

305 if((
f
 = 
	`fûóŒoc
()Ë=0 || (
fd
 = 
	`fdÆloc
(f)) < 0){

306 if(
f
)

307 
	`fûe˛o£
(
f
);

308 
	`iu∆ockput
(
ù
);

311 
	`iu∆ock
(
ù
);

313 
f
->
ty≥
 = 
FD_INODE
;

314 
f
->
ù
 = ip;

315 
f
->
off
 = 0;

316 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

317 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

318  
fd
;

319 
	}
}

322 
	$sys_mkdú
()

324 *
∑th
;

325 
öode
 *
ù
;

327 
	`begö_å™s
();

328 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`¸óã
’©h, 
T_DIR
, 0, 0)) == 0){

329 
	`commô_å™s
();

332 
	`iu∆ockput
(
ù
);

333 
	`commô_å™s
();

335 
	}
}

338 
	$sys_mknod
()

340 
öode
 *
ù
;

341 *
∑th
;

342 
Àn
;

343 
maj‹
, 
mö‹
;

345 
	`begö_å™s
();

346 if((
Àn
=
	`¨g°r
(0, &
∑th
)) < 0 ||

347 
	`¨göt
(1, &
maj‹
) < 0 ||

348 
	`¨göt
(2, &
mö‹
) < 0 ||

349 (
ù
 = 
	`¸óã
(
∑th
, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0){

350 
	`commô_å™s
();

353 
	`iu∆ockput
(
ù
);

354 
	`commô_å™s
();

356 
	}
}

359 
	$sys_chdú
()

361 *
∑th
;

362 
öode
 *
ù
;

364 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`«mei
(path)) == 0)

366 
	`ûock
(
ù
);

367 if(
ù
->
ty≥
 !
T_DIR
){

368 
	`iu∆ockput
(
ù
);

371 
	`iu∆ock
(
ù
);

372 
	`ùut
(
¥oc
->
cwd
);

373 
¥oc
->
cwd
 = 
ù
;

375 
	}
}

378 
	$sys_exec
()

380 *
∑th
, *
¨gv
[
MAXARG
];

381 
i
;

382 
uöt
 
u¨gv
, 
u¨g
;

384 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, (*)&
u¨gv
) < 0){

387 
	`mem£t
(
¨gv
, 0, (argv));

388 
i
=0;; i++){

389 if(
i
 >
	`NELEM
(
¨gv
))

391 if(
	`„tchöt
(
u¨gv
+4*
i
, (*)&
u¨g
) < 0)

393 if(
u¨g
 == 0){

394 
¨gv
[
i
] = 0;

397 if(
	`„tch°r
(
u¨g
, &
¨gv
[
i
]) < 0)

400  
	`exec
(
∑th
, 
¨gv
);

401 
	}
}

404 
	$sys_pùe
()

406 *
fd
;

407 
fûe
 *
rf
, *
wf
;

408 
fd0
, 
fd1
;

410 if(
	`¨g±r
(0, (*)&
fd
, 2*(fd[0])) < 0)

412 if(
	`pùóŒoc
(&
rf
, &
wf
) < 0)

414 
fd0
 = -1;

415 if((
fd0
 = 
	`fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

416 if(
fd0
 >= 0)

417 
¥oc
->
ofûe
[
fd0
] = 0;

418 
	`fûe˛o£
(
rf
);

419 
	`fûe˛o£
(
wf
);

422 
fd
[0] = 
fd0
;

423 
fd
[1] = 
fd1
;

425 
	}
}

	@sysproc.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"∑øm.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

10 
	$sys_f‹k
()

12  
	`f‹k
();

13 
	}
}

16 
	$sys_exô
()

18 
	`exô
();

20 
	}
}

23 
	$sys_waô
()

25  
	`waô
();

26 
	}
}

29 
	$sys_kûl
()

31 
pid
;

33 if(
	`¨göt
(0, &
pid
) < 0)

35  
	`kûl
(
pid
);

36 
	}
}

39 
	$sys_gëpid
()

41  
¥oc
->
pid
;

42 
	}
}

45 
	$sys_sbrk
()

47 
addr
;

48 
n
;

50 if(
	`¨göt
(0, &
n
) < 0)

52 
addr
 = 
¥oc
->
sz
;

53 if(
	`grow¥oc
(
n
) < 0)

55  
addr
;

56 
	}
}

59 
	$sys_¶ìp
()

61 
n
;

62 
uöt
 
ticks0
;

64 if(
	`¨göt
(0, &
n
) < 0)

66 
	`acquúe
(&
tick¶ock
);

67 
ticks0
 = 
ticks
;

68 
ticks
 - 
ticks0
 < 
n
){

69 if(
¥oc
->
kûÀd
){

70 
	`ªÀa£
(&
tick¶ock
);

73 
	`¶ìp
(&
ticks
, &
tick¶ock
);

75 
	`ªÀa£
(&
tick¶ock
);

77 
	}
}

82 
	$sys_u±ime
()

84 
uöt
 
xticks
;

86 
	`acquúe
(&
tick¶ock
);

87 
xticks
 = 
ticks
;

88 
	`ªÀa£
(&
tick¶ock
);

89  
xticks
;

90 
	}
}

	@timer.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

8 
	~"x86.h
"

10 
	#IO_TIMER1
 0x040

11 

	)

16 
	#TIMER_FREQ
 1193182

	)

17 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 
	#TIMER_SEL0
 0x00

21 
	#TIMER_RATEGEN
 0x04

22 
	#TIMER_16BIT
 0x30

23 

	)

25 
	$timîöô
()

28 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

30 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

31 
	`pi˚«bÀ
(
IRQ_TIMER
);

32 
	}
}

	@trap.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

12 
g©edesc
 
	gidt
[256];

13 
uöt
 
ve˘‹s
[];

14 
•ölock
 
	gtick¶ock
;

15 
uöt
 
	gticks
;

18 
	$tvöô
()

20 
i
;

22 
i
 = 0; i < 256; i++)

23 
	`SETGATE
(
idt
[
i
], 0, 
SEG_KCODE
<<3, 
ve˘‹s
[i], 0);

24 
	`SETGATE
(
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
<<3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

26 
	`öôlock
(&
tick¶ock
, "time");

27 
	}
}

30 
	$idtöô
()

32 
	`lidt
(
idt
, (idt));

33 
	}
}

37 
	$å≠
(
å≠‰ame
 *
tf
)

39 if(
tf
->
å≠no
 =
T_SYSCALL
){

40 if(
¥oc
->
kûÀd
)

41 
	`exô
();

42 
¥oc
->
tf
 =Åf;

43 
	`sysˇŒ
();

44 if(
¥oc
->
kûÀd
)

45 
	`exô
();

49 
tf
->
å≠no
){

50 
T_IRQ0
 + 
IRQ_TIMER
:

51 if(
˝u
->
id
 == 0){

52 
	`acquúe
(&
tick¶ock
);

53 
ticks
++;

54 
	`wakeup
(&
ticks
);

55 
	`ªÀa£
(&
tick¶ock
);

57 
	`œpi˚oi
();

59 
T_IRQ0
 + 
IRQ_IDE
:

60 
	`ideöå
();

61 
	`œpi˚oi
();

63 
T_IRQ0
 + 
IRQ_IDE
+1:

66 
T_IRQ0
 + 
IRQ_KBD
:

67 
	`kbdöå
();

68 
	`œpi˚oi
();

70 
T_IRQ0
 + 
IRQ_COM1
:

71 
	`u¨töå
();

72 
	`œpi˚oi
();

74 
T_IRQ0
 + 7:

75 
T_IRQ0
 + 
IRQ_SPURIOUS
:

76 
	`˝rötf
("cpu%d: spurious interruptát %x:%x\n",

77 
˝u
->
id
, 
tf
->
cs
,Åf->
eù
);

78 
	`œpi˚oi
();

83 if(
¥oc
 =0 || (
tf
->
cs
&3) == 0){

85 
	`˝rötf
("unexpectedÅrap %d from cpu %dÉip %x (cr2=0x%x)\n",

86 
tf
->
å≠no
, 
˝u
->
id
,Åf->
eù
, 
	`r¸2
());

87 
	`∑nic
("trap");

90 
	`˝rötf
("pid %d %s:Årap %dÉrr %d on cpu %d "

92 
¥oc
->
pid
,Öroc->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
˝u
->
id
,Åf->
eù
,

93 
	`r¸2
());

94 
¥oc
->
kûÀd
 = 1;

100 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

101 
	`exô
();

105 if(
¥oc
 &&Öroc->
°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
T_IRQ0
+
IRQ_TIMER
)

106 
	`yõld
();

109 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

110 
	`exô
();

111 
	}
}

	@traps.h

4 
	#T_DIVIDE
 0

5 
	#T_DEBUG
 1

6 
	#T_NMI
 2

7 
	#T_BRKPT
 3

8 
	#T_OFLOW
 4

9 
	#T_BOUND
 5

10 
	#T_ILLOP
 6

11 
	#T_DEVICE
 7

12 
	#T_DBLFLT
 8

14 
	#T_TSS
 10

15 
	#T_SEGNP
 11

16 
	#T_STACK
 12

17 
	#T_GPFLT
 13

18 
	#T_PGFLT
 14

20 
	#T_FPERR
 16

21 
	#T_ALIGN
 17

22 
	#T_MCHK
 18

23 
	#T_SIMDERR
 19

24 

	)

27 
	#T_SYSCALL
 64

28 
	#T_DEFAULT
 500

29 

	)

30 
	#T_IRQ0
 32

31 

	)

32 
	#IRQ_TIMER
 0

	)

33 
	#IRQ_KBD
 1

	)

34 
	#IRQ_COM1
 4

	)

35 
	#IRQ_IDE
 14

	)

36 
	#IRQ_ERROR
 19

	)

37 
	#IRQ_SPURIOUS
 31

	)

	@types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

4 
uöt
 
	tpde_t
;

	@uart.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"å≠s.h
"

7 
	~"•ölock.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"mmu.h
"

11 
	~"¥oc.h
"

12 
	~"x86.h
"

14 
	#COM1
 0x3f8

	)

16 
	gu¨t
;

19 
	$u¨töô
()

21 *
p
;

24 
	`outb
(
COM1
+2, 0);

27 
	`outb
(
COM1
+3, 0x80);

28 
	`outb
(
COM1
+0, 115200/9600);

29 
	`outb
(
COM1
+1, 0);

30 
	`outb
(
COM1
+3, 0x03);

31 
	`outb
(
COM1
+4, 0);

32 
	`outb
(
COM1
+1, 0x01);

35 if(
	`öb
(
COM1
+5) == 0xFF)

37 
u¨t
 = 1;

41 
	`öb
(
COM1
+2);

42 
	`öb
(
COM1
+0);

43 
	`pi˚«bÀ
(
IRQ_COM1
);

44 
	`iﬂpi˚«bÀ
(
IRQ_COM1
, 0);

47 
p
="xv6...\n"; *p;Ö++)

48 
	`u¨çutc
(*
p
);

49 
	}
}

52 
	$u¨çutc
(
c
)

54 
i
;

56 if(!
u¨t
)

58 
i
 = 0; i < 128 && !(
	`öb
(
COM1
+5) & 0x20); i++)

59 
	`mi¸odñay
(10);

60 
	`outb
(
COM1
+0, 
c
);

61 
	}
}

64 
	$u¨tgëc
()

66 if(!
u¨t
)

68 if(!(
	`öb
(
COM1
+5) & 0x01))

70  
	`öb
(
COM1
+0);

71 
	}
}

74 
	$u¨töå
()

76 
	`c⁄sﬁeöå
(
u¨tgëc
);

77 
	}
}

	@ulib.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"f˙é.h
"

4 
	~"u£r.h
"

5 
	~"x86.h
"

8 
	$°r˝y
(*
s
, *
t
)

10 *
os
;

12 
os
 = 
s
;

13 (*
s
++ = *
t
++) != 0)

15  
os
;

16 
	}
}

19 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

21 *
p
 && *∞=*
q
)

22 
p
++, 
q
++;

23  (
uch¨
)*
p
 - (uch¨)*
q
;

24 
	}
}

26 
uöt


27 
	$°æí
(*
s
)

29 
n
;

31 
n
 = 0; 
s
[n];Ç++)

33  
n
;

34 
	}
}

37 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

39 
	`°osb
(
d°
, 
c
, 
n
);

40  
d°
;

41 
	}
}

44 
	$°rchr
(c⁄° *
s
, 
c
)

46 ; *
s
; s++)

47 if(*
s
 =
c
)

48  (*)
s
;

50 
	}
}

53 
	$gës
(*
buf
, 
max
)

55 
i
, 
cc
;

56 
c
;

58 
i
=0; i+1 < 
max
; ){

59 
cc
 = 
	`ªad
(0, &
c
, 1);

60 if(
cc
 < 1)

62 
buf
[
i
++] = 
c
;

63 if(
c
 == '\n' || c == '\r')

66 
buf
[
i
] = '\0';

67  
buf
;

68 
	}
}

71 
	$°©
(*
n
, 
°©
 *
°
)

73 
fd
;

74 
r
;

76 
fd
 = 
	`›í
(
n
, 
O_RDONLY
);

77 if(
fd
 < 0)

79 
r
 = 
	`f°©
(
fd
, 
°
);

80 
	`˛o£
(
fd
);

81  
r
;

82 
	}
}

85 
	$©oi
(c⁄° *
s
)

87 
n
;

89 
n
 = 0;

90 '0' <*
s
 && *s <= '9')

91 
n
 =Ç*10 + *
s
++ - '0';

92  
n
;

93 
	}
}

96 
	$memmove
(*
vd°
, *
v§c
, 
n
)

98 *
d°
, *
§c
;

100 
d°
 = 
vd°
;

101 
§c
 = 
v§c
;

102 
n
-- > 0)

103 *
d°
++ = *
§c
++;

104  
vd°
;

105 
	}
}

	@umalloc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"∑øm.h
"

9 
	tAlign
;

11 
	uhódî
 {

13 
hódî
 *
	m±r
;

14 
uöt
 
	msize
;

15 } 
	ms
;

16 
Align
 
	mx
;

19 
hódî
 
	tHódî
;

21 
Hódî
 
	gba£
;

22 
Hódî
 *
	g‰ìp
;

25 
	$‰ì
(*
≠
)

27 
Hódî
 *
bp
, *
p
;

29 
bp
 = (
Hódî
*)
≠
 - 1;

30 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

31 if(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

33 if(
bp
 + bp->
s
.
size
 =
p
->s.
±r
){

34 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

35 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

37 
bp
->
s
.
±r
 = 
p
->s.ptr;

38 if(
p
 +Ö->
s
.
size
 =
bp
){

39 
p
->
s
.
size
 +
bp
->s.size;

40 
p
->
s
.
±r
 = 
bp
->s.ptr;

42 
p
->
s
.
±r
 = 
bp
;

43 
‰ìp
 = 
p
;

44 
	}
}

46 
Hódî
*

47 
	$m‹ec‹e
(
uöt
 
nu
)

49 *
p
;

50 
Hódî
 *
hp
;

52 if(
nu
 < 4096)

53 
nu
 = 4096;

54 
p
 = 
	`sbrk
(
nu
 * (
Hódî
));

55 if(
p
 == (*)-1)

57 
hp
 = (
Hódî
*)
p
;

58 
hp
->
s
.
size
 = 
nu
;

59 
	`‰ì
((*)(
hp
 + 1));

60  
‰ìp
;

61 
	}
}

64 
	$mÆloc
(
uöt
 
nbyãs
)

66 
Hódî
 *
p
, *
¥evp
;

67 
uöt
 
nunôs
;

69 
nunôs
 = (
nbyãs
 + (
Hódî
) - 1)/(Header) + 1;

70 if((
¥evp
 = 
‰ìp
) == 0){

71 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

72 
ba£
.
s
.
size
 = 0;

74 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr){

75 if(
p
->
s
.
size
 >
nunôs
){

76 if(
p
->
s
.
size
 =
nunôs
)

77 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

79 
p
->
s
.
size
 -
nunôs
;

80 
p
 +p->
s
.
size
;

81 
p
->
s
.
size
 = 
nunôs
;

83 
‰ìp
 = 
¥evp
;

84  (*)(
p
 + 1);

86 if(
p
 =
‰ìp
)

87 if((
p
 = 
	`m‹ec‹e
(
nunôs
)) == 0)

90 
	}
}

	@user.h

1 
	g°©
;

4 
f‹k
();

5 
	$exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

6 
	`waô
();

7 
	`pùe
(*);

8 
	`wrôe
(, *, );

9 
	`ªad
(, *, );

10 
	`˛o£
();

11 
	`kûl
();

12 
	`exec
(*, **);

13 
	`›í
(*, );

14 
	`mknod
(*, , );

15 
	`u∆ök
(*);

16 
	`f°©
(
fd
, 
°©
*);

17 
	`lök
(*, *);

18 
	`mkdú
(*);

19 
	`chdú
(*);

20 
	`dup
();

21 
	`gëpid
();

22 * 
	`sbrk
();

23 
	`¶ìp
();

24 
	`u±ime
();

27 
	`°©
(*, 
°©
*);

28 * 
	`°r˝y
(*, *);

29 *
	`memmove
(*, *, );

30 * 
	`°rchr
(c⁄° *, 
c
);

31 
	`°rcmp
(const *, const *);

32 
	`¥ötf
(, *, ...);

33 * 
	`gës
(*, 
max
);

34 
uöt
 
	`°æí
(*);

35 * 
	`mem£t
(*, , 
uöt
);

36 * 
	`mÆloc
(
uöt
);

37 
	`‰ì
(*);

38 
	`©oi
(const *);

	@usertests.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"°©.h
"

4 
	~"u£r.h
"

5 
	~"fs.h
"

6 
	~"f˙é.h
"

7 
	~"sysˇŒ.h
"

8 
	~"å≠s.h
"

9 
	~"memœyout.h
"

11 
	gbuf
[8192];

12 
	g«me
[3];

13 *
	gechﬂrgv
[] = { "echo", "ALL", "TESTS", "PASSED", 0 };

14 
	g°dout
 = 1;

19 
	$›íã°
()

21 
fd
;

23 
	`¥ötf
(
°dout
, "openÅest\n");

24 
fd
 = 
	`›í
("echo", 0);

25 if(
fd
 < 0){

26 
	`¥ötf
(
°dout
, "openÉcho failed!\n");

27 
	`exô
();

29 
	`˛o£
(
fd
);

30 
fd
 = 
	`›í
("doesnotexist", 0);

31 if(
fd
 >= 0){

32 
	`¥ötf
(
°dout
, "open doesnotexist succeeded!\n");

33 
	`exô
();

35 
	`¥ötf
(
°dout
, "openÅest ok\n");

36 
	}
}

39 
	$wrôëe°
()

41 
fd
;

42 
i
;

44 
	`¥ötf
(
°dout
, "small fileÅest\n");

45 
fd
 = 
	`›í
("smÆl", 
O_CREATE
|
O_RDWR
);

46 if(
fd
 >= 0){

47 
	`¥ötf
(
°dout
, "creat small succeeded; ok\n");

49 
	`¥ötf
(
°dout
, "error: creat small failed!\n");

50 
	`exô
();

52 
i
 = 0; i < 100; i++){

53 if(
	`wrôe
(
fd
, "aaaaaaaaaa", 10) != 10){

54 
	`¥ötf
(
°dout
, "îr‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

55 
	`exô
();

57 if(
	`wrôe
(
fd
, "bbbbbbbbbb", 10) != 10){

58 
	`¥ötf
(
°dout
, "îr‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

59 
	`exô
();

62 
	`¥ötf
(
°dout
, "writes ok\n");

63 
	`˛o£
(
fd
);

64 
fd
 = 
	`›í
("smÆl", 
O_RDONLY
);

65 if(
fd
 >= 0){

66 
	`¥ötf
(
°dout
, "open small succeeded ok\n");

68 
	`¥ötf
(
°dout
, "error: open small failed!\n");

69 
	`exô
();

71 
i
 = 
	`ªad
(
fd
, 
buf
, 2000);

72 if(
i
 == 2000){

73 
	`¥ötf
(
°dout
, "read succeeded ok\n");

75 
	`¥ötf
(
°dout
, "read failed\n");

76 
	`exô
();

78 
	`˛o£
(
fd
);

80 if(
	`u∆ök
("small") < 0){

81 
	`¥ötf
(
°dout
, "unlink small failed\n");

82 
	`exô
();

84 
	`¥ötf
(
°dout
, "small fileÅest ok\n");

85 
	}
}

88 
	$wrôëe°1
()

90 
i
, 
fd
, 
n
;

92 
	`¥ötf
(
°dout
, "big filesÅest\n");

94 
fd
 = 
	`›í
("big", 
O_CREATE
|
O_RDWR
);

95 if(
fd
 < 0){

96 
	`¥ötf
(
°dout
, "error: creat big failed!\n");

97 
	`exô
();

100 
i
 = 0; i < 
MAXFILE
; i++){

101 ((*)
buf
)[0] = 
i
;

102 if(
	`wrôe
(
fd
, 
buf
, 512) != 512){

103 
	`¥ötf
(
°dout
, "îr‹: wrôêbig fûêÁûed\n", 
i
);

104 
	`exô
();

108 
	`˛o£
(
fd
);

110 
fd
 = 
	`›í
("big", 
O_RDONLY
);

111 if(
fd
 < 0){

112 
	`¥ötf
(
°dout
, "error: open big failed!\n");

113 
	`exô
();

116 
n
 = 0;

118 
i
 = 
	`ªad
(
fd
, 
buf
, 512);

119 if(
i
 == 0){

120 if(
n
 =
MAXFILE
 - 1){

121 
	`¥ötf
(
°dout
, "ªad o∆y %d block†‰om big", 
n
);

122 
	`exô
();

125 } if(
i
 != 512){

126 
	`¥ötf
(
°dout
, "ªad faûed %d\n", 
i
);

127 
	`exô
();

129 if(((*)
buf
)[0] !
n
){

130 
	`¥ötf
(
°dout
, "read content of block %d is %d\n",

131 
n
, ((*)
buf
)[0]);

132 
	`exô
();

134 
n
++;

136 
	`˛o£
(
fd
);

137 if(
	`u∆ök
("big") < 0){

138 
	`¥ötf
(
°dout
, "unlink big failed\n");

139 
	`exô
();

141 
	`¥ötf
(
°dout
, "big files ok\n");

142 
	}
}

145 
	$¸óãã°
()

147 
i
, 
fd
;

149 
	`¥ötf
(
°dout
, "many creates, followed by unlinkÅest\n");

151 
«me
[0] = 'a';

152 
«me
[2] = '\0';

153 
i
 = 0; i < 52; i++){

154 
«me
[1] = '0' + 
i
;

155 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

156 
	`˛o£
(
fd
);

158 
«me
[0] = 'a';

159 
«me
[2] = '\0';

160 
i
 = 0; i < 52; i++){

161 
«me
[1] = '0' + 
i
;

162 
	`u∆ök
(
«me
);

164 
	`¥ötf
(
°dout
, "many creates, followed by unlink; ok\n");

165 
	}
}

167 
	$dúã°
()

169 
	`¥ötf
(
°dout
, "mkdirÅest\n");

171 if(
	`mkdú
("dir0") < 0){

172 
	`¥ötf
(
°dout
, "mkdir failed\n");

173 
	`exô
();

176 if(
	`chdú
("dir0") < 0){

177 
	`¥ötf
(
°dout
, "chdir dir0 failed\n");

178 
	`exô
();

181 if(
	`chdú
("..") < 0){

182 
	`¥ötf
(
°dout
, "chdir .. failed\n");

183 
	`exô
();

186 if(
	`u∆ök
("dir0") < 0){

187 
	`¥ötf
(
°dout
, "unlink dir0 failed\n");

188 
	`exô
();

190 
	`¥ötf
(
°dout
, "mkdirÅest\n");

191 
	}
}

194 
	$exe˘e°
()

196 
	`¥ötf
(
°dout
, "execÅest\n");

197 if(
	`exec
("echo", 
echﬂrgv
) < 0){

198 
	`¥ötf
(
°dout
, "execÉcho failed\n");

199 
	`exô
();

201 
	}
}

206 
	$pùe1
()

208 
fds
[2], 
pid
;

209 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

211 if(
	`pùe
(
fds
) != 0){

212 
	`¥ötf
(1, "pipe() failed\n");

213 
	`exô
();

215 
pid
 = 
	`f‹k
();

216 
£q
 = 0;

217 if(
pid
 == 0){

218 
	`˛o£
(
fds
[0]);

219 
n
 = 0;Ç < 5;Ç++){

220 
i
 = 0; i < 1033; i++)

221 
buf
[
i
] = 
£q
++;

222 if(
	`wrôe
(
fds
[1], 
buf
, 1033) != 1033){

223 
	`¥ötf
(1, "pipe1 oops 1\n");

224 
	`exô
();

227 
	`exô
();

228 } if(
pid
 > 0){

229 
	`˛o£
(
fds
[1]);

230 
tŸÆ
 = 0;

231 
cc
 = 1;

232 (
n
 = 
	`ªad
(
fds
[0], 
buf
, 
cc
)) > 0){

233 
i
 = 0; i < 
n
; i++){

234 if((
buf
[
i
] & 0xffË!(
£q
++ & 0xff)){

235 
	`¥ötf
(1, "pipe1 oops 2\n");

239 
tŸÆ
 +
n
;

240 
cc
 = cc * 2;

241 if(
cc
 > (
buf
))

242 
cc
 = (
buf
);

244 if(
tŸÆ
 != 5 * 1033){

245 
	`¥ötf
(1, "pùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

246 
	`exô
();

248 
	`˛o£
(
fds
[0]);

249 
	`waô
();

251 
	`¥ötf
(1, "fork() failed\n");

252 
	`exô
();

254 
	`¥ötf
(1, "pipe1 ok\n");

255 
	}
}

259 
	$¥ìm±
()

261 
pid1
, 
pid2
, 
pid3
;

262 
pfds
[2];

264 
	`¥ötf
(1, "preempt: ");

265 
pid1
 = 
	`f‹k
();

266 if(
pid1
 == 0)

270 
pid2
 = 
	`f‹k
();

271 if(
pid2
 == 0)

275 
	`pùe
(
pfds
);

276 
pid3
 = 
	`f‹k
();

277 if(
pid3
 == 0){

278 
	`˛o£
(
pfds
[0]);

279 if(
	`wrôe
(
pfds
[1], "x", 1) != 1)

280 
	`¥ötf
(1, "preempt writeÉrror");

281 
	`˛o£
(
pfds
[1]);

286 
	`˛o£
(
pfds
[1]);

287 if(
	`ªad
(
pfds
[0], 
buf
, (buf)) != 1){

288 
	`¥ötf
(1, "preemptÑeadÉrror");

291 
	`˛o£
(
pfds
[0]);

292 
	`¥ötf
(1, "kill... ");

293 
	`kûl
(
pid1
);

294 
	`kûl
(
pid2
);

295 
	`kûl
(
pid3
);

296 
	`¥ötf
(1, "wait... ");

297 
	`waô
();

298 
	`waô
();

299 
	`waô
();

300 
	`¥ötf
(1, "preempt ok\n");

301 
	}
}

305 
	$exôwaô
()

307 
i
, 
pid
;

309 
i
 = 0; i < 100; i++){

310 
pid
 = 
	`f‹k
();

311 if(
pid
 < 0){

312 
	`¥ötf
(1, "fork failed\n");

315 if(
pid
){

316 if(
	`waô
(Ë!
pid
){

317 
	`¥ötf
(1, "wait wrongÖid\n");

321 
	`exô
();

324 
	`¥ötf
(1, "exitwait ok\n");

325 
	}
}

328 
	$mem
()

330 *
m1
, *
m2
;

331 
pid
, 
µid
;

333 
	`¥ötf
(1, "memÅest\n");

334 
µid
 = 
	`gëpid
();

335 if((
pid
 = 
	`f‹k
()) == 0){

336 
m1
 = 0;

337 (
m2
 = 
	`mÆloc
(10001)) != 0){

338 *(**)
m2
 = 
m1
;

339 
m1
 = 
m2
;

341 
m1
){

342 
m2
 = *(**)
m1
;

343 
	`‰ì
(
m1
);

344 
m1
 = 
m2
;

346 
m1
 = 
	`mÆloc
(1024*20);

347 if(
m1
 == 0){

348 
	`¥ötf
(1, "couldn'tállocate mem?!!\n");

349 
	`kûl
(
µid
);

350 
	`exô
();

352 
	`‰ì
(
m1
);

353 
	`¥ötf
(1, "mem ok\n");

354 
	`exô
();

356 
	`waô
();

358 
	}
}

365 
	$sh¨edfd
()

367 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

368 
buf
[10];

370 
	`¥ötf
(1, "sharedfdÅest\n");

372 
	`u∆ök
("sharedfd");

373 
fd
 = 
	`›í
("sh¨edfd", 
O_CREATE
|
O_RDWR
);

374 if(
fd
 < 0){

375 
	`¥ötf
(1, "fstests: cannot open sharedfd for writing");

378 
pid
 = 
	`f‹k
();

379 
	`mem£t
(
buf
, 
pid
==0?'c':'p', (buf));

380 
i
 = 0; i < 1000; i++){

381 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)){

382 
	`¥ötf
(1, "fstests: write sharedfd failed\n");

386 if(
pid
 == 0)

387 
	`exô
();

389 
	`waô
();

390 
	`˛o£
(
fd
);

391 
fd
 = 
	`›í
("sharedfd", 0);

392 if(
fd
 < 0){

393 
	`¥ötf
(1, "fstests: cannot open sharedfd forÑeading\n");

396 
nc
 = 
≈
 = 0;

397 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

398 
i
 = 0; i < (
buf
); i++){

399 if(
buf
[
i
] == 'c')

400 
nc
++;

401 if(
buf
[
i
] == 'p')

402 
≈
++;

405 
	`˛o£
(
fd
);

406 
	`u∆ök
("sharedfd");

407 if(
nc
 =10000 && 
≈
 == 10000){

408 
	`¥ötf
(1, "sharedfd ok\n");

410 
	`¥ötf
(1, "sh¨edfd o›†%d %d\n", 
nc
, 
≈
);

411 
	`exô
();

413 
	}
}

418 
	$twofûes
()

420 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
;

421 *
‚ame
;

423 
	`¥ötf
(1, "twofilesÅest\n");

425 
	`u∆ök
("f1");

426 
	`u∆ök
("f2");

428 
pid
 = 
	`f‹k
();

429 if(
pid
 < 0){

430 
	`¥ötf
(1, "fork failed\n");

431 
	`exô
();

434 
‚ame
 = 
pid
 ? "f1" : "f2";

435 
fd
 = 
	`›í
(
‚ame
, 
O_CREATE
 | 
O_RDWR
);

436 if(
fd
 < 0){

437 
	`¥ötf
(1, "create failed\n");

438 
	`exô
();

441 
	`mem£t
(
buf
, 
pid
?'p':'c', 512);

442 
i
 = 0; i < 12; i++){

443 if((
n
 = 
	`wrôe
(
fd
, 
buf
, 500)) != 500){

444 
	`¥ötf
(1, "wrôêÁûed %d\n", 
n
);

445 
	`exô
();

448 
	`˛o£
(
fd
);

449 if(
pid
)

450 
	`waô
();

452 
	`exô
();

454 
i
 = 0; i < 2; i++){

455 
fd
 = 
	`›í
(
i
?"f1":"f2", 0);

456 
tŸÆ
 = 0;

457 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

458 
j
 = 0; j < 
n
; j++){

459 if(
buf
[
j
] !(
i
?'p':'c')){

460 
	`¥ötf
(1, "wrong char\n");

461 
	`exô
();

464 
tŸÆ
 +
n
;

466 
	`˛o£
(
fd
);

467 if(
tŸÆ
 != 12*500){

468 
	`¥ötf
(1, "wr⁄gÜígth %d\n", 
tŸÆ
);

469 
	`exô
();

473 
	`u∆ök
("f1");

474 
	`u∆ök
("f2");

476 
	`¥ötf
(1, "twofiles ok\n");

477 
	}
}

481 
	$¸óãdñëe
()

483 íum { 
N
 = 20 };

484 
pid
, 
i
, 
fd
;

485 
«me
[32];

487 
	`¥ötf
(1, "createdeleteÅest\n");

488 
pid
 = 
	`f‹k
();

489 if(
pid
 < 0){

490 
	`¥ötf
(1, "fork failed\n");

491 
	`exô
();

494 
«me
[0] = 
pid
 ? 'p' : 'c';

495 
«me
[2] = '\0';

496 
i
 = 0; i < 
N
; i++){

497 
«me
[1] = '0' + 
i
;

498 
fd
 = 
	`›í
(
«me
, 
O_CREATE
 | 
O_RDWR
);

499 if(
fd
 < 0){

500 
	`¥ötf
(1, "create failed\n");

501 
	`exô
();

503 
	`˛o£
(
fd
);

504 if(
i
 > 0 && (i % 2 ) == 0){

505 
«me
[1] = '0' + (
i
 / 2);

506 if(
	`u∆ök
(
«me
) < 0){

507 
	`¥ötf
(1, "unlink failed\n");

508 
	`exô
();

513 if(
pid
==0)

514 
	`exô
();

516 
	`waô
();

518 
i
 = 0; i < 
N
; i++){

519 
«me
[0] = 'p';

520 
«me
[1] = '0' + 
i
;

521 
fd
 = 
	`›í
(
«me
, 0);

522 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

523 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

524 
	`exô
();

525 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

526 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

527 
	`exô
();

529 if(
fd
 >= 0)

530 
	`˛o£
(
fd
);

532 
«me
[0] = 'c';

533 
«me
[1] = '0' + 
i
;

534 
fd
 = 
	`›í
(
«me
, 0);

535 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

536 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

537 
	`exô
();

538 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

539 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

540 
	`exô
();

542 if(
fd
 >= 0)

543 
	`˛o£
(
fd
);

546 
i
 = 0; i < 
N
; i++){

547 
«me
[0] = 'p';

548 
«me
[1] = '0' + 
i
;

549 
	`u∆ök
(
«me
);

550 
«me
[0] = 'c';

551 
	`u∆ök
(
«me
);

554 
	`¥ötf
(1, "createdelete ok\n");

555 
	}
}

559 
	$u∆ökªad
()

561 
fd
, 
fd1
;

563 
	`¥ötf
(1, "unlinkreadÅest\n");

564 
fd
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

565 if(
fd
 < 0){

566 
	`¥ötf
(1, "create unlinkread failed\n");

567 
	`exô
();

569 
	`wrôe
(
fd
, "hello", 5);

570 
	`˛o£
(
fd
);

572 
fd
 = 
	`›í
("u∆ökªad", 
O_RDWR
);

573 if(
fd
 < 0){

574 
	`¥ötf
(1, "open unlinkread failed\n");

575 
	`exô
();

577 if(
	`u∆ök
("unlinkread") != 0){

578 
	`¥ötf
(1, "unlink unlinkread failed\n");

579 
	`exô
();

582 
fd1
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

583 
	`wrôe
(
fd1
, "yyy", 3);

584 
	`˛o£
(
fd1
);

586 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

587 
	`¥ötf
(1, "unlinkreadÑead failed");

588 
	`exô
();

590 if(
buf
[0] != 'h'){

591 
	`¥ötf
(1, "unlinkread wrong data\n");

592 
	`exô
();

594 if(
	`wrôe
(
fd
, 
buf
, 10) != 10){

595 
	`¥ötf
(1, "unlinkread write failed\n");

596 
	`exô
();

598 
	`˛o£
(
fd
);

599 
	`u∆ök
("unlinkread");

600 
	`¥ötf
(1, "unlinkread ok\n");

601 
	}
}

604 
	$lökã°
()

606 
fd
;

608 
	`¥ötf
(1, "linktest\n");

610 
	`u∆ök
("lf1");

611 
	`u∆ök
("lf2");

613 
fd
 = 
	`›í
("lf1", 
O_CREATE
|
O_RDWR
);

614 if(
fd
 < 0){

615 
	`¥ötf
(1, "createÜf1 failed\n");

616 
	`exô
();

618 if(
	`wrôe
(
fd
, "hello", 5) != 5){

619 
	`¥ötf
(1, "writeÜf1 failed\n");

620 
	`exô
();

622 
	`˛o£
(
fd
);

624 if(
	`lök
("lf1", "lf2") < 0){

625 
	`¥ötf
(1, "linkÜf1Üf2 failed\n");

626 
	`exô
();

628 
	`u∆ök
("lf1");

630 if(
	`›í
("lf1", 0) >= 0){

631 
	`¥ötf
(1, "unlinkedÜf1 but it is stillÅhere!\n");

632 
	`exô
();

635 
fd
 = 
	`›í
("lf2", 0);

636 if(
fd
 < 0){

637 
	`¥ötf
(1, "openÜf2 failed\n");

638 
	`exô
();

640 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

641 
	`¥ötf
(1, "readÜf2 failed\n");

642 
	`exô
();

644 
	`˛o£
(
fd
);

646 if(
	`lök
("lf2", "lf2") >= 0){

647 
	`¥ötf
(1, "linkÜf2Üf2 succeeded! oops\n");

648 
	`exô
();

651 
	`u∆ök
("lf2");

652 if(
	`lök
("lf2", "lf1") >= 0){

653 
	`¥ötf
(1, "linkÇon-existant succeeded! oops\n");

654 
	`exô
();

657 if(
	`lök
(".", "lf1") >= 0){

658 
	`¥ötf
(1, "link .Üf1 succeeded! oops\n");

659 
	`exô
();

662 
	`¥ötf
(1, "linktest ok\n");

663 
	}
}

667 
	$c⁄¸óã
()

669 
fûe
[3];

670 
i
, 
pid
, 
n
, 
fd
;

671 
Á
[40];

673 
ush‹t
 
öum
;

674 
«me
[14];

675 } 
de
;

677 
	`¥ötf
(1, "concreateÅest\n");

678 
fûe
[0] = 'C';

679 
fûe
[2] = '\0';

680 
i
 = 0; i < 40; i++){

681 
fûe
[1] = '0' + 
i
;

682 
	`u∆ök
(
fûe
);

683 
pid
 = 
	`f‹k
();

684 if(
pid
 && (
i
 % 3) == 1){

685 
	`lök
("C0", 
fûe
);

686 } if(
pid
 =0 && (
i
 % 5) == 1){

687 
	`lök
("C0", 
fûe
);

689 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

690 if(
fd
 < 0){

691 
	`¥ötf
(1, "c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

692 
	`exô
();

694 
	`˛o£
(
fd
);

696 if(
pid
 == 0)

697 
	`exô
();

699 
	`waô
();

702 
	`mem£t
(
Á
, 0, (fa));

703 
fd
 = 
	`›í
(".", 0);

704 
n
 = 0;

705 
	`ªad
(
fd
, &
de
, (de)) > 0){

706 if(
de
.
öum
 == 0)

708 if(
de
.
«me
[0] == 'C' && de.name[2] == '\0'){

709 
i
 = 
de
.
«me
[1] - '0';

710 if(
i
 < 0 || i >(
Á
)){

711 
	`¥ötf
(1, "c⁄¸óã weúd fûê%s\n", 
de
.
«me
);

712 
	`exô
();

714 if(
Á
[
i
]){

715 
	`¥ötf
(1, "c⁄¸óã du∂iˇã fûê%s\n", 
de
.
«me
);

716 
	`exô
();

718 
Á
[
i
] = 1;

719 
n
++;

722 
	`˛o£
(
fd
);

724 if(
n
 != 40){

725 
	`¥ötf
(1, "concreateÇotÉnough files in directoryÜisting\n");

726 
	`exô
();

729 
i
 = 0; i < 40; i++){

730 
fûe
[1] = '0' + 
i
;

731 
pid
 = 
	`f‹k
();

732 if(
pid
 < 0){

733 
	`¥ötf
(1, "fork failed\n");

734 
	`exô
();

736 if(((
i
 % 3Ë=0 && 
pid
 == 0) ||

737 ((
i
 % 3Ë=1 && 
pid
 != 0)){

738 
	`˛o£
(
	`›í
(
fûe
, 0));

739 
	`˛o£
(
	`›í
(
fûe
, 0));

740 
	`˛o£
(
	`›í
(
fûe
, 0));

741 
	`˛o£
(
	`›í
(
fûe
, 0));

743 
	`u∆ök
(
fûe
);

744 
	`u∆ök
(
fûe
);

745 
	`u∆ök
(
fûe
);

746 
	`u∆ök
(
fûe
);

748 if(
pid
 == 0)

749 
	`exô
();

751 
	`waô
();

754 
	`¥ötf
(1, "concreate ok\n");

755 
	}
}

760 
	$löku∆ök
()

762 
pid
, 
i
;

764 
	`¥ötf
(1, "linkunlinkÅest\n");

766 
	`u∆ök
("x");

767 
pid
 = 
	`f‹k
();

768 if(
pid
 < 0){

769 
	`¥ötf
(1, "fork failed\n");

770 
	`exô
();

773 
x
 = (
pid
 ? 1 : 97);

774 
i
 = 0; i < 100; i++){

775 
x
 = x * 1103515245 + 12345;

776 if((
x
 % 3) == 0){

777 
	`˛o£
(
	`›í
("x", 
O_RDWR
 | 
O_CREATE
));

778 } if((
x
 % 3) == 1){

779 
	`lök
("cat", "x");

781 
	`u∆ök
("x");

785 if(
pid
)

786 
	`waô
();

788 
	`exô
();

790 
	`¥ötf
(1, "linkunlink ok\n");

791 
	}
}

795 
	$bigdú
()

797 
i
, 
fd
;

798 
«me
[10];

800 
	`¥ötf
(1, "bigdirÅest\n");

801 
	`u∆ök
("bd");

803 
fd
 = 
	`›í
("bd", 
O_CREATE
);

804 if(
fd
 < 0){

805 
	`¥ötf
(1, "bigdir create failed\n");

806 
	`exô
();

808 
	`˛o£
(
fd
);

810 
i
 = 0; i < 500; i++){

811 
«me
[0] = 'x';

812 
«me
[1] = '0' + (
i
 / 64);

813 
«me
[2] = '0' + (
i
 % 64);

814 
«me
[3] = '\0';

815 if(
	`lök
("bd", 
«me
) != 0){

816 
	`¥ötf
(1, "bigdirÜink failed\n");

817 
	`exô
();

821 
	`u∆ök
("bd");

822 
i
 = 0; i < 500; i++){

823 
«me
[0] = 'x';

824 
«me
[1] = '0' + (
i
 / 64);

825 
«me
[2] = '0' + (
i
 % 64);

826 
«me
[3] = '\0';

827 if(
	`u∆ök
(
«me
) != 0){

828 
	`¥ötf
(1, "bigdir unlink failed");

829 
	`exô
();

833 
	`¥ötf
(1, "bigdir ok\n");

834 
	}
}

837 
	$subdú
()

839 
fd
, 
cc
;

841 
	`¥ötf
(1, "subdirÅest\n");

843 
	`u∆ök
("ff");

844 if(
	`mkdú
("dd") != 0){

845 
	`¥ötf
(1, "subdir mkdir dd failed\n");

846 
	`exô
();

849 
fd
 = 
	`›í
("dd/ff", 
O_CREATE
 | 
O_RDWR
);

850 if(
fd
 < 0){

851 
	`¥ötf
(1, "create dd/ff failed\n");

852 
	`exô
();

854 
	`wrôe
(
fd
, "ff", 2);

855 
	`˛o£
(
fd
);

857 if(
	`u∆ök
("dd") >= 0){

858 
	`¥ötf
(1, "unlink dd (non-empty dir) succeeded!\n");

859 
	`exô
();

862 if(
	`mkdú
("/dd/dd") != 0){

863 
	`¥ötf
(1, "subdir mkdir dd/dd failed\n");

864 
	`exô
();

867 
fd
 = 
	`›í
("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

868 if(
fd
 < 0){

869 
	`¥ötf
(1, "create dd/dd/ff failed\n");

870 
	`exô
();

872 
	`wrôe
(
fd
, "FF", 2);

873 
	`˛o£
(
fd
);

875 
fd
 = 
	`›í
("dd/dd/../ff", 0);

876 if(
fd
 < 0){

877 
	`¥ötf
(1, "open dd/dd/../ff failed\n");

878 
	`exô
();

880 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

881 if(
cc
 !2 || 
buf
[0] != 'f'){

882 
	`¥ötf
(1, "dd/dd/../ff wrong content\n");

883 
	`exô
();

885 
	`˛o£
(
fd
);

887 if(
	`lök
("dd/dd/ff", "dd/dd/ffff") != 0){

888 
	`¥ötf
(1, "link dd/dd/ff dd/dd/ffff failed\n");

889 
	`exô
();

892 if(
	`u∆ök
("dd/dd/ff") != 0){

893 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

894 
	`exô
();

896 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

897 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded\n");

898 
	`exô
();

901 if(
	`chdú
("dd") != 0){

902 
	`¥ötf
(1, "chdir dd failed\n");

903 
	`exô
();

905 if(
	`chdú
("dd/../../dd") != 0){

906 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

907 
	`exô
();

909 if(
	`chdú
("dd/../../../dd") != 0){

910 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

911 
	`exô
();

913 if(
	`chdú
("./..") != 0){

914 
	`¥ötf
(1, "chdir ./.. failed\n");

915 
	`exô
();

918 
fd
 = 
	`›í
("dd/dd/ffff", 0);

919 if(
fd
 < 0){

920 
	`¥ötf
(1, "open dd/dd/ffff failed\n");

921 
	`exô
();

923 if(
	`ªad
(
fd
, 
buf
, (buf)) != 2){

924 
	`¥ötf
(1, "read dd/dd/ffff wrongÜen\n");

925 
	`exô
();

927 
	`˛o£
(
fd
);

929 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

930 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded!\n");

931 
	`exô
();

934 if(
	`›í
("dd/ff/ff", 
O_CREATE
|
O_RDWR
) >= 0){

935 
	`¥ötf
(1, "create dd/ff/ff succeeded!\n");

936 
	`exô
();

938 if(
	`›í
("dd/xx/ff", 
O_CREATE
|
O_RDWR
) >= 0){

939 
	`¥ötf
(1, "create dd/xx/ff succeeded!\n");

940 
	`exô
();

942 if(
	`›í
("dd", 
O_CREATE
) >= 0){

943 
	`¥ötf
(1, "create dd succeeded!\n");

944 
	`exô
();

946 if(
	`›í
("dd", 
O_RDWR
) >= 0){

947 
	`¥ötf
(1, "open ddÑdwr succeeded!\n");

948 
	`exô
();

950 if(
	`›í
("dd", 
O_WRONLY
) >= 0){

951 
	`¥ötf
(1, "open dd wronly succeeded!\n");

952 
	`exô
();

954 if(
	`lök
("dd/ff/ff", "dd/dd/xx") == 0){

955 
	`¥ötf
(1, "link dd/ff/ff dd/dd/xx succeeded!\n");

956 
	`exô
();

958 if(
	`lök
("dd/xx/ff", "dd/dd/xx") == 0){

959 
	`¥ötf
(1, "link dd/xx/ff dd/dd/xx succeeded!\n");

960 
	`exô
();

962 if(
	`lök
("dd/ff", "dd/dd/ffff") == 0){

963 
	`¥ötf
(1, "link dd/ff dd/dd/ffff succeeded!\n");

964 
	`exô
();

966 if(
	`mkdú
("dd/ff/ff") == 0){

967 
	`¥ötf
(1, "mkdir dd/ff/ff succeeded!\n");

968 
	`exô
();

970 if(
	`mkdú
("dd/xx/ff") == 0){

971 
	`¥ötf
(1, "mkdir dd/xx/ff succeeded!\n");

972 
	`exô
();

974 if(
	`mkdú
("dd/dd/ffff") == 0){

975 
	`¥ötf
(1, "mkdir dd/dd/ffff succeeded!\n");

976 
	`exô
();

978 if(
	`u∆ök
("dd/xx/ff") == 0){

979 
	`¥ötf
(1, "unlink dd/xx/ff succeeded!\n");

980 
	`exô
();

982 if(
	`u∆ök
("dd/ff/ff") == 0){

983 
	`¥ötf
(1, "unlink dd/ff/ff succeeded!\n");

984 
	`exô
();

986 if(
	`chdú
("dd/ff") == 0){

987 
	`¥ötf
(1, "chdir dd/ff succeeded!\n");

988 
	`exô
();

990 if(
	`chdú
("dd/xx") == 0){

991 
	`¥ötf
(1, "chdir dd/xx succeeded!\n");

992 
	`exô
();

995 if(
	`u∆ök
("dd/dd/ffff") != 0){

996 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

997 
	`exô
();

999 if(
	`u∆ök
("dd/ff") != 0){

1000 
	`¥ötf
(1, "unlink dd/ff failed\n");

1001 
	`exô
();

1003 if(
	`u∆ök
("dd") == 0){

1004 
	`¥ötf
(1, "unlinkÇon-empty dd succeeded!\n");

1005 
	`exô
();

1007 if(
	`u∆ök
("dd/dd") < 0){

1008 
	`¥ötf
(1, "unlink dd/dd failed\n");

1009 
	`exô
();

1011 if(
	`u∆ök
("dd") < 0){

1012 
	`¥ötf
(1, "unlink dd failed\n");

1013 
	`exô
();

1016 
	`¥ötf
(1, "subdir ok\n");

1017 
	}
}

1021 
	$bigwrôe
()

1023 
fd
, 
sz
;

1025 
	`¥ötf
(1, "bigwriteÅest\n");

1027 
	`u∆ök
("bigwrite");

1028 
sz
 = 499; sz < 12*512; sz += 471){

1029 
fd
 = 
	`›í
("bigwrôe", 
O_CREATE
 | 
O_RDWR
);

1030 if(
fd
 < 0){

1031 
	`¥ötf
(1, "cannot create bigwrite\n");

1032 
	`exô
();

1034 
i
;

1035 
i
 = 0; i < 2; i++){

1036 
cc
 = 
	`wrôe
(
fd
, 
buf
, 
sz
);

1037 if(
cc
 !
sz
){

1038 
	`¥ötf
(1, "wrôe(%dËªà%d\n", 
sz
, 
cc
);

1039 
	`exô
();

1042 
	`˛o£
(
fd
);

1043 
	`u∆ök
("bigwrite");

1046 
	`¥ötf
(1, "bigwrite ok\n");

1047 
	}
}

1050 
	$bigfûe
()

1052 
fd
, 
i
, 
tŸÆ
, 
cc
;

1054 
	`¥ötf
(1, "bigfileÅest\n");

1056 
	`u∆ök
("bigfile");

1057 
fd
 = 
	`›í
("bigfûe", 
O_CREATE
 | 
O_RDWR
);

1058 if(
fd
 < 0){

1059 
	`¥ötf
(1, "cannot create bigfile");

1060 
	`exô
();

1062 
i
 = 0; i < 20; i++){

1063 
	`mem£t
(
buf
, 
i
, 600);

1064 if(
	`wrôe
(
fd
, 
buf
, 600) != 600){

1065 
	`¥ötf
(1, "write bigfile failed\n");

1066 
	`exô
();

1069 
	`˛o£
(
fd
);

1071 
fd
 = 
	`›í
("bigfile", 0);

1072 if(
fd
 < 0){

1073 
	`¥ötf
(1, "cannot open bigfile\n");

1074 
	`exô
();

1076 
tŸÆ
 = 0;

1077 
i
 = 0; ; i++){

1078 
cc
 = 
	`ªad
(
fd
, 
buf
, 300);

1079 if(
cc
 < 0){

1080 
	`¥ötf
(1, "read bigfile failed\n");

1081 
	`exô
();

1083 if(
cc
 == 0)

1085 if(
cc
 != 300){

1086 
	`¥ötf
(1, "shortÑead bigfile\n");

1087 
	`exô
();

1089 if(
buf
[0] !
i
/2 || buf[299] != i/2){

1090 
	`¥ötf
(1, "read bigfile wrong data\n");

1091 
	`exô
();

1093 
tŸÆ
 +
cc
;

1095 
	`˛o£
(
fd
);

1096 if(
tŸÆ
 != 20*600){

1097 
	`¥ötf
(1, "read bigfile wrongÅotal\n");

1098 
	`exô
();

1100 
	`u∆ök
("bigfile");

1102 
	`¥ötf
(1, "bigfileÅest ok\n");

1103 
	}
}

1106 
	$fouπìn
()

1108 
fd
;

1111 
	`¥ötf
(1, "fourteenÅest\n");

1113 if(
	`mkdú
("12345678901234") != 0){

1114 
	`¥ötf
(1, "mkdir 12345678901234 failed\n");

1115 
	`exô
();

1117 if(
	`mkdú
("12345678901234/123456789012345") != 0){

1118 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 failed\n");

1119 
	`exô
();

1121 
fd
 = 
	`›í
("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1122 if(
fd
 < 0){

1123 
	`¥ötf
(1, "create 123456789012345/123456789012345/123456789012345 failed\n");

1124 
	`exô
();

1126 
	`˛o£
(
fd
);

1127 
fd
 = 
	`›í
("12345678901234/12345678901234/12345678901234", 0);

1128 if(
fd
 < 0){

1129 
	`¥ötf
(1, "open 12345678901234/12345678901234/12345678901234 failed\n");

1130 
	`exô
();

1132 
	`˛o£
(
fd
);

1134 if(
	`mkdú
("12345678901234/12345678901234") == 0){

1135 
	`¥ötf
(1, "mkdir 12345678901234/12345678901234 succeeded!\n");

1136 
	`exô
();

1138 if(
	`mkdú
("123456789012345/12345678901234") == 0){

1139 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 succeeded!\n");

1140 
	`exô
();

1143 
	`¥ötf
(1, "fourteen ok\n");

1144 
	}
}

1147 
	$rmdŸ
()

1149 
	`¥ötf
(1, "rmdotÅest\n");

1150 if(
	`mkdú
("dots") != 0){

1151 
	`¥ötf
(1, "mkdir dots failed\n");

1152 
	`exô
();

1154 if(
	`chdú
("dots") != 0){

1155 
	`¥ötf
(1, "chdir dots failed\n");

1156 
	`exô
();

1158 if(
	`u∆ök
(".") == 0){

1159 
	`¥ötf
(1, "rm . worked!\n");

1160 
	`exô
();

1162 if(
	`u∆ök
("..") == 0){

1163 
	`¥ötf
(1, "rm .. worked!\n");

1164 
	`exô
();

1166 if(
	`chdú
("/") != 0){

1167 
	`¥ötf
(1, "chdir / failed\n");

1168 
	`exô
();

1170 if(
	`u∆ök
("dots/.") == 0){

1171 
	`¥ötf
(1, "unlink dots/. worked!\n");

1172 
	`exô
();

1174 if(
	`u∆ök
("dots/..") == 0){

1175 
	`¥ötf
(1, "unlink dots/.. worked!\n");

1176 
	`exô
();

1178 if(
	`u∆ök
("dots") != 0){

1179 
	`¥ötf
(1, "unlink dots failed!\n");

1180 
	`exô
();

1182 
	`¥ötf
(1, "rmdot ok\n");

1183 
	}
}

1186 
	$dúfûe
()

1188 
fd
;

1190 
	`¥ötf
(1, "dir vs file\n");

1192 
fd
 = 
	`›í
("dúfûe", 
O_CREATE
);

1193 if(
fd
 < 0){

1194 
	`¥ötf
(1, "create dirfile failed\n");

1195 
	`exô
();

1197 
	`˛o£
(
fd
);

1198 if(
	`chdú
("dirfile") == 0){

1199 
	`¥ötf
(1, "chdir dirfile succeeded!\n");

1200 
	`exô
();

1202 
fd
 = 
	`›í
("dirfile/xx", 0);

1203 if(
fd
 >= 0){

1204 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1205 
	`exô
();

1207 
fd
 = 
	`›í
("dúfûe/xx", 
O_CREATE
);

1208 if(
fd
 >= 0){

1209 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1210 
	`exô
();

1212 if(
	`mkdú
("dirfile/xx") == 0){

1213 
	`¥ötf
(1, "mkdir dirfile/xx succeeded!\n");

1214 
	`exô
();

1216 if(
	`u∆ök
("dirfile/xx") == 0){

1217 
	`¥ötf
(1, "unlink dirfile/xx succeeded!\n");

1218 
	`exô
();

1220 if(
	`lök
("README", "dirfile/xx") == 0){

1221 
	`¥ötf
(1, "linkÅo dirfile/xx succeeded!\n");

1222 
	`exô
();

1224 if(
	`u∆ök
("dirfile") != 0){

1225 
	`¥ötf
(1, "unlink dirfile failed!\n");

1226 
	`exô
();

1229 
fd
 = 
	`›í
(".", 
O_RDWR
);

1230 if(
fd
 >= 0){

1231 
	`¥ötf
(1, "open . for writing succeeded!\n");

1232 
	`exô
();

1234 
fd
 = 
	`›í
(".", 0);

1235 if(
	`wrôe
(
fd
, "x", 1) > 0){

1236 
	`¥ötf
(1, "write . succeeded!\n");

1237 
	`exô
();

1239 
	`˛o£
(
fd
);

1241 
	`¥ötf
(1, "dir vs file OK\n");

1242 
	}
}

1246 
	$úef
()

1248 
i
, 
fd
;

1250 
	`¥ötf
(1, "empty fileÇame\n");

1253 
i
 = 0; i < 50 + 1; i++){

1254 if(
	`mkdú
("irefd") != 0){

1255 
	`¥ötf
(1, "mkdir irefd failed\n");

1256 
	`exô
();

1258 if(
	`chdú
("irefd") != 0){

1259 
	`¥ötf
(1, "chdir irefd failed\n");

1260 
	`exô
();

1263 
	`mkdú
("");

1264 
	`lök
("README", "");

1265 
fd
 = 
	`›í
("", 
O_CREATE
);

1266 if(
fd
 >= 0)

1267 
	`˛o£
(
fd
);

1268 
fd
 = 
	`›í
("xx", 
O_CREATE
);

1269 if(
fd
 >= 0)

1270 
	`˛o£
(
fd
);

1271 
	`u∆ök
("xx");

1274 
	`chdú
("/");

1275 
	`¥ötf
(1, "empty fileÇame OK\n");

1276 
	}
}

1282 
	$f‹kã°
()

1284 
n
, 
pid
;

1286 
	`¥ötf
(1, "forkÅest\n");

1288 
n
=0;Ç<1000;Ç++){

1289 
pid
 = 
	`f‹k
();

1290 if(
pid
 < 0)

1292 if(
pid
 == 0)

1293 
	`exô
();

1296 if(
n
 == 1000){

1297 
	`¥ötf
(1, "fork claimedÅo work 1000Åimes!\n");

1298 
	`exô
();

1301 ; 
n
 > 0;Ç--){

1302 if(
	`waô
() < 0){

1303 
	`¥ötf
(1, "wait stoppedÉarly\n");

1304 
	`exô
();

1308 if(
	`waô
() != -1){

1309 
	`¥ötf
(1, "wait gotÅoo many\n");

1310 
	`exô
();

1313 
	`¥ötf
(1, "forkÅest OK\n");

1314 
	}
}

1317 
	$sbrkã°
()

1319 
fds
[2], 
pid
, 
pids
[10], 
µid
;

1320 *
a
, *
b
, *
c
, *
œ°addr
, *
ﬁdbrk
, *
p
, 
s¸©ch
;

1321 
uöt
 
amt
;

1323 
	`¥ötf
(
°dout
, "sbrkÅest\n");

1324 
ﬁdbrk
 = 
	`sbrk
(0);

1327 
a
 = 
	`sbrk
(0);

1328 
i
;

1329 
i
 = 0; i < 5000; i++){

1330 
b
 = 
	`sbrk
(1);

1331 if(
b
 !
a
){

1332 
	`¥ötf
(
°dout
, "sbrkÅe° faûed %d %x %x\n", 
i
, 
a
, 
b
);

1333 
	`exô
();

1335 *
b
 = 1;

1336 
a
 = 
b
 + 1;

1338 
pid
 = 
	`f‹k
();

1339 if(
pid
 < 0){

1340 
	`¥ötf
(
°dout
, "sbrkÅest fork failed\n");

1341 
	`exô
();

1343 
c
 = 
	`sbrk
(1);

1344 
c
 = 
	`sbrk
(1);

1345 if(
c
 !
a
 + 1){

1346 
	`¥ötf
(
°dout
, "sbrkÅest failedÖost-fork\n");

1347 
	`exô
();

1349 if(
pid
 == 0)

1350 
	`exô
();

1351 
	`waô
();

1354 
	#BIG
 (100*1024*1024)

	)

1355 
a
 = 
	`sbrk
(0);

1356 
amt
 = (
BIG
Ë- (
uöt
)
a
;

1357 
p
 = 
	`sbrk
(
amt
);

1358 i‡(
p
 !
a
) {

1359 
	`¥ötf
(
°dout
, "sbrkÅest failedÅo grow bigáddress space;ÉnoughÖhys mem?\n");

1360 
	`exô
();

1362 
œ°addr
 = (*Ë(
BIG
-1);

1363 *
œ°addr
 = 99;

1366 
a
 = 
	`sbrk
(0);

1367 
c
 = 
	`sbrk
(-4096);

1368 if(
c
 == (*)0xffffffff){

1369 
	`¥ötf
(
°dout
, "sbrk couldÇot deallocate\n");

1370 
	`exô
();

1372 
c
 = 
	`sbrk
(0);

1373 if(
c
 !
a
 - 4096){

1374 
	`¥ötf
(
°dout
, "sbrk dóŒoˇti⁄Örodu˚d wr⁄gáddªss,á %x c %x\n", 
a
, 
c
);

1375 
	`exô
();

1379 
a
 = 
	`sbrk
(0);

1380 
c
 = 
	`sbrk
(4096);

1381 if(
c
 !
a
 || 
	`sbrk
(0) !=á + 4096){

1382 
	`¥ötf
(
°dout
, "sbrkÑe-Æloˇti⁄ faûed,á %x c %x\n", 
a
, 
c
);

1383 
	`exô
();

1385 if(*
œ°addr
 == 99){

1387 
	`¥ötf
(
°dout
, "sbrk de-allocation didn'tÑeally deallocate\n");

1388 
	`exô
();

1391 
a
 = 
	`sbrk
(0);

1392 
c
 = 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1393 if(
c
 !
a
){

1394 
	`¥ötf
(
°dout
, "sbrk downsizêÁûed,á %x c %x\n", 
a
, 
c
);

1395 
	`exô
();

1399 
a
 = (*)(
KERNBASE
);á < (*) (KERNBASE+2000000);á += 50000){

1400 
µid
 = 
	`gëpid
();

1401 
pid
 = 
	`f‹k
();

1402 if(
pid
 < 0){

1403 
	`¥ötf
(
°dout
, "fork failed\n");

1404 
	`exô
();

1406 if(
pid
 == 0){

1407 
	`¥ötf
(
°dout
, "o›†couldÑód %x = %x\n", 
a
, *a);

1408 
	`kûl
(
µid
);

1409 
	`exô
();

1411 
	`waô
();

1416 if(
	`pùe
(
fds
) != 0){

1417 
	`¥ötf
(1, "pipe() failed\n");

1418 
	`exô
();

1420 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1421 if((
pids
[
i
] = 
	`f‹k
()) == 0){

1423 
	`sbrk
(
BIG
 - (
uöt
)sbrk(0));

1424 
	`wrôe
(
fds
[1], "x", 1);

1426 ;;Ë
	`¶ìp
(1000);

1428 if(
pids
[
i
] != -1)

1429 
	`ªad
(
fds
[0], &
s¸©ch
, 1);

1433 
c
 = 
	`sbrk
(4096);

1434 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1435 if(
pids
[
i
] == -1)

1437 
	`kûl
(
pids
[
i
]);

1438 
	`waô
();

1440 if(
c
 == (*)0xffffffff){

1441 
	`¥ötf
(
°dout
, "failed sbrkÜeaked memory\n");

1442 
	`exô
();

1445 if(
	`sbrk
(0Ë> 
ﬁdbrk
)

1446 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1448 
	`¥ötf
(
°dout
, "sbrkÅest OK\n");

1449 
	}
}

1452 
	$vÆid©eöt
(*
p
)

1454 
ªs
;

1455 
	`asm
("mov %%esp, %%ebx\n\t"

1459 "˜" (
ªs
) :

1460 "a" (
SYS_¶ìp
), "n" (
T_SYSCALL
), "c" (
p
) :

1462 
	}
}

1465 
	$vÆid©ëe°
()

1467 
hi
, 
pid
;

1468 
uöt
 
p
;

1470 
	`¥ötf
(
°dout
, "validateÅest\n");

1471 
hi
 = 1100*1024;

1473 
p
 = 0;Ö <(
uöt
)
hi
;Ö += 4096){

1474 if((
pid
 = 
	`f‹k
()) == 0){

1476 
	`vÆid©eöt
((*)
p
);

1477 
	`exô
();

1479 
	`¶ìp
(0);

1480 
	`¶ìp
(0);

1481 
	`kûl
(
pid
);

1482 
	`waô
();

1485 if(
	`lök
("nosuchfûe", (*)
p
) != -1){

1486 
	`¥ötf
(
°dout
, "link shouldÇot succeed\n");

1487 
	`exô
();

1491 
	`¥ötf
(
°dout
, "validate ok\n");

1492 
	}
}

1495 
	gunöô
[10000];

1497 
	$bs°e°
()

1499 
i
;

1501 
	`¥ötf
(
°dout
, "bssÅest\n");

1502 
i
 = 0; i < (
unöô
); i++){

1503 if(
unöô
[
i
] != '\0'){

1504 
	`¥ötf
(
°dout
, "bssÅest failed\n");

1505 
	`exô
();

1508 
	`¥ötf
(
°dout
, "bssÅest ok\n");

1509 
	}
}

1515 
	$big¨gã°
()

1517 
pid
, 
fd
;

1519 
	`u∆ök
("bigarg-ok");

1520 
pid
 = 
	`f‹k
();

1521 if(
pid
 == 0){

1522 *
¨gs
[
MAXARG
];

1523 
i
;

1524 
i
 = 0; i < 
MAXARG
-1; i++)

1525 
¨gs
[
i
] = "bigargsÅest: failed\n ";

1526 
¨gs
[
MAXARG
-1] = 0;

1527 
	`¥ötf
(
°dout
, "bigargÅest\n");

1528 
	`exec
("echo", 
¨gs
);

1529 
	`¥ötf
(
°dout
, "bigargÅest ok\n");

1530 
fd
 = 
	`›í
("big¨g-ok", 
O_CREATE
);

1531 
	`˛o£
(
fd
);

1532 
	`exô
();

1533 } if(
pid
 < 0){

1534 
	`¥ötf
(
°dout
, "bigargtest: fork failed\n");

1535 
	`exô
();

1537 
	`waô
();

1538 
fd
 = 
	`›í
("bigarg-ok", 0);

1539 if(
fd
 < 0){

1540 
	`¥ötf
(
°dout
, "bigargÅest failed!\n");

1541 
	`exô
();

1543 
	`˛o£
(
fd
);

1544 
	`u∆ök
("bigarg-ok");

1545 
	}
}

1550 
	$fsfuŒ
()

1552 
nfûes
;

1553 
fsblocks
 = 0;

1555 
	`¥ötf
(1, "fsfullÅest\n");

1557 
nfûes
 = 0; ;Çfiles++){

1558 
«me
[64];

1559 
«me
[0] = 'f';

1560 
«me
[1] = '0' + 
nfûes
 / 1000;

1561 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1562 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1563 
«me
[4] = '0' + (
nfûes
 % 10);

1564 
«me
[5] = '\0';

1565 
	`¥ötf
(1, "wrôög %s\n", 
«me
);

1566 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

1567 if(
fd
 < 0){

1568 
	`¥ötf
(1, "›í %†Áûed\n", 
«me
);

1571 
tŸÆ
 = 0;

1573 
cc
 = 
	`wrôe
(
fd
, 
buf
, 512);

1574 if(
cc
 < 512)

1576 
tŸÆ
 +
cc
;

1577 
fsblocks
++;

1579 
	`¥ötf
(1, "wrŸê%d byãs\n", 
tŸÆ
);

1580 
	`˛o£
(
fd
);

1581 if(
tŸÆ
 == 0)

1585 
nfûes
 >= 0){

1586 
«me
[64];

1587 
«me
[0] = 'f';

1588 
«me
[1] = '0' + 
nfûes
 / 1000;

1589 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1590 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1591 
«me
[4] = '0' + (
nfûes
 % 10);

1592 
«me
[5] = '\0';

1593 
	`u∆ök
(
«me
);

1594 
nfûes
--;

1597 
	`¥ötf
(1, "fsfullÅest finished\n");

1598 
	}
}

1600 
	gønd°©e
 = 1;

1602 
	$ønd
()

1604 
ønd°©e
 =Ñandstate * 1664525 + 1013904223;

1605  
ønd°©e
;

1606 
	}
}

1609 
	$maö
(
¨gc
, *
¨gv
[])

1611 
	`¥ötf
(1, "usertests starting\n");

1613 if(
	`›í
("usertests.ran", 0) >= 0){

1614 
	`¥ötf
(1, "alreadyÑan userÅests --Ñebuild fs.img\n");

1615 
	`exô
();

1617 
	`˛o£
(
	`›í
("u£πe°s.øn", 
O_CREATE
));

1619 
	`big¨gã°
();

1620 
	`bigwrôe
();

1621 
	`big¨gã°
();

1622 
	`bs°e°
();

1623 
	`sbrkã°
();

1624 
	`vÆid©ëe°
();

1626 
	`›íã°
();

1627 
	`wrôëe°
();

1628 
	`wrôëe°1
();

1629 
	`¸óãã°
();

1631 
	`mem
();

1632 
	`pùe1
();

1633 
	`¥ìm±
();

1634 
	`exôwaô
();

1636 
	`rmdŸ
();

1637 
	`fouπìn
();

1638 
	`bigfûe
();

1639 
	`subdú
();

1640 
	`c⁄¸óã
();

1641 
	`löku∆ök
();

1642 
	`lökã°
();

1643 
	`u∆ökªad
();

1644 
	`¸óãdñëe
();

1645 
	`twofûes
();

1646 
	`sh¨edfd
();

1647 
	`dúfûe
();

1648 
	`úef
();

1649 
	`f‹kã°
();

1650 
	`bigdú
();

1652 
	`exe˘e°
();

1654 
	`exô
();

1655 
	}
}

	@vm.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"defs.h
"

4 
	~"x86.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

8 
	~"ñf.h
"

10 
d©a
[];

11 
pde_t
 *
	gkpgdú
;

12 
£gdesc
 
	ggdt
[
NSEGS
];

17 
	$£göô
()

19 
˝u
 *
c
;

25 
c
 = &
˝us
[
	`˝unum
()];

26 
c
->
gdt
[
SEG_KCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 0);

27 
c
->
gdt
[
SEG_KDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 0);

28 
c
->
gdt
[
SEG_UCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 
DPL_USER
);

29 
c
->
gdt
[
SEG_UDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 
DPL_USER
);

32 
c
->
gdt
[
SEG_KCPU
] = 
	`SEG
(
STA_W
, &c->
˝u
, 8, 0);

34 
	`lgdt
(
c
->
gdt
, (c->gdt));

35 
	`lﬂdgs
(
SEG_KCPU
 << 3);

38 
˝u
 = 
c
;

39 
¥oc
 = 0;

40 
	}
}

45 
±e_t
 *

46 
	$wÆkpgdú
(
pde_t
 *
pgdú
, c⁄° *
va
, 
Æloc
)

48 
pde_t
 *
pde
;

49 
±e_t
 *
pgèb
;

51 
pde
 = &
pgdú
[
	`PDX
(
va
)];

52 if(*
pde
 & 
PTE_P
){

53 
pgèb
 = (
±e_t
*)
	`p2v
(
	`PTE_ADDR
(*
pde
));

55 if(!
Æloc
 || (
pgèb
 = (
±e_t
*)
	`kÆloc
()) == 0)

58 
	`mem£t
(
pgèb
, 0, 
PGSIZE
);

62 *
pde
 = 
	`v2p
(
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

64  &
pgèb
[
	`PTX
(
va
)];

65 
	}
}

71 
	$m≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
, 
≥rm
)

73 *
a
, *
œ°
;

74 
±e_t
 *
±e
;

76 
a
 = (*)
	`PGROUNDDOWN
((
uöt
)
va
);

77 
œ°
 = (*)
	`PGROUNDDOWN
(((
uöt
)
va
Ë+ 
size
 - 1);

79 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
a
, 1)) == 0)

81 if(*
±e
 & 
PTE_P
)

82 
	`∑nic
("remap");

83 *
±e
 = 
∑
 | 
≥rm
 | 
PTE_P
;

84 if(
a
 =
œ°
)

86 
a
 +
PGSIZE
;

87 
∑
 +
PGSIZE
;

91 
	}
}

116 
	skm≠
 {

117 *
	mvút
;

118 
uöt
 
	mphys_°¨t
;

119 
uöt
 
	mphys_íd
;

120 
	m≥rm
;

121 } 
	gkm≠
[] = {

122 { (*Ë
KERNBASE
, 0, 
EXTMEM
, 
PTE_W
},

123 { (*Ë
KERNLINK
, 
V2P
(KERNLINK), V2P(
d©a
), 0},

124 { (*Ë
d©a
, 
V2P
(d©a), 
PHYSTOP
, 
PTE_W
},

125 { (*Ë
DEVSPACE
, DEVSPACE, 0, 
PTE_W
},

129 
pde_t
*

130 
	$£tupkvm
()

132 
pde_t
 *
pgdú
;

133 
km≠
 *
k
;

135 if((
pgdú
 = (
pde_t
*)
	`kÆloc
()) == 0)

137 
	`mem£t
(
pgdú
, 0, 
PGSIZE
);

138 i‡(
	`p2v
(
PHYSTOP
Ë> (*)
DEVSPACE
)

139 
	`∑nic
("PHYSTOPÅoo high");

140 
k
 = 
km≠
; k < &km≠[
	`NELEM
(kmap)]; k++)

141 if(
	`m≠∑ges
(
pgdú
, 
k
->
vút
, k->
phys_íd
 - k->
phys_°¨t
,

142 (
uöt
)
k
->
phys_°¨t
, k->
≥rm
) < 0)

144  
pgdú
;

145 
	}
}

150 
	$kvmÆloc
()

152 
kpgdú
 = 
	`£tupkvm
();

153 
	`swôchkvm
();

154 
	}
}

159 
	$swôchkvm
()

161 
	`l¸3
(
	`v2p
(
kpgdú
));

162 
	}
}

166 
	$swôchuvm
(
¥oc
 *
p
)

168 
	`push˛i
();

169 
˝u
->
gdt
[
SEG_TSS
] = 
	`SEG16
(
STS_T32A
, &˝u->
ts
, (cpu->ts)-1, 0);

170 
˝u
->
gdt
[
SEG_TSS
].
s
 = 0;

171 
˝u
->
ts
.
ss0
 = 
SEG_KDATA
 << 3;

172 
˝u
->
ts
.
e•0
 = (
uöt
)
¥oc
->
k°ack
 + 
KSTACKSIZE
;

173 
	`…r
(
SEG_TSS
 << 3);

174 if(
p
->
pgdú
 == 0)

175 
	`∑nic
("switchuvm:ÇoÖgdir");

176 
	`l¸3
(
	`v2p
(
p
->
pgdú
));

177 
	`p›˛i
();

178 
	}
}

183 
	$öôuvm
(
pde_t
 *
pgdú
, *
öô
, 
uöt
 
sz
)

185 *
mem
;

187 if(
sz
 >
PGSIZE
)

188 
	`∑nic
("inituvm: moreÅhanáÖage");

189 
mem
 = 
	`kÆloc
();

190 
	`mem£t
(
mem
, 0, 
PGSIZE
);

191 
	`m≠∑ges
(
pgdú
, 0, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

192 
	`memmove
(
mem
, 
öô
, 
sz
);

193 
	}
}

198 
	$lﬂduvm
(
pde_t
 *
pgdú
, *
addr
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
)

200 
uöt
 
i
, 
∑
, 
n
;

201 
±e_t
 *
±e
;

203 if((
uöt
Ë
addr
 % 
PGSIZE
 != 0)

204 
	`∑nic
("loaduvm:áddr must beÖageáligned");

205 
i
 = 0; i < 
sz
; i +
PGSIZE
){

206 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
addr
+
i
, 0)) == 0)

207 
	`∑nic
("loaduvm:áddress shouldÉxist");

208 
∑
 = 
	`PTE_ADDR
(*
±e
);

209 if(
sz
 - 
i
 < 
PGSIZE
)

210 
n
 = 
sz
 - 
i
;

212 
n
 = 
PGSIZE
;

213 if(
	`ªadi
(
ù
, 
	`p2v
(
∑
), 
off£t
+
i
, 
n
) !=Ç)

217 
	}
}

222 
	$Ælocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

224 *
mem
;

225 
uöt
 
a
;

227 if(
√wsz
 >
HAMA_MIRROR
)

229 if(
√wsz
 < 
ﬁdsz
)

230  
ﬁdsz
;

232 
a
 = 
	`PGROUNDUP
(
ﬁdsz
);

233 ; 
a
 < 
√wsz
;á +
PGSIZE
){

234 
mem
 = 
	`kÆloc
();

235 if(
mem
 == 0){

236 
	`˝rötf
("allocuvm out of memory\n");

237 
	`dóŒocuvm
(
pgdú
, 
√wsz
, 
ﬁdsz
);

240 
	`mem£t
(
mem
, 0, 
PGSIZE
);

241 
	`m≠∑ges
(
pgdú
, (*)
a
, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

243  
√wsz
;

244 
	}
}

251 
	$dóŒocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

253 
±e_t
 *
±e
;

254 
uöt
 
a
, 
∑
;

256 if(
√wsz
 >
ﬁdsz
)

257  
ﬁdsz
;

259 
a
 = 
	`PGROUNDUP
(
√wsz
);

260 ; 
a
 < 
ﬁdsz
;á +
PGSIZE
){

261 i‡(
	`HAMA_IS_MIRROR
(
a
)) ;

262 
±e
 = 
	`wÆkpgdú
(
pgdú
, (*)
a
, 0);

263 if(!
±e
)

264 
a
 +(
NPTENTRIES
 - 1Ë* 
PGSIZE
;

265 if((*
±e
 & 
PTE_P
) != 0){

266 
∑
 = 
	`PTE_ADDR
(*
±e
);

267 if(
∑
 == 0){

270 *
v
 = 
	`p2v
(
∑
);

271 
	`k‰ì
(
v
);

272 *
±e
 = 0;

275  
√wsz
;

276 
	}
}

281 
	$‰ìvm
(
pde_t
 *
pgdú
)

283 
uöt
 
i
;

285 if(
pgdú
 == 0)

286 
	`∑nic
("freevm:ÇoÖgdir");

287 
	`dóŒocuvm
(
pgdú
, 
PHYSTOP
, 0);

288 
i
 = 0; i < 
NPDENTRIES
; i++){

289 if(
pgdú
[
i
] & 
PTE_P
){

290 * 
v
 = 
	`p2v
(
	`PTE_ADDR
(
pgdú
[
i
]));

291 
	`k‰ì
(
v
);

294 
	`k‰ì
((*)
pgdú
);

295 
	}
}

300 
	$˛óΩãu
(
pde_t
 *
pgdú
, *
uva
)

302 
±e_t
 *
±e
;

304 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

305 if(
±e
 == 0)

306 
	`∑nic
("clearpteu");

307 *
±e
 &~
PTE_U
;

308 
	}
}

312 
pde_t
*

313 
	$c›yuvm
(
pde_t
 *
pgdú
, 
uöt
 
sz
)

315 
pde_t
 *
d
;

316 
±e_t
 *
±e
;

317 
uöt
 
∑
, 
i
;

318 *
mem
;

320 if((
d
 = 
	`£tupkvm
()) == 0)

322 
i
 = 0; i < 
sz
; i +
PGSIZE
){

323 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, (*Ë
i
, 0)) == 0)

324 
	`∑nic
("copyuvm:Öte shouldÉxist");

325 if(!(*
±e
 & 
PTE_P
))

326 
	`∑nic
("copyuvm:ÖageÇotÖresent");

327 
∑
 = 
	`PTE_ADDR
(*
±e
);

328 if((
mem
 = 
	`kÆloc
()) == 0)

329 
bad
;

330 
	`memmove
(
mem
, (*)
	`p2v
(
∑
), 
PGSIZE
);

331 if(
	`m≠∑ges
(
d
, (*)
i
, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
) < 0)

332 
bad
;

334  
d
;

336 
bad
:

337 
	`‰ìvm
(
d
);

339 
	}
}

344 
	$uva2ka
(
pde_t
 *
pgdú
, *
uva
)

346 
±e_t
 *
±e
;

348 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

349 if((*
±e
 & 
PTE_P
) == 0)

351 if((*
±e
 & 
PTE_U
) == 0)

353  (*)
	`p2v
(
	`PTE_ADDR
(*
±e
));

354 
	}
}

360 
	$c›yout
(
pde_t
 *
pgdú
, 
uöt
 
va
, *
p
, uöà
Àn
)

362 *
buf
, *
∑0
;

363 
uöt
 
n
, 
va0
;

365 
buf
 = (*)
p
;

366 
Àn
 > 0){

367 
va0
 = (
uöt
)
	`PGROUNDDOWN
(
va
);

368 
∑0
 = 
	`uva2ka
(
pgdú
, (*)
va0
);

369 if(
∑0
 == 0)

371 
n
 = 
PGSIZE
 - (
va
 - 
va0
);

372 if(
n
 > 
Àn
)

373 
n
 = 
Àn
;

374 
	`memmove
(
∑0
 + (
va
 - 
va0
), 
buf
, 
n
);

375 
Àn
 -
n
;

376 
buf
 +
n
;

377 
va
 = 
va0
 + 
PGSIZE
;

380 
	}
}

	@wc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$wc
(
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

16 
i
=0; i<
n
; i++){

17 
c
++;

18 if(
buf
[
i
] == '\n')

19 
l
++;

20 if(
	`°rchr
(" \r\t\n\v", 
buf
[
i
]))

21 
öw‹d
 = 0;

22 if(!
öw‹d
){

23 
w
++;

24 
öw‹d
 = 1;

28 if(
n
 < 0){

29 
	`¥ötf
(1, "wc:ÑeadÉrror\n");

30 
	`exô
();

32 
	`¥ötf
(1, "%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
fd
, 
i
;

40 if(
¨gc
 <= 1){

41 
	`wc
(0, "");

42 
	`exô
();

45 
i
 = 1; i < 
¨gc
; i++){

46 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

47 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

48 
	`exô
();

50 
	`wc
(
fd
, 
¨gv
[
i
]);

51 
	`˛o£
(
fd
);

53 
	`exô
();

54 
	}
}

	@x86.h

3 
ölöe
 
uch¨


4 
	$öb
(
ush‹t
 
p‹t
)

6 
uch¨
 
d©a
;

8 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

9  
d©a
;

10 
	}
}

12 
ölöe
 

13 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

15 
asm
 volatile("cld;Ñep insl" :

16 "=D" (
addr
), "=c" (
˙t
) :

17 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

19 
	}
}

21 
ölöe
 

22 
	$outb
(
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

24 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

25 
	}
}

27 
ölöe
 

28 
	$outw
(
ush‹t
 
p‹t
, ush‹à
d©a
)

30 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

31 
	}
}

33 
ölöe
 

34 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

36 
asm
 volatile("cld;Ñep outsl" :

37 "=S" (
addr
), "=c" (
˙t
) :

38 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

40 
	}
}

42 
ölöe
 

43 
	$°osb
(*
addr
, 
d©a
, 
˙t
)

45 
asm
 volatile("cld;Ñep stosb" :

46 "=D" (
addr
), "=c" (
˙t
) :

47 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

49 
	}
}

51 
ölöe
 

52 
	$°o¶
(*
addr
, 
d©a
, 
˙t
)

54 
asm
 volatile("cld;Ñep stosl" :

55 "=D" (
addr
), "=c" (
˙t
) :

56 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

58 
	}
}

60 
	g£gdesc
;

62 
ölöe
 

63 
	$lgdt
(
£gdesc
 *
p
, 
size
)

65 vﬁ©ûê
ush‹t
 
pd
[3];

67 
pd
[0] = 
size
-1;

68 
pd
[1] = (
uöt
)
p
;

69 
pd
[2] = (
uöt
)
p
 >> 16;

71 
asm
 vﬁ©ûe("lgdà(%0)" : : "r" (
pd
));

72 
	}
}

74 
	gg©edesc
;

76 
ölöe
 

77 
	$lidt
(
g©edesc
 *
p
, 
size
)

79 vﬁ©ûê
ush‹t
 
pd
[3];

81 
pd
[0] = 
size
-1;

82 
pd
[1] = (
uöt
)
p
;

83 
pd
[2] = (
uöt
)
p
 >> 16;

85 
asm
 vﬁ©ûe("lidà(%0)" : : "r" (
pd
));

86 
	}
}

88 
ölöe
 

89 
	$…r
(
ush‹t
 
£l
)

91 
asm
 vﬁ©ûe("…∏%0" : : "r" (
£l
));

92 
	}
}

94 
ölöe
 
uöt


95 
	$ªadeÊags
()

97 
uöt
 
eÊags
;

98 
asm
 vﬁ©ûe("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

99  
eÊags
;

100 
	}
}

102 
ölöe
 

103 
	$lﬂdgs
(
ush‹t
 
v
)

105 
asm
 vﬁ©ûe("movw %0, %%gs" : : "r" (
v
));

106 
	}
}

108 
ölöe
 

109 
	$˛i
()

111 
asm
 volatile("cli");

112 
	}
}

114 
ölöe
 

115 
	$°i
()

117 
asm
 volatile("sti");

118 
	}
}

120 
ölöe
 
uöt


121 
	$xchg
(vﬁ©ûê
uöt
 *
addr
, uöà
√wvÆ
)

123 
uöt
 
ªsu…
;

126 
asm
 volatile("lock; xchgl %0, %1" :

127 "+m" (*
addr
), "˜" (
ªsu…
) :

128 "1" (
√wvÆ
) :

130  
ªsu…
;

131 
	}
}

133 
ölöe
 
uöt


134 
	$r¸2
()

136 
uöt
 
vÆ
;

137 
asm
 vﬁ©ûe("mov»%%¸2,%0" : "Ù" (
vÆ
));

138  
vÆ
;

139 
	}
}

141 
ölöe
 

142 
	$l¸3
(
uöt
 
vÆ
)

144 
asm
 vﬁ©ûe("mov»%0,%%¸3" : : "r" (
vÆ
));

145 
	}
}

150 
	så≠‰ame
 {

152 
uöt
 
	medi
;

153 
uöt
 
	mesi
;

154 
uöt
 
	mebp
;

155 
uöt
 
	m€•
;

156 
uöt
 
	mebx
;

157 
uöt
 
	medx
;

158 
uöt
 
	mecx
;

159 
uöt
 
	móx
;

162 
ush‹t
 
	mgs
;

163 
ush‹t
 
	m∑ddög1
;

164 
ush‹t
 
	mfs
;

165 
ush‹t
 
	m∑ddög2
;

166 
ush‹t
 
	mes
;

167 
ush‹t
 
	m∑ddög3
;

168 
ush‹t
 
	mds
;

169 
ush‹t
 
	m∑ddög4
;

170 
uöt
 
	må≠no
;

173 
uöt
 
	mîr
;

174 
uöt
 
	meù
;

175 
ush‹t
 
	mcs
;

176 
ush‹t
 
	m∑ddög5
;

177 
uöt
 
	meÊags
;

180 
uöt
 
	me•
;

181 
ush‹t
 
	mss
;

182 
ush‹t
 
	m∑ddög6
;

	@zombie.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$maö
()

11 if(
	`f‹k
() > 0)

12 
	`¶ìp
(5);

13 
	`exô
();

14 
	}
}

	@
1
.
0
66
500
asm.h
bio.c
bootmain.c
buf.h
cat.c
console.c
defs.h
echo.c
elf.h
exec.c
fcntl.h
file.c
file.h
forktest.c
fs.c
fs.h
grep.c
ide.c
init.c
ioapic.c
kalloc.c
kbd.c
kbd.h
kill.c
lapic.c
ln.c
log.c
ls.c
main.c
memide.c
memlayout.h
mkdir.c
mkfs.c
mmu.h
mp.c
mp.h
param.h
picirq.c
pipe.c
printf.c
proc.c
proc.h
rm.c
sh.c
spinlock.c
spinlock.h
stat.h
stressfs.c
string.c
syscall.c
syscall.h
sysfile.c
sysproc.c
timer.c
trap.c
traps.h
types.h
uart.c
ulib.c
umalloc.c
user.h
usertests.c
vm.c
wc.c
x86.h
zombie.c
